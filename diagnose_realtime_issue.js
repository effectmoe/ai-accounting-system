const { createClient } = require('@supabase/supabase-js');

// SupabaseÊé•Á∂öÊÉÖÂ†±
const SUPABASE_URL = 'https://clqpfmroqcnvyxdzadln.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNscXBmbXJvcWNudnl4ZHphZGxuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE2OTc3NDEsImV4cCI6MjA2NzI3Mzc0MX0.CN7Vk_-W7Pn09jvrlVyOlgyguxqgNLs3C-9Bf1UTdTA';
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNscXBmbXJvcWNudnl4ZHphZGxuIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MTY5Nzc0MSwiZXhwIjoyMDY3MjczNzQxfQ.n_FSZbe3xNSPGUVuWEXG4VohGQeCAe6tKAmAQbzX2LQ';

// ‰∏°Êñπ„ÅÆ„ÇØ„É©„Ç§„Ç¢„É≥„Éà„Çí‰ΩúÊàêÔºàanon key„Å®service keyÔºâ
const supabaseAnon = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
const supabaseService = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

async function diagnoseRealtimeIssue() {
  console.log('='.repeat(80));
  console.log('üîç Supabase „É™„Ç¢„É´„Çø„Ç§„É†Ë®∫Êñ≠„ÉÑ„Éº„É´');
  console.log('='.repeat(80) + '\n');

  const results = {
    tableExists: false,
    anonKeyWorks: false,
    serviceKeyWorks: false,
    realtimeConnection: false,
    insertWorks: false,
    realtimeReceived: false,
    errors: []
  };

  try {
    // 1. „ÉÜ„Éº„Éñ„É´„Ç¢„ÇØ„Çª„Çπ„ÉÜ„Çπ„Éà
    console.log('1Ô∏è‚É£ „ÉÜ„Éº„Éñ„É´„Ç¢„ÇØ„Çª„Çπ„ÉÜ„Çπ„Éà...');
    
    // Anon key„Åß„ÉÜ„Çπ„Éà
    const { data: anonData, error: anonError } = await supabaseAnon
      .from('ocr_results')
      .select('id')
      .limit(1);
    
    if (anonError) {
      console.log('‚ùå Anon key„Åß„ÅÆ„Ç¢„ÇØ„Çª„Çπ„Ç®„É©„Éº:', anonError.message);
      results.errors.push(`Anon key error: ${anonError.message}`);
    } else {
      console.log('‚úÖ Anon key„Åß„ÅÆ„Ç¢„ÇØ„Çª„ÇπÊàêÂäü');
      results.anonKeyWorks = true;
      results.tableExists = true;
    }
    
    // Service key„Åß„ÉÜ„Çπ„Éà
    const { data: serviceData, error: serviceError } = await supabaseService
      .from('ocr_results')
      .select('id')
      .limit(1);
    
    if (serviceError) {
      console.log('‚ùå Service key„Åß„ÅÆ„Ç¢„ÇØ„Çª„Çπ„Ç®„É©„Éº:', serviceError.message);
      results.errors.push(`Service key error: ${serviceError.message}`);
    } else {
      console.log('‚úÖ Service key„Åß„ÅÆ„Ç¢„ÇØ„Çª„ÇπÊàêÂäü');
      results.serviceKeyWorks = true;
      results.tableExists = true;
    }
    
    console.log('');

    // 2. „É™„Ç¢„É´„Çø„Ç§„É†Êé•Á∂ö„ÉÜ„Çπ„ÉàÔºàË§áÊï∞„ÅÆÊñπÊ≥ïÔºâ
    console.log('2Ô∏è‚É£ „É™„Ç¢„É´„Çø„Ç§„É†Êé•Á∂ö„ÉÜ„Çπ„Éà...\n');
    
    // ÊñπÊ≥ï1: postgres_changes„Çí‰ΩøÁî®
    console.log('ÊñπÊ≥ï1: postgres_changes„Éë„Çø„Éº„É≥');
    let method1Connected = false;
    let method1Received = false;
    
    const channel1 = supabaseAnon
      .channel('test-channel-1')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'ocr_results'
        },
        (payload) => {
          method1Received = true;
          console.log('‚úÖ ÊñπÊ≥ï1„Åß„É°„ÉÉ„Çª„Éº„Ç∏Âèó‰ø°:', payload.eventType);
        }
      )
      .subscribe((status) => {
        console.log('üì° ÊñπÊ≥ï1 - „ÉÅ„É£„É≥„Éç„É´Áä∂ÊÖã:', status);
        if (status === 'SUBSCRIBED') {
          method1Connected = true;
        }
      });
    
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // ÊñπÊ≥ï2: ÂÄãÂà•„Ç§„Éô„É≥„Éà„ÇíÊåáÂÆö
    console.log('\nÊñπÊ≥ï2: ÂÄãÂà•„Ç§„Éô„É≥„ÉàÊåáÂÆö„Éë„Çø„Éº„É≥');
    let method2Connected = false;
    let method2Received = false;
    
    const channel2 = supabaseAnon
      .channel('test-channel-2')
      .on(
        'postgres_changes',
        { event: 'INSERT', schema: 'public', table: 'ocr_results' },
        (payload) => {
          method2Received = true;
          console.log('‚úÖ ÊñπÊ≥ï2„ÅßINSERT„É°„ÉÉ„Çª„Éº„Ç∏Âèó‰ø°');
        }
      )
      .on(
        'postgres_changes',
        { event: 'UPDATE', schema: 'public', table: 'ocr_results' },
        (payload) => {
          method2Received = true;
          console.log('‚úÖ ÊñπÊ≥ï2„ÅßUPDATE„É°„ÉÉ„Çª„Éº„Ç∏Âèó‰ø°');
        }
      )
      .subscribe((status) => {
        console.log('üì° ÊñπÊ≥ï2 - „ÉÅ„É£„É≥„Éç„É´Áä∂ÊÖã:', status);
        if (status === 'SUBSCRIBED') {
          method2Connected = true;
        }
      });
    
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    results.realtimeConnection = method1Connected || method2Connected;
    
    console.log('');

    // 3. „Éá„Éº„ÇøÊåøÂÖ•„Å®ÈÄöÁü•„ÉÜ„Çπ„Éà
    console.log('3Ô∏è‚É£ „Éá„Éº„ÇøÊåøÂÖ•„Å®ÈÄöÁü•„ÉÜ„Çπ„Éà...\n');
    
    const testData = {
      file_name: `diagnosis_test_${Date.now()}.pdf`,
      file_size: 2048,
      file_type: 'application/pdf',
      file_url: 'https://example.com/diagnosis.pdf',
      extracted_text: 'Ë®∫Êñ≠„ÉÜ„Çπ„Éà„Éá„Éº„Çø',
      confidence: 0.99,
      vendor_name: 'Ë®∫Êñ≠„ÉÜ„Çπ„ÉàÂ∫óËàó',
      receipt_date: new Date().toISOString().split('T')[0],
      total_amount: 9999,
      tax_amount: 999,
      status: 'completed',
      company_id: '11111111-1111-1111-1111-111111111111'
    };
    
    console.log('üì§ „ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÇíÊåøÂÖ•‰∏≠...');
    const { data: insertedData, error: insertError } = await supabaseAnon
      .from('ocr_results')
      .insert([testData])
      .select();
    
    if (insertError) {
      console.log('‚ùå „Éá„Éº„ÇøÊåøÂÖ•„Ç®„É©„Éº:', insertError.message);
      results.errors.push(`Insert error: ${insertError.message}`);
    } else {
      console.log('‚úÖ „Éá„Éº„ÇøÊåøÂÖ•ÊàêÂäü');
      console.log('ÊåøÂÖ•„Åï„Çå„ÅüID:', insertedData[0].id);
      results.insertWorks = true;
    }
    
    // ÈÄöÁü•„ÅÆÂèó‰ø°„ÇíÂæÖ„Å§
    console.log('\n‚è≥ „É™„Ç¢„É´„Çø„Ç§„É†ÈÄöÁü•„ÇíÂæÖÊ©ü‰∏≠Ôºà5ÁßíÔºâ...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    results.realtimeReceived = method1Received || method2Received;
    
    // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    supabaseAnon.removeChannel(channel1);
    supabaseAnon.removeChannel(channel2);
    
    // „ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÇíÂâäÈô§
    if (insertedData && insertedData[0]) {
      await supabaseAnon
        .from('ocr_results')
        .delete()
        .eq('id', insertedData[0].id);
    }
    
    console.log('');

    // 4. Ë®∫Êñ≠ÁµêÊûú„ÅÆ„Åæ„Å®„ÇÅ
    console.log('='.repeat(80));
    console.log('üìä Ë®∫Êñ≠ÁµêÊûú„Çµ„Éû„É™„Éº');
    console.log('='.repeat(80) + '\n');
    
    console.log(`„ÉÜ„Éº„Éñ„É´Â≠òÂú®: ${results.tableExists ? '‚úÖ' : '‚ùå'}`);
    console.log(`Anon Key„Ç¢„ÇØ„Çª„Çπ: ${results.anonKeyWorks ? '‚úÖ' : '‚ùå'}`);
    console.log(`Service Key„Ç¢„ÇØ„Çª„Çπ: ${results.serviceKeyWorks ? '‚úÖ' : '‚ùå'}`);
    console.log(`„É™„Ç¢„É´„Çø„Ç§„É†Êé•Á∂ö: ${results.realtimeConnection ? '‚úÖ' : '‚ùå'}`);
    console.log(`„Éá„Éº„ÇøÊåøÂÖ•: ${results.insertWorks ? '‚úÖ' : '‚ùå'}`);
    console.log(`„É™„Ç¢„É´„Çø„Ç§„É†ÈÄöÁü•Âèó‰ø°: ${results.realtimeReceived ? '‚úÖ' : '‚ùå'}`);
    
    if (results.errors.length > 0) {
      console.log('\n‚ùå „Ç®„É©„Éº‰∏ÄË¶ß:');
      results.errors.forEach(err => console.log(`  - ${err}`));
    }
    
    // ÂïèÈ°å„ÅÆË®∫Êñ≠„Å®Ëß£Ê±∫Á≠ñ
    console.log('\n' + '='.repeat(80));
    console.log('üîß ÂïèÈ°å„ÅÆË®∫Êñ≠„Å®Ëß£Ê±∫Á≠ñ');
    console.log('='.repeat(80) + '\n');
    
    if (!results.realtimeReceived) {
      console.log('‚ùå „É™„Ç¢„É´„Çø„Ç§„É†ÈÄöÁü•„ÅåÂèó‰ø°„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì\n');
      console.log('ËÄÉ„Åà„Çâ„Çå„ÇãÂéüÂõ†„Å®Ëß£Ê±∫Á≠ñ:\n');
      
      console.log('1. „É™„Ç¢„É´„Çø„Ç§„É†Ë®≠ÂÆö„ÅÆÂïèÈ°å');
      console.log('   Ëß£Ê±∫Á≠ñ: fix_realtime_ocr.sql „ÇíSupabase SQL Editor„ÅßÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ\n');
      
      console.log('2. RLS„Éù„É™„Ç∑„Éº„ÅÆÂïèÈ°å');
      console.log('   Ëß£Ê±∫Á≠ñ: ‰ª•‰∏ã„ÅÆSQL„ÅßRLS„Çí‰∏ÄÊôÇÁöÑ„Å´ÁÑ°ÂäπÂåñ„Åó„Å¶„ÉÜ„Çπ„Éà:');
      console.log('   ALTER TABLE public.ocr_results DISABLE ROW LEVEL SECURITY;\n');
      
      console.log('3. „Éë„Éñ„É™„Ç±„Éº„Ç∑„Éß„É≥Ë®≠ÂÆö„ÅÆÂïèÈ°å');
      console.log('   Ëß£Ê±∫Á≠ñ: Supabase„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„ÅßÁ¢∫Ë™ç:');
      console.log('   Database ‚Üí Replication ‚Üí supabase_realtime ‚Üí ocr_results„Åå„ÉÅ„Çß„ÉÉ„ÇØ„Åï„Çå„Å¶„ÅÑ„Çã„Åã\n');
      
      console.log('4. WebSocketÊé•Á∂ö„ÅÆÂïèÈ°å');
      console.log('   Ëß£Ê±∫Á≠ñ: „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØË®≠ÂÆö„ÇÑ„Éï„Ç°„Ç§„Ç¢„Ç¶„Ç©„Éº„É´„ÇíÁ¢∫Ë™ç\n');
    } else {
      console.log('‚úÖ „É™„Ç¢„É´„Çø„Ç§„É†Ê©üËÉΩ„ÅØÊ≠£Â∏∏„Å´Âãï‰Ωú„Åó„Å¶„ÅÑ„Åæ„ÅôÔºÅ');
    }
    
  } catch (error) {
    console.error('‚ùå Ë®∫Êñ≠‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error);
    results.errors.push(`General error: ${error.message}`);
  }
  
  return results;
}

// WebSocket„Éá„Éê„ÉÉ„Ç∞„ÇíÊúâÂäπ„Å´„Åó„Å¶ÂÆüË°å
console.log('ü§ñ Supabase „É™„Ç¢„É´„Çø„Ç§„É†Ë®∫Êñ≠„ÉÑ„Éº„É´');
console.log('üìÖ ÂÆüË°åÊó•ÊôÇ:', new Date().toLocaleString('ja-JP'));
console.log('üîó URL:', SUPABASE_URL);
console.log('');

diagnoseRealtimeIssue()
  .then(() => {
    console.log('\n‚úÖ Ë®∫Êñ≠ÂÆå‰∫Ü');
    process.exit(0);
  })
  .catch(err => {
    console.error('\n‚ùå Ë®∫Êñ≠„Ç®„É©„Éº:', err);
    process.exit(1);
  });