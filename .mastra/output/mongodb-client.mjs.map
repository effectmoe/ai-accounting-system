{"version":3,"file":"mongodb-client.mjs","sources":["../../lib/logger.ts","../../lib/mongodb-client.ts"],"sourcesContent":["import * as Sentry from \"@sentry/nextjs\";\n\ntype LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'fatal';\n\ninterface LoggerOptions {\n  level?: LogLevel;\n  context?: Record<string, any>;\n}\n\nclass Logger {\n  private isDevelopment = process.env.NODE_ENV === 'development';\n  private isProduction = process.env.NODE_ENV === 'production';\n  \n  private shouldLog(level: LogLevel): boolean {\n    const levels: LogLevel[] = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];\n    const currentLevel = this.isDevelopment ? 'debug' : 'info';\n    const currentIndex = levels.indexOf(currentLevel);\n    const levelIndex = levels.indexOf(level);\n    return levelIndex >= currentIndex;\n  }\n\n  private sanitizeData(data: any): any {\n    if (typeof data !== 'object' || data === null) {\n      return data;\n    }\n\n    // 機密情報のマスキング\n    const sensitiveKeys = [\n      'password', 'token', 'secret', 'apiKey', 'api_key',\n      'authorization', 'cookie', 'session', 'private_key',\n      'client_secret', 'refresh_token', 'access_token',\n      'MONGODB_URI', 'DATABASE_URL', 'OPENAI_API_KEY',\n      'ANTHROPIC_API_KEY', 'DEEPSEEK_API_KEY'\n    ];\n\n    const sanitized = Array.isArray(data) ? [...data] : { ...data };\n\n    if (Array.isArray(sanitized)) {\n      return sanitized.map(item => this.sanitizeData(item));\n    }\n\n    Object.keys(sanitized).forEach(key => {\n      const lowerKey = key.toLowerCase();\n      if (sensitiveKeys.some(sensitive => lowerKey.includes(sensitive.toLowerCase()))) {\n        sanitized[key] = '[REDACTED]';\n      } else if (typeof sanitized[key] === 'object' && sanitized[key] !== null) {\n        sanitized[key] = this.sanitizeData(sanitized[key]);\n      }\n    });\n\n    return sanitized;\n  }\n\n  private log(level: LogLevel, message: string, context?: Record<string, any>) {\n    if (!this.shouldLog(level)) return;\n\n    const sanitizedContext = context ? this.sanitizeData(context) : undefined;\n    const timestamp = new Date().toISOString();\n\n    // Sentryログ統合\n    if (typeof window !== 'undefined' && (window as any).Sentry) {\n      const sentryLogger = (window as any).Sentry.logger;\n      if (sentryLogger && sentryLogger[level]) {\n        sentryLogger[level](message, sanitizedContext);\n      }\n    } else if (Sentry) {\n      // サーバーサイド\n      const breadcrumb = {\n        message,\n        level: level as Sentry.SeverityLevel,\n        category: 'custom',\n        data: sanitizedContext,\n        timestamp: Date.now() / 1000,\n      };\n      Sentry.addBreadcrumb(breadcrumb);\n    }\n\n    // 開発環境でのコンソール出力\n    if (this.isDevelopment) {\n      const logMethod = level === 'trace' || level === 'debug' ? 'debug' : level;\n      const consoleMethod = console[logMethod as keyof Console] || console.log;\n      \n      consoleMethod.call(\n        console,\n        `[${timestamp}] [${level.toUpperCase()}] ${message}`,\n        sanitizedContext || ''\n      );\n    }\n  }\n\n  trace(message: string, context?: Record<string, any>) {\n    this.log('trace', message, context);\n  }\n\n  debug(message: string, context?: Record<string, any>) {\n    this.log('debug', message, context);\n  }\n\n  info(message: string, context?: Record<string, any>) {\n    this.log('info', message, context);\n  }\n\n  warn(message: string, context?: Record<string, any>) {\n    this.log('warn', message, context);\n  }\n\n  error(message: string, context?: Record<string, any>) {\n    this.log('error', message, context);\n    \n    // エラーレベル以上はSentryに送信\n    if (context?.error) {\n      Sentry.captureException(context.error, {\n        extra: this.sanitizeData(context),\n      });\n    }\n  }\n\n  fatal(message: string, context?: Record<string, any>) {\n    this.log('fatal', message, context);\n    \n    // 致命的エラーは必ずSentryに送信\n    Sentry.captureMessage(message, 'fatal');\n  }\n\n  // 既存のconsole.logをこのロガーに置き換えるためのヘルパー\n  replaceConsole() {\n    if (this.isProduction) {\n      console.log = (message: any, ...args: any[]) => {\n        this.debug(String(message), { args });\n      };\n      console.error = (message: any, ...args: any[]) => {\n        this.error(String(message), { args });\n      };\n      console.warn = (message: any, ...args: any[]) => {\n        this.warn(String(message), { args });\n      };\n    }\n  }\n}\n\n// シングルトンインスタンス\nexport const logger = new Logger();\n\n// デフォルトエクスポート\nexport default logger;","import { MongoClient, Db, Collection, ObjectId, GridFSBucket } from 'mongodb';\n\nimport { logger } from '@/lib/logger';\n// カスタムエラークラス\nexport class DatabaseError extends Error {\n  constructor(message: string, public code: string) {\n    super(message);\n    this.name = 'DatabaseError';\n  }\n}\n\n// MongoDB接続設定 - URIから直接データベース名を取得\nfunction getDBName(): string {\n  // MONGODB_DB_NAMEが設定されていれば優先\n  if (process.env.MONGODB_DB_NAME) {\n    const cleanDbName = process.env.MONGODB_DB_NAME.trim();\n    logger.debug(`[MongoDB] Database name from MONGODB_DB_NAME: \"${cleanDbName}\"`);\n    return cleanDbName;\n  }\n  \n  // MONGODB_URIからデータベース名を抽出\n  const uri = process.env.MONGODB_URI;\n  if (uri) {\n    try {\n      // MongoDB接続文字列のパース（mongodb+srv://.../<database>?...）\n      const match = uri.match(/\\/([^?\\/]+)(\\?|$)/);\n      if (match && match[1]) {\n        const dbName = match[1].trim();\n        logger.debug(`[MongoDB] Database name extracted from URI: \"${dbName}\"`);\n        return dbName;\n      }\n    } catch (error) {\n      logger.error('[MongoDB] Failed to parse database name from URI:', error);\n    }\n  }\n  \n  // デフォルト値\n  const defaultDb = 'accounting';\n  logger.debug(`[MongoDB] Using default database name: \"${defaultDb}\"`);\n  return defaultDb;\n}\n\n// グローバル変数の宣言（Vercel推奨パターン）\ndeclare global {\n  var _mongoClientPromise: Promise<MongoClient> | undefined;\n}\n\n// Vercelサーバーレス環境用のキャッシュ変数\nlet cached = global._mongoClientPromise;\n\n// MongoDB URIを動的に取得する関数\nfunction getMongoDBUri(): string {\n  const uri = process.env.MONGODB_URI;\n  if (!uri) {\n    logger.error('Environment variables:', {\n      MONGODB_URI: !!process.env.MONGODB_URI,\n      NODE_ENV: process.env.NODE_ENV,\n      VERCEL: process.env.VERCEL,\n      VERCEL_ENV: process.env.VERCEL_ENV\n    });\n    throw new Error('MONGODB_URI is not defined in environment variables');\n  }\n  return uri;\n}\n\n// MongoDB URIから機密情報をマスクする関数\nfunction sanitizeMongoUri(uri: string): string {\n  try {\n    const url = new URL(uri);\n    if (url.username) {\n      url.username = '***';\n    }\n    if (url.password) {\n      url.password = '***';\n    }\n    return url.toString();\n  } catch {\n    // URLのパースに失敗した場合は、安全のため全体をマスク\n    return 'mongodb://***:***@***';\n  }\n}\n\n// Vercel推奨のMongoDB接続パターン\nasync function connectToDatabase(): Promise<{ client: MongoClient; db: Db }> {\n  if (cached) {\n    try {\n      const client = await cached;\n      const db = client.db(getDBName());\n      \n      // 接続が生きているか確認\n      await db.admin().ping();\n      logger.debug('Reusing cached MongoDB connection');\n      return { client, db };\n    } catch (error) {\n      logger.debug('Cached connection is stale, creating new connection...');\n      cached = undefined;\n      global._mongoClientPromise = undefined;\n    }\n  }\n\n  try {\n    const uri = getMongoDBUri();\n    \n    logger.debug('Creating new MongoDB connection...');\n    logger.debug('MongoDB URI configured:', sanitizeMongoUri(uri)); // パスワードを隠してログ出力\n    \n    // Vercel推奨の接続オプション\n    const options = {\n      maxPoolSize: 10,\n      serverSelectionTimeoutMS: 10000, // 10秒に増やす\n      socketTimeoutMS: 45000,\n      connectTimeoutMS: 10000, // 接続タイムアウトを追加\n      retryWrites: true,\n      w: 'majority'\n    };\n    \n    const client = new MongoClient(uri, options);\n    const clientPromise = client.connect();\n    \n    // グローバルにキャッシュ\n    cached = global._mongoClientPromise = clientPromise;\n    \n    const connectedClient = await clientPromise;\n    const db = connectedClient.db(getDBName());\n    \n    // 接続を確認\n    await db.admin().ping();\n    logger.debug('MongoDB connection verified with ping');\n    \n    return { client: connectedClient, db };\n  } catch (error) {\n    logger.error('MongoDB connection error:', error);\n    logger.error('Connection error details:', {\n      name: error instanceof Error ? error.name : 'Unknown',\n      message: error instanceof Error ? error.message : 'Unknown error',\n      stack: error instanceof Error ? error.stack : undefined\n    });\n    \n    // キャッシュをクリア\n    cached = undefined;\n    global._mongoClientPromise = undefined;\n    \n    throw new DatabaseError(\n      `MongoDB connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      'CONNECTION_ERROR'\n    );\n  }\n}\n\n// データベースインスタンスの取得（シンプル化）\nexport async function getDatabase(): Promise<Db> {\n  try {\n    const { db } = await connectToDatabase();\n    return db;\n  } catch (error) {\n    logger.error('getDatabase error:', error);\n    throw new DatabaseError(\n      `Failed to get database instance: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      'DATABASE_ACCESS_ERROR'\n    );\n  }\n}\n\n// コレクションの取得（シンプル化）\nexport async function getCollection<T = any>(collectionName: string): Promise<Collection<T>> {\n  try {\n    logger.debug(`[getCollection] Attempting to get collection: ${collectionName}`);\n    \n    const db = await getDatabase();\n    logger.debug(`[getCollection] Database obtained successfully`);\n    \n    const collection = db.collection<T>(collectionName);\n    logger.debug(`[getCollection] Collection reference created for: ${collectionName}`);\n    \n    // コレクションが実際に使用可能か確認\n    try {\n      const count = await collection.estimatedDocumentCount();\n      logger.debug(`[getCollection] Collection ${collectionName} is accessible. Estimated count: ${count}`);\n      return collection;\n    } catch (error) {\n      logger.error(`[getCollection] Collection ${collectionName} test failed:`, error);\n      logger.error(`[getCollection] Error type: ${error?.constructor?.name}`);\n      \n      // 接続をリセット\n      cached = undefined;\n      global._mongoClientPromise = undefined;\n      logger.debug(`[getCollection] Connection cache cleared, attempting retry...`);\n      \n      // 再試行\n      const retryDb = await getDatabase();\n      const retryCollection = retryDb.collection<T>(collectionName);\n      logger.debug(`[getCollection] Retry successful for collection: ${collectionName}`);\n      return retryCollection;\n    }\n  } catch (error) {\n    logger.error(`[getCollection] Fatal error for ${collectionName}:`, error);\n    logger.error(`[getCollection] Error details:`, {\n      name: error instanceof Error ? error.name : 'Unknown',\n      message: error instanceof Error ? error.message : 'Unknown error',\n      type: typeof error,\n      constructor: error?.constructor?.name\n    });\n    \n    throw new DatabaseError(\n      `Failed to get collection ${collectionName}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      'COLLECTION_ACCESS_ERROR'\n    );\n  }\n}\n\n// MongoClientのエクスポート（Vercel対応）\nexport async function getClientPromise(): Promise<MongoClient> {\n  const { client } = await connectToDatabase();\n  return client;\n}\n\n// 後方互換性のためのgetMongoClient関数\nexport async function getMongoClient(): Promise<MongoClient> {\n  const { client } = await connectToDatabase();\n  return client;\n}\n\n// シングルトンのクライアントプロミス（名前付きエクスポート）\nexport const mongoClientPromise = getClientPromise();\n\n// GridFSバケットを取得\nexport async function getGridFSBucket(): Promise<any> {\n  const { db } = await connectToDatabase();\n  const bucket = new GridFSBucket(db);\n  return bucket;\n}\n\n// トランザクション実行ヘルパー\nexport async function withTransaction<T>(\n  callback: (session: any) => Promise<T>\n): Promise<T> {\n  const { client } = await connectToDatabase();\n  const session = client.startSession();\n\n  try {\n    const result = await session.withTransaction(callback, {\n      readPreference: 'primary',\n      readConcern: { level: 'local' },\n      writeConcern: { w: 'majority' },\n    });\n    return result;\n  } finally {\n    await session.endSession();\n  }\n}\n\n// 共通のデータベース操作\nexport class DatabaseService {\n  private static instance: DatabaseService;\n\n  private constructor() {}\n\n  static getInstance(): DatabaseService {\n    if (!DatabaseService.instance) {\n      DatabaseService.instance = new DatabaseService();\n    }\n    return DatabaseService.instance;\n  }\n\n  /**\n   * ドキュメントの作成\n   */\n  async create<T>(collectionName: string, document: Omit<T, '_id'>): Promise<T> {\n    try {\n      logger.debug(`===== [DatabaseService] Create Operation Debug START (${collectionName}) =====`);\n      logger.debug('[1] Document to create:', JSON.stringify(document, null, 2));\n      \n      const collection = await getCollection<T>(collectionName);\n      const now = new Date();\n      const doc = {\n        ...document,\n        createdAt: now,\n        updatedAt: now,\n      };\n      \n      logger.debug('[2] Document with timestamps:', JSON.stringify(doc, null, 2));\n      \n      const result = await collection.insertOne(doc as any);\n      const createdDoc = { ...doc, _id: result.insertedId } as T;\n      \n      logger.debug('[3] Created document result:', JSON.stringify({\n        _id: result.insertedId,\n        ...doc\n      }, null, 2));\n      \n      logger.debug(`===== [DatabaseService] Create Operation Debug END (${collectionName}) =====`);\n      \n      return createdDoc;\n    } catch (error) {\n      logger.error(`MongoDB create error in collection ${collectionName}:`, error);\n      throw new DatabaseError(\n        `Failed to create document in ${collectionName}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        'CREATE_ERROR'\n      );\n    }\n  }\n\n  /**\n   * ドキュメントの取得\n   */\n  async findById<T>(collectionName: string, id: string | ObjectId): Promise<T | null> {\n    try {\n      logger.debug(`[MongoDB] findById called for collection: ${collectionName}, id: ${id}`);\n      logger.debug(`[MongoDB] ID type: ${typeof id}, length: ${id?.toString()?.length}`);\n      \n      const collection = await getCollection<T>(collectionName);\n      const objectId = typeof id === 'string' ? new ObjectId(id) : id;\n      \n      logger.debug(`[MongoDB] Converted ObjectId: ${objectId}`);\n      \n      const result = await collection.findOne({ _id: objectId } as any);\n      \n      logger.debug(`[MongoDB] findById result: ${result ? 'found' : 'not found'}`);\n      if (result) {\n        logger.debug(`[MongoDB] Found document with _id: ${result._id}`);\n      }\n      \n      return result;\n    } catch (error) {\n      logger.error(`[MongoDB] findById error for ${collectionName}:`, error);\n      if (error instanceof Error && error.message.includes('invalid ObjectId')) {\n        logger.error(`[MongoDB] Invalid ObjectId format: ${id}`);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * ドキュメントの検索\n   */\n  async find<T>(\n    collectionName: string,\n    filter: any = {},\n    options?: {\n      sort?: any;\n      limit?: number;\n      skip?: number;\n      projection?: any;\n    }\n  ): Promise<T[]> {\n    try {\n      logger.debug(`[DatabaseService.find] Starting find operation for collection: ${collectionName}`);\n      logger.debug(`[DatabaseService.find] Filter:`, JSON.stringify(filter));\n      logger.debug(`[DatabaseService.find] Options:`, JSON.stringify(options));\n      \n      const collection = await getCollection<T>(collectionName);\n      logger.debug(`[DatabaseService.find] Collection obtained successfully`);\n      \n      let query = collection.find(filter);\n\n      if (options?.sort) {\n        query = query.sort(options.sort);\n        logger.debug(`[DatabaseService.find] Sort applied:`, options.sort);\n      }\n      if (options?.skip) {\n        query = query.skip(options.skip);\n        logger.debug(`[DatabaseService.find] Skip applied:`, options.skip);\n      }\n      if (options?.limit) {\n        query = query.limit(options.limit);\n        logger.debug(`[DatabaseService.find] Limit applied:`, options.limit);\n      }\n      if (options?.projection) {\n        query = query.project(options.projection);\n        logger.debug(`[DatabaseService.find] Projection applied:`, options.projection);\n      }\n\n      logger.debug(`[DatabaseService.find] Executing query...`);\n      const results = await query.toArray();\n      logger.debug(`[DatabaseService.find] Query executed successfully. Results count: ${results.length}`);\n      \n      return results;\n    } catch (error) {\n      logger.error(`[DatabaseService.find] Error in find operation for ${collectionName}:`, error);\n      logger.error(`[DatabaseService.find] Error details:`, {\n        name: error instanceof Error ? error.name : 'Unknown',\n        message: error instanceof Error ? error.message : 'Unknown error',\n        stack: error instanceof Error ? error.stack : undefined\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * ドキュメントの更新\n   */\n  async update<T>(\n    collectionName: string,\n    id: string | ObjectId,\n    update: Partial<T>\n  ): Promise<T | null> {\n    try {\n      const collection = await getCollection<T>(collectionName);\n      const objectId = typeof id === 'string' ? new ObjectId(id) : id;\n      \n      // _idフィールドを除外\n      const { _id, ...updateData } = update as any;\n      \n      logger.debug(`Updating document in ${collectionName} with ID: ${objectId}`);\n      logger.debug('Update data keys:', Object.keys(updateData));\n      \n      const result = await collection.findOneAndUpdate(\n        { _id: objectId } as any,\n        {\n          $set: {\n            ...updateData,\n            updatedAt: new Date(),\n          },\n        },\n        { returnDocument: 'after' }\n      );\n\n      logger.debug(`[MongoDB] findOneAndUpdate raw result:`, result);\n      logger.debug(`[MongoDB] findOneAndUpdate result type:`, typeof result);\n      logger.debug(`[MongoDB] findOneAndUpdate result keys:`, result ? Object.keys(result) : 'null');\n\n      // MongoDB driver v6では、結果が直接ドキュメントを返す\n      if (!result) {\n        logger.error(`No document found with ID ${objectId} in collection ${collectionName}`);\n        return null;\n      }\n\n      logger.debug(`Document updated successfully in ${collectionName}`);\n      logger.debug(`Updated document ID: ${result._id?.toString()}`);\n      return result;\n    } catch (error) {\n      logger.error(`MongoDB update error in collection ${collectionName}:`, error);\n      throw new DatabaseError(\n        `Failed to update document in ${collectionName}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        'UPDATE_ERROR'\n      );\n    }\n  }\n\n  /**\n   * ドキュメントの削除\n   */\n  async delete(collectionName: string, id: string | ObjectId): Promise<boolean> {\n    const collection = await getCollection(collectionName);\n    const objectId = typeof id === 'string' ? new ObjectId(id) : id;\n    const result = await collection.deleteOne({ _id: objectId });\n    return result.deletedCount > 0;\n  }\n\n  /**\n   * 一括挿入\n   */\n  async bulkInsert<T>(collectionName: string, documents: Omit<T, '_id'>[]): Promise<T[]> {\n    const collection = await getCollection<T>(collectionName);\n    const now = new Date();\n    const docs = documents.map(doc => ({\n      ...doc,\n      createdAt: now,\n      updatedAt: now,\n    }));\n    const result = await collection.insertMany(docs as any);\n    return docs.map((doc, index) => ({\n      ...doc,\n      _id: result.insertedIds[index],\n    })) as T[];\n  }\n\n  /**\n   * カウント\n   */\n  async count(collectionName: string, filter: any = {}): Promise<number> {\n    try {\n      logger.debug(`[DatabaseService.count] Starting count operation for collection: ${collectionName}`);\n      logger.debug(`[DatabaseService.count] Filter:`, JSON.stringify(filter));\n      \n      const collection = await getCollection(collectionName);\n      logger.debug(`[DatabaseService.count] Collection obtained successfully`);\n      \n      const count = await collection.countDocuments(filter);\n      logger.debug(`[DatabaseService.count] Count result: ${count}`);\n      \n      return count;\n    } catch (error) {\n      logger.error(`[DatabaseService.count] Error in count operation for ${collectionName}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * 集計\n   */\n  async aggregate<T>(collectionName: string, pipeline: any[]): Promise<T[]> {\n    const collection = await getCollection(collectionName);\n    return await collection.aggregate<T>(pipeline).toArray();\n  }\n\n  /**\n   * インデックスの作成\n   */\n  async createIndex(\n    collectionName: string,\n    indexSpec: any,\n    options?: any\n  ): Promise<string> {\n    const collection = await getCollection(collectionName);\n    return await collection.createIndex(indexSpec, options);\n  }\n\n  /**\n   * テキスト検索\n   */\n  async search<T>(\n    collectionName: string,\n    searchText: string,\n    filter: any = {},\n    options?: any\n  ): Promise<T[]> {\n    const collection = await getCollection<T>(collectionName);\n    const searchFilter = {\n      ...filter,\n      $text: { $search: searchText },\n    };\n    return await collection.find(searchFilter, options).toArray();\n  }\n\n  /**\n   * 複数ドキュメントの削除\n   */\n  async deleteMany(collectionName: string, filter: any = {}): Promise<number> {\n    const collection = await getCollection(collectionName);\n    const result = await collection.deleteMany(filter);\n    return result.deletedCount;\n  }\n\n  /**\n   * 複数ドキュメントの検索（エイリアス）\n   */\n  async findMany<T>(\n    collectionName: string,\n    filter: any = {},\n    options?: {\n      sort?: any;\n      limit?: number;\n      skip?: number;\n      projection?: any;\n    }\n  ): Promise<T[]> {\n    return this.find<T>(collectionName, filter, options);\n  }\n\n  /**\n   * 複数ドキュメントの更新\n   */\n  async updateMany<T>(\n    collectionName: string,\n    filter: any,\n    update: Partial<T>\n  ): Promise<number> {\n    try {\n      const collection = await getCollection<T>(collectionName);\n      \n      // _idフィールドを除外\n      const { _id, ...updateData } = update as any;\n      \n      const result = await collection.updateMany(\n        filter,\n        {\n          $set: {\n            ...updateData,\n            updatedAt: new Date(),\n          },\n        }\n      );\n\n      return result.modifiedCount;\n    } catch (error) {\n      logger.error(`MongoDB updateMany error in collection ${collectionName}:`, error);\n      throw new DatabaseError(\n        `Failed to update documents in ${collectionName}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        'UPDATE_MANY_ERROR'\n      );\n    }\n  }\n\n  /**\n   * 単一ドキュメントの検索\n   */\n  async findOne<T>(\n    collectionName: string,\n    filter: any = {},\n    options?: any\n  ): Promise<T | null> {\n    const collection = await getCollection<T>(collectionName);\n    return await collection.findOne(filter, options);\n  }\n}\n\n\n// ヘルスチェック（シンプル化）\nexport async function checkConnection(): Promise<boolean> {\n  try {\n    logger.debug('MongoDB connection check...');\n    \n    // 環境変数を確認\n    const mongoUri = process.env.MONGODB_URI;\n    if (!mongoUri) {\n      logger.error('MONGODB_URI is not defined!');\n      return false;\n    }\n    \n    const { db } = await connectToDatabase();\n    await db.command({ ping: 1 });\n    logger.debug('MongoDB connection successful');\n    return true;\n    \n  } catch (error) {\n    logger.error('MongoDB connection check failed:', error);\n    if (error instanceof Error) {\n      logger.error('Error details:', {\n        name: error.name,\n        message: error.message\n      });\n    }\n    \n    // キャッシュをクリア\n    cached = undefined;\n    global._mongoClientPromise = undefined;\n    \n    return false;\n  }\n}\n\n// コレクション名の定数\nexport const Collections = {\n  INVOICES: 'invoices',\n  RECEIPTS: 'receipts',\n  DOCUMENTS: 'documents',\n  COMPANIES: 'companies',\n  ACCOUNTS: 'accounts',\n  TRANSACTIONS: 'transactions',\n  JOURNAL_ENTRIES: 'journal_entries',\n  JOURNAL_ENTRY_LINES: 'journal_entry_lines',\n  PARTNERS: 'partners',\n  AUDIT_LOGS: 'audit_logs',\n  OCR_RESULTS: 'ocr_results',\n  IMPORT_BATCHES: 'import_batches',\n  ITEMS: 'items',\n  TAGS: 'tags',\n  // 新規追加\n  CUSTOMERS: 'customers',\n  COMPANY_INFO: 'companyInfo',\n  BANK_ACCOUNTS: 'bankAccounts',\n  PRODUCTS: 'products',\n  QUOTES: 'quotes',\n  SUPPLIERS: 'suppliers',\n  SUPPLIER_QUOTES: 'supplierQuotes',\n  PURCHASE_ORDERS: 'purchaseOrders',\n} as const;\n\n// データベースサービスのシングルトンインスタンス\nexport const db = DatabaseService.getInstance();\n\n// Vercel環境対応のDatabaseServiceラッパー\nexport class VercelDatabaseService extends DatabaseService {\n  private static instance: VercelDatabaseService;\n  \n  private constructor() {\n    super();\n  }\n  \n  static getInstance(): VercelDatabaseService {\n    if (!VercelDatabaseService.instance) {\n      VercelDatabaseService.instance = new VercelDatabaseService();\n    }\n    return VercelDatabaseService.instance;\n  }\n  \n  // createメソッド（シンプル化）\n  async create<T>(collectionName: string, document: Omit<T, '_id'>): Promise<T> {\n    try {\n      const collection = await getCollection<T>(collectionName);\n      const now = new Date();\n      const doc = {\n        ...document,\n        createdAt: now,\n        updatedAt: now,\n      };\n      \n      const result = await collection.insertOne(doc as any);\n      \n      if (!result || !result.insertedId) {\n        throw new Error('Insert operation failed - no inserted ID returned');\n      }\n      \n      logger.debug(`Document created successfully in ${collectionName} with ID: ${result.insertedId}`);\n      return { ...doc, _id: result.insertedId } as T;\n      \n    } catch (error) {\n      logger.error(`MongoDB create error in collection ${collectionName}:`, error);\n      \n      // 接続エラーの場合はキャッシュをクリアして再試行\n      if (error instanceof Error && \n          (error.message.includes('connection') || \n           error.message.includes('client') ||\n           error.message.includes('topology'))) {\n        logger.debug('Clearing MongoDB connection cache due to connection error');\n        cached = undefined;\n        global._mongoClientPromise = undefined;\n        \n        // 一度だけ再試行\n        try {\n          const collection = await getCollection<T>(collectionName);\n          const now = new Date();\n          const doc = {\n            ...document,\n            createdAt: now,\n            updatedAt: now,\n          };\n          \n          const result = await collection.insertOne(doc as any);\n          return { ...doc, _id: result.insertedId } as T;\n        } catch (retryError) {\n          throw new DatabaseError(\n            `Failed to create document in ${collectionName} after retry: ${retryError instanceof Error ? retryError.message : 'Unknown error'}`,\n            'CREATE_ERROR'\n          );\n        }\n      }\n      \n      throw new DatabaseError(\n        `Failed to create document in ${collectionName}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        'CREATE_ERROR'\n      );\n    }\n  }\n}\n\n// Vercel環境用のエクスポート\nexport const vercelDb = VercelDatabaseService.getInstance();\n\n// clientPromiseのデフォルトエクスポート（後方互換性のため）\nconst clientPromise = (async () => {\n  const database = await getDatabase();\n  return database.client;\n})();\n\nexport default clientPromise;"],"names":["db","clientPromise"],"mappings":"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"}