{"version":3,"file":"113820ec-5b71-48be-b907-cff544b8e71b.mjs","sources":["../../../src/mastra/tools/construction-tools.ts"],"sourcesContent":["import { getDatabase } from '@/lib/mongodb-client';\nimport { logger } from '@/lib/logger';\n\n/**\n * システムアーキテクチャを設計\n */\nexport const designArchitectureTool = {\n  name: 'design_architecture',\n  description: 'システムアーキテクチャを設計します',\n  parameters: {\n    type: 'object',\n    properties: {\n      project_name: { type: 'string', description: 'プロジェクト名' },\n      architecture_type: {\n        type: 'string',\n        enum: ['monolithic', 'microservices', 'serverless', 'event-driven', 'hybrid'],\n        description: 'アーキテクチャタイプ',\n      },\n      requirements: {\n        type: 'object',\n        properties: {\n          scalability: { type: 'string', description: 'スケーラビリティ要件' },\n          performance: { type: 'string', description: 'パフォーマンス要件' },\n          availability: { type: 'string', description: '可用性要件' },\n          security: { type: 'string', description: 'セキュリティ要件' },\n        },\n      },\n      tech_stack: { type: 'array', items: { type: 'string' }, description: '使用技術' },\n    },\n    required: ['project_name', 'architecture_type', 'requirements'],\n  },\n  handler: async (params: any) => {\n    logger.info('Designing architecture:', params);\n    \n    const db = await getDatabase();\n    const collection = db.collection('architectures');\n    \n    const architecture = {\n      project_name: params.project_name,\n      architecture_type: params.architecture_type,\n      requirements: params.requirements,\n      tech_stack: params.tech_stack || [],\n      design_patterns: [],\n      components: [],\n      created_at: new Date(),\n      updated_at: new Date(),\n    };\n    \n    // アーキテクチャタイプに応じた設計パターンを追加\n    switch (params.architecture_type) {\n      case 'microservices':\n        architecture.design_patterns = ['API Gateway', 'Service Discovery', 'Circuit Breaker', 'Event Sourcing'];\n        architecture.components = [\n          { name: 'API Gateway', type: 'infrastructure', tech: 'Kong/Nginx' },\n          { name: 'Service Registry', type: 'infrastructure', tech: 'Consul/Eureka' },\n          { name: 'Message Queue', type: 'infrastructure', tech: 'RabbitMQ/Kafka' },\n          { name: 'User Service', type: 'service', tech: 'Node.js/TypeScript' },\n          { name: 'Order Service', type: 'service', tech: 'Node.js/TypeScript' },\n        ];\n        break;\n      case 'serverless':\n        architecture.design_patterns = ['Function as a Service', 'Backend for Frontend', 'Event-driven'];\n        architecture.components = [\n          { name: 'API Gateway', type: 'infrastructure', tech: 'AWS API Gateway' },\n          { name: 'Lambda Functions', type: 'compute', tech: 'AWS Lambda' },\n          { name: 'DynamoDB', type: 'database', tech: 'AWS DynamoDB' },\n          { name: 'S3 Storage', type: 'storage', tech: 'AWS S3' },\n        ];\n        break;\n      default:\n        architecture.design_patterns = ['MVC', 'Repository Pattern', 'Dependency Injection'];\n        architecture.components = [\n          { name: 'Web Server', type: 'infrastructure', tech: 'Nginx' },\n          { name: 'Application Server', type: 'compute', tech: 'Node.js' },\n          { name: 'Database', type: 'database', tech: 'PostgreSQL/MongoDB' },\n        ];\n    }\n    \n    const result = await collection.insertOne(architecture);\n    \n    return {\n      success: true,\n      architecture_id: result.insertedId.toString(),\n      architecture: architecture,\n      recommendations: [\n        'CI/CDパイプラインの構築を推奨します',\n        'モニタリングとロギングの実装が必要です',\n        'セキュリティスキャンの自動化を検討してください',\n      ],\n    };\n  }\n};\n\n/**\n * データベーススキーマを設計\n */\nexport const designDatabaseSchemaTool = {\n  name: 'design_database_schema',\n  description: 'データベーススキーマを設計します',\n  parameters: {\n    type: 'object',\n    properties: {\n      database_type: {\n        type: 'string',\n        enum: ['mongodb', 'postgresql', 'mysql', 'dynamodb', 'redis'],\n        description: 'データベースタイプ',\n      },\n      entities: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: { type: 'string', description: 'エンティティ名' },\n            fields: { type: 'array', items: { type: 'object' }, description: 'フィールド定義' },\n            relations: { type: 'array', items: { type: 'object' }, description: 'リレーション' },\n            indexes: { type: 'array', items: { type: 'object' }, description: 'インデックス' },\n          },\n        },\n        description: 'エンティティ定義',\n      },\n      use_cases: { type: 'array', items: { type: 'string' }, description: 'ユースケース' },\n    },\n    required: ['database_type', 'entities'],\n  },\n  handler: async (params: any) => {\n    logger.info('Designing database schema:', params);\n    \n    const db = await getDatabase();\n    const collection = db.collection('database_schemas');\n    \n    // スキーマ設計の生成\n    const schema = {\n      database_type: params.database_type,\n      entities: params.entities,\n      use_cases: params.use_cases || [],\n      created_at: new Date(),\n      optimizations: [],\n      migrations: [],\n    };\n    \n    // データベースタイプに応じた最適化提案\n    if (params.database_type === 'mongodb') {\n      schema.optimizations = [\n        'ドキュメントの埋め込みと参照の適切な使い分け',\n        '複合インデックスの作成',\n        'シャーディングキーの選定',\n      ];\n    } else if (['postgresql', 'mysql'].includes(params.database_type)) {\n      schema.optimizations = [\n        '正規化レベルの最適化（3NF/BCNF）',\n        'パーティショニングの検討',\n        'インデックス戦略の策定',\n      ];\n    }\n    \n    // マイグレーションスクリプトの生成\n    schema.migrations = params.entities.map((entity: any) => ({\n      version: '1.0.0',\n      entity: entity.name,\n      script: generateMigrationScript(params.database_type, entity),\n    }));\n    \n    const result = await collection.insertOne(schema);\n    \n    return {\n      success: true,\n      schema_id: result.insertedId.toString(),\n      schema: schema,\n      ddl_scripts: generateDDLScripts(params.database_type, params.entities),\n    };\n  }\n};\n\n/**\n * プロジェクト構造を生成\n */\nexport const generateProjectStructureTool = {\n  name: 'generate_project_structure',\n  description: 'プロジェクト構造を生成します',\n  parameters: {\n    type: 'object',\n    properties: {\n      project_type: {\n        type: 'string',\n        enum: ['web-app', 'api', 'cli', 'library', 'monorepo'],\n        description: 'プロジェクトタイプ',\n      },\n      language: { type: 'string', description: 'プログラミング言語' },\n      framework: { type: 'string', description: 'フレームワーク' },\n      features: {\n        type: 'array',\n        items: { type: 'string' },\n        description: '必要な機能（testing, ci/cd, docker等）',\n      },\n    },\n    required: ['project_type', 'language'],\n  },\n  handler: async (params: any) => {\n    logger.info('Generating project structure:', params);\n    \n    let structure: any = {\n      project_type: params.project_type,\n      language: params.language,\n      framework: params.framework,\n      directories: {},\n      files: {},\n      dependencies: {},\n      scripts: {},\n    };\n    \n    // プロジェクトタイプに応じた構造を生成\n    if (params.project_type === 'web-app' && params.language === 'typescript') {\n      structure.directories = {\n        'src/': {\n          'components/': 'Reactコンポーネント',\n          'pages/': 'ページコンポーネント',\n          'hooks/': 'カスタムフック',\n          'utils/': 'ユーティリティ関数',\n          'services/': 'APIサービス',\n          'types/': 'TypeScript型定義',\n          'styles/': 'スタイルシート',\n        },\n        'public/': '静的ファイル',\n        'tests/': 'テストファイル',\n        'docs/': 'ドキュメント',\n      };\n      \n      structure.files = {\n        'package.json': 'プロジェクト設定',\n        'tsconfig.json': 'TypeScript設定',\n        'next.config.js': 'Next.js設定',\n        '.eslintrc.json': 'ESLint設定',\n        '.prettierrc': 'Prettier設定',\n        'README.md': 'プロジェクト説明',\n      };\n      \n      structure.dependencies = {\n        'react': '^18.2.0',\n        'next': '^14.0.0',\n        'typescript': '^5.0.0',\n        '@types/react': '^18.2.0',\n        '@types/node': '^20.0.0',\n      };\n      \n      structure.scripts = {\n        'dev': 'next dev',\n        'build': 'next build',\n        'start': 'next start',\n        'lint': 'eslint . --ext .ts,.tsx',\n        'test': 'jest',\n      };\n    }\n    \n    // 機能に応じた追加設定\n    if (params.features?.includes('docker')) {\n      structure.files['Dockerfile'] = 'Dockerコンテナ設定';\n      structure.files['docker-compose.yml'] = 'Docker Compose設定';\n    }\n    \n    if (params.features?.includes('ci/cd')) {\n      structure.directories['.github/workflows/'] = 'GitHub Actions設定';\n      structure.files['.github/workflows/ci.yml'] = 'CI/CDパイプライン';\n    }\n    \n    return {\n      success: true,\n      structure: structure,\n      setup_commands: [\n        `mkdir -p ${params.project_type}`,\n        `cd ${params.project_type}`,\n        'npm init -y',\n        `npm install ${Object.entries(structure.dependencies).map(([pkg, ver]) => `${pkg}@${ver}`).join(' ')}`,\n      ],\n      best_practices: [\n        'コンポーネントは単一責任の原則に従って設計',\n        'テストカバレッジ80%以上を目標',\n        'コードレビューとCI/CDの導入',\n        'ドキュメントの継続的な更新',\n      ],\n    };\n  }\n};\n\n// ヘルパー関数\nfunction generateMigrationScript(dbType: string, entity: any): string {\n  if (dbType === 'mongodb') {\n    return `db.createCollection('${entity.name}')`;\n  } else if (dbType === 'postgresql') {\n    return `CREATE TABLE ${entity.name} (id SERIAL PRIMARY KEY)`;\n  }\n  return '';\n}\n\nfunction generateDDLScripts(dbType: string, entities: any[]): string[] {\n  return entities.map(entity => generateMigrationScript(dbType, entity));\n}\n\n// すべてのツールをエクスポート\nexport const constructionTools = [\n  designArchitectureTool,\n  designDatabaseSchemaTool,\n  generateProjectStructureTool,\n];"],"names":[],"mappings":";;;;AAMO,MAAM,sBAAA,GAAyB;AAAA,EACpC,IAAA,EAAM,qBAAA;AAAA,EACN,WAAA,EAAa,wGAAA;AAAA,EACb,UAAA,EAAY;AAAA,IACV,IAAA,EAAM,QAAA;AAAA,IACN,UAAA,EAAY;AAAA,MACV,YAAA,EAAc,EAAE,IAAA,EAAM,QAAA,EAAU,aAAa,4CAAA,EAAU;AAAA,MACvD,iBAAA,EAAmB;AAAA,QACjB,IAAA,EAAM,QAAA;AAAA,QACN,MAAM,CAAC,YAAA,EAAc,eAAA,EAAiB,YAAA,EAAc,gBAAgB,QAAQ,CAAA;AAAA,QAC5E,WAAA,EAAa;AAAA,OACf;AAAA,MACA,YAAA,EAAc;AAAA,QACZ,IAAA,EAAM,QAAA;AAAA,QACN,UAAA,EAAY;AAAA,UACV,WAAA,EAAa,EAAE,IAAA,EAAM,QAAA,EAAU,aAAa,8DAAA,EAAa;AAAA,UACzD,WAAA,EAAa,EAAE,IAAA,EAAM,QAAA,EAAU,aAAa,wDAAA,EAAY;AAAA,UACxD,YAAA,EAAc,EAAE,IAAA,EAAM,QAAA,EAAU,aAAa,gCAAA,EAAQ;AAAA,UACrD,QAAA,EAAU,EAAE,IAAA,EAAM,QAAA,EAAU,aAAa,kDAAA;AAAW;AACtD,OACF;AAAA,MACA,UAAA,EAAY,EAAE,IAAA,EAAM,OAAA,EAAS,KAAA,EAAO,EAAE,IAAA,EAAM,QAAA,EAAS,EAAG,WAAA,EAAa,0BAAA;AAAO,KAC9E;AAAA,IACA,QAAA,EAAU,CAAC,cAAA,EAAgB,mBAAA,EAAqB,cAAc;AAAA,GAChE;AAAA,EACA,OAAA,EAAS,OAAO,MAAA,KAAgB;AAC9B,IAAA,MAAA,CAAO,IAAA,CAAK,2BAA2B,MAAM,CAAA;AAE7C,IAAA,MAAM,EAAA,GAAK,MAAM,WAAA,EAAY;AAC7B,IAAA,MAAM,UAAA,GAAa,EAAA,CAAG,UAAA,CAAW,eAAe,CAAA;AAEhD,IAAA,MAAM,YAAA,GAAe;AAAA,MACnB,cAAc,MAAA,CAAO,YAAA;AAAA,MACrB,mBAAmB,MAAA,CAAO,iBAAA;AAAA,MAC1B,cAAc,MAAA,CAAO,YAAA;AAAA,MACrB,UAAA,EAAY,MAAA,CAAO,UAAA,IAAc,EAAC;AAAA,MAClC,iBAAiB,EAAC;AAAA,MAClB,YAAY,EAAC;AAAA,MACb,UAAA,sBAAgB,IAAA,EAAK;AAAA,MACrB,UAAA,sBAAgB,IAAA;AAAK,KACvB;AAGA,IAAA,QAAQ,OAAO,iBAAA;AAAmB,MAChC,KAAK,eAAA;AACH,QAAA,YAAA,CAAa,eAAA,GAAkB,CAAC,aAAA,EAAe,mBAAA,EAAqB,mBAAmB,gBAAgB,CAAA;AACvG,QAAA,YAAA,CAAa,UAAA,GAAa;AAAA,UACxB,EAAE,IAAA,EAAM,aAAA,EAAe,IAAA,EAAM,gBAAA,EAAkB,MAAM,YAAA,EAAa;AAAA,UAClE,EAAE,IAAA,EAAM,kBAAA,EAAoB,IAAA,EAAM,gBAAA,EAAkB,MAAM,eAAA,EAAgB;AAAA,UAC1E,EAAE,IAAA,EAAM,eAAA,EAAiB,IAAA,EAAM,gBAAA,EAAkB,MAAM,gBAAA,EAAiB;AAAA,UACxE,EAAE,IAAA,EAAM,cAAA,EAAgB,IAAA,EAAM,SAAA,EAAW,MAAM,oBAAA,EAAqB;AAAA,UACpE,EAAE,IAAA,EAAM,eAAA,EAAiB,IAAA,EAAM,SAAA,EAAW,MAAM,oBAAA;AAAqB,SACvE;AACA,QAAA;AAAA,MACF,KAAK,YAAA;AACH,QAAA,YAAA,CAAa,eAAA,GAAkB,CAAC,uBAAA,EAAyB,sBAAA,EAAwB,cAAc,CAAA;AAC/F,QAAA,YAAA,CAAa,UAAA,GAAa;AAAA,UACxB,EAAE,IAAA,EAAM,aAAA,EAAe,IAAA,EAAM,gBAAA,EAAkB,MAAM,iBAAA,EAAkB;AAAA,UACvE,EAAE,IAAA,EAAM,kBAAA,EAAoB,IAAA,EAAM,SAAA,EAAW,MAAM,YAAA,EAAa;AAAA,UAChE,EAAE,IAAA,EAAM,UAAA,EAAY,IAAA,EAAM,UAAA,EAAY,MAAM,cAAA,EAAe;AAAA,UAC3D,EAAE,IAAA,EAAM,YAAA,EAAc,IAAA,EAAM,SAAA,EAAW,MAAM,QAAA;AAAS,SACxD;AACA,QAAA;AAAA,MACF;AACE,QAAA,YAAA,CAAa,eAAA,GAAkB,CAAC,KAAA,EAAO,oBAAA,EAAsB,sBAAsB,CAAA;AACnF,QAAA,YAAA,CAAa,UAAA,GAAa;AAAA,UACxB,EAAE,IAAA,EAAM,YAAA,EAAc,IAAA,EAAM,gBAAA,EAAkB,MAAM,OAAA,EAAQ;AAAA,UAC5D,EAAE,IAAA,EAAM,oBAAA,EAAsB,IAAA,EAAM,SAAA,EAAW,MAAM,SAAA,EAAU;AAAA,UAC/D,EAAE,IAAA,EAAM,UAAA,EAAY,IAAA,EAAM,UAAA,EAAY,MAAM,oBAAA;AAAqB,SACnE;AAAA;AAGJ,IAAA,MAAM,MAAA,GAAS,MAAM,UAAA,CAAW,SAAA,CAAU,YAAY,CAAA;AAEtD,IAAA,OAAO;AAAA,MACL,OAAA,EAAS,IAAA;AAAA,MACT,eAAA,EAAiB,MAAA,CAAO,UAAA,CAAW,QAAA,EAAS;AAAA,MAC5C,YAAA;AAAA,MACA,eAAA,EAAiB;AAAA,QACf,iGAAA;AAAA,QACA,oHAAA;AAAA,QACA;AAAA;AACF,KACF;AAAA,EACF;AACF;AAKO,MAAM,wBAAA,GAA2B;AAAA,EACtC,IAAA,EAAM,wBAAA;AAAA,EACN,WAAA,EAAa,kGAAA;AAAA,EACb,UAAA,EAAY;AAAA,IACV,IAAA,EAAM,QAAA;AAAA,IACN,UAAA,EAAY;AAAA,MACV,aAAA,EAAe;AAAA,QACb,IAAA,EAAM,QAAA;AAAA,QACN,MAAM,CAAC,SAAA,EAAW,YAAA,EAAc,OAAA,EAAS,YAAY,OAAO,CAAA;AAAA,QAC5D,WAAA,EAAa;AAAA,OACf;AAAA,MACA,QAAA,EAAU;AAAA,QACR,IAAA,EAAM,OAAA;AAAA,QACN,KAAA,EAAO;AAAA,UACL,IAAA,EAAM,QAAA;AAAA,UACN,UAAA,EAAY;AAAA,YACV,IAAA,EAAM,EAAE,IAAA,EAAM,QAAA,EAAU,aAAa,4CAAA,EAAU;AAAA,YAC/C,MAAA,EAAQ,EAAE,IAAA,EAAM,OAAA,EAAS,KAAA,EAAO,EAAE,IAAA,EAAM,QAAA,EAAS,EAAG,WAAA,EAAa,4CAAA,EAAU;AAAA,YAC3E,SAAA,EAAW,EAAE,IAAA,EAAM,OAAA,EAAS,KAAA,EAAO,EAAE,IAAA,EAAM,QAAA,EAAS,EAAG,WAAA,EAAa,sCAAA,EAAS;AAAA,YAC7E,OAAA,EAAS,EAAE,IAAA,EAAM,OAAA,EAAS,KAAA,EAAO,EAAE,IAAA,EAAM,QAAA,EAAS,EAAG,WAAA,EAAa,sCAAA;AAAS;AAC7E,SACF;AAAA,QACA,WAAA,EAAa;AAAA,OACf;AAAA,MACA,SAAA,EAAW,EAAE,IAAA,EAAM,OAAA,EAAS,KAAA,EAAO,EAAE,IAAA,EAAM,QAAA,EAAS,EAAG,WAAA,EAAa,sCAAA;AAAS,KAC/E;AAAA,IACA,QAAA,EAAU,CAAC,eAAA,EAAiB,UAAU;AAAA,GACxC;AAAA,EACA,OAAA,EAAS,OAAO,MAAA,KAAgB;AAC9B,IAAA,MAAA,CAAO,IAAA,CAAK,8BAA8B,MAAM,CAAA;AAEhD,IAAA,MAAM,EAAA,GAAK,MAAM,WAAA,EAAY;AAC7B,IAAA,MAAM,UAAA,GAAa,EAAA,CAAG,UAAA,CAAW,kBAAkB,CAAA;AAGnD,IAAA,MAAM,MAAA,GAAS;AAAA,MACb,eAAe,MAAA,CAAO,aAAA;AAAA,MACtB,UAAU,MAAA,CAAO,QAAA;AAAA,MACjB,SAAA,EAAW,MAAA,CAAO,SAAA,IAAa,EAAC;AAAA,MAChC,UAAA,sBAAgB,IAAA,EAAK;AAAA,MACrB,eAAe,EAAC;AAAA,MAChB,YAAY;AAAC,KACf;AAGA,IAAA,IAAI,MAAA,CAAO,kBAAkB,SAAA,EAAW;AACtC,MAAA,MAAA,CAAO,aAAA,GAAgB;AAAA,QACrB,sIAAA;AAAA,QACA,oEAAA;AAAA,QACA;AAAA,OACF;AAAA,IACF,CAAA,MAAA,IAAW,CAAC,YAAA,EAAc,OAAO,EAAE,QAAA,CAAS,MAAA,CAAO,aAAa,CAAA,EAAG;AACjE,MAAA,MAAA,CAAO,aAAA,GAAgB;AAAA,QACrB,kFAAA;AAAA,QACA,0EAAA;AAAA,QACA;AAAA,OACF;AAAA,IACF;AAGA,IAAA,MAAA,CAAO,UAAA,GAAa,MAAA,CAAO,QAAA,CAAS,GAAA,CAAI,CAAC,MAAA,MAAiB;AAAA,MACxD,OAAA,EAAS,OAAA;AAAA,MACT,QAAQ,MAAA,CAAO,IAAA;AAAA,MACf,MAAA,EAAQ,uBAAA,CAAwB,MAAA,CAAO,aAAA,EAAe,MAAM;AAAA,KAC9D,CAAE,CAAA;AAEF,IAAA,MAAM,MAAA,GAAS,MAAM,UAAA,CAAW,SAAA,CAAU,MAAM,CAAA;AAEhD,IAAA,OAAO;AAAA,MACL,OAAA,EAAS,IAAA;AAAA,MACT,SAAA,EAAW,MAAA,CAAO,UAAA,CAAW,QAAA,EAAS;AAAA,MACtC,MAAA;AAAA,MACA,WAAA,EAAa,kBAAA,CAAmB,MAAA,CAAO,aAAA,EAAe,OAAO,QAAQ;AAAA,KACvE;AAAA,EACF;AACF;AAKO,MAAM,4BAAA,GAA+B;AAAA,EAC1C,IAAA,EAAM,4BAAA;AAAA,EACN,WAAA,EAAa,sFAAA;AAAA,EACb,UAAA,EAAY;AAAA,IACV,IAAA,EAAM,QAAA;AAAA,IACN,UAAA,EAAY;AAAA,MACV,YAAA,EAAc;AAAA,QACZ,IAAA,EAAM,QAAA;AAAA,QACN,MAAM,CAAC,SAAA,EAAW,KAAA,EAAO,KAAA,EAAO,WAAW,UAAU,CAAA;AAAA,QACrD,WAAA,EAAa;AAAA,OACf;AAAA,MACA,QAAA,EAAU,EAAE,IAAA,EAAM,QAAA,EAAU,aAAa,wDAAA,EAAY;AAAA,MACrD,SAAA,EAAW,EAAE,IAAA,EAAM,QAAA,EAAU,aAAa,4CAAA,EAAU;AAAA,MACpD,QAAA,EAAU;AAAA,QACR,IAAA,EAAM,OAAA;AAAA,QACN,KAAA,EAAO,EAAE,IAAA,EAAM,QAAA,EAAS;AAAA,QACxB,WAAA,EAAa;AAAA;AACf,KACF;AAAA,IACA,QAAA,EAAU,CAAC,cAAA,EAAgB,UAAU;AAAA,GACvC;AAAA,EACA,OAAA,EAAS,OAAO,MAAA,KAAgB;AAC9B,IAAA,MAAA,CAAO,IAAA,CAAK,iCAAiC,MAAM,CAAA;AAEnD,IAAA,IAAI,SAAA,GAAiB;AAAA,MACnB,cAAc,MAAA,CAAO,YAAA;AAAA,MACrB,UAAU,MAAA,CAAO,QAAA;AAAA,MACjB,WAAW,MAAA,CAAO,SAAA;AAAA,MAClB,aAAa,EAAC;AAAA,MACd,OAAO,EAAC;AAAA,MACR,cAAc,EAAC;AAAA,MACf,SAAS;AAAC,KACZ;AAGA,IAAA,IAAI,MAAA,CAAO,YAAA,KAAiB,SAAA,IAAa,MAAA,CAAO,aAAa,YAAA,EAAc;AACzE,MAAA,SAAA,CAAU,WAAA,GAAc;AAAA,QACtB,MAAA,EAAQ;AAAA,UACN,aAAA,EAAe,iDAAA;AAAA,UACf,QAAA,EAAU,8DAAA;AAAA,UACV,QAAA,EAAU,4CAAA;AAAA,UACV,QAAA,EAAU,wDAAA;AAAA,UACV,WAAA,EAAa,6BAAA;AAAA,UACb,QAAA,EAAU,8BAAA;AAAA,UACV,SAAA,EAAW;AAAA,SACb;AAAA,QACA,SAAA,EAAW,sCAAA;AAAA,QACX,QAAA,EAAU,4CAAA;AAAA,QACV,OAAA,EAAS;AAAA,OACX;AAEA,MAAA,SAAA,CAAU,KAAA,GAAQ;AAAA,QAChB,cAAA,EAAgB,kDAAA;AAAA,QAChB,eAAA,EAAiB,wBAAA;AAAA,QACjB,gBAAA,EAAkB,qBAAA;AAAA,QAClB,gBAAA,EAAkB,oBAAA;AAAA,QAClB,aAAA,EAAe,sBAAA;AAAA,QACf,WAAA,EAAa;AAAA,OACf;AAEA,MAAA,SAAA,CAAU,YAAA,GAAe;AAAA,QACvB,OAAA,EAAS,SAAA;AAAA,QACT,MAAA,EAAQ,SAAA;AAAA,QACR,YAAA,EAAc,QAAA;AAAA,QACd,cAAA,EAAgB,SAAA;AAAA,QAChB,aAAA,EAAe;AAAA,OACjB;AAEA,MAAA,SAAA,CAAU,OAAA,GAAU;AAAA,QAClB,KAAA,EAAO,UAAA;AAAA,QACP,OAAA,EAAS,YAAA;AAAA,QACT,OAAA,EAAS,YAAA;AAAA,QACT,MAAA,EAAQ,yBAAA;AAAA,QACR,MAAA,EAAQ;AAAA,OACV;AAAA,IACF;AAGA,IAAA,IAAI,MAAA,CAAO,QAAA,EAAU,QAAA,CAAS,QAAQ,CAAA,EAAG;AACvC,MAAA,SAAA,CAAU,KAAA,CAAM,YAAY,CAAA,GAAI,4CAAA;AAChC,MAAA,SAAA,CAAU,KAAA,CAAM,oBAAoB,CAAA,GAAI,4BAAA;AAAA,IAC1C;AAEA,IAAA,IAAI,MAAA,CAAO,QAAA,EAAU,QAAA,CAAS,OAAO,CAAA,EAAG;AACtC,MAAA,SAAA,CAAU,WAAA,CAAY,oBAAoB,CAAA,GAAI,4BAAA;AAC9C,MAAA,SAAA,CAAU,KAAA,CAAM,0BAA0B,CAAA,GAAI,2CAAA;AAAA,IAChD;AAEA,IAAA,OAAO;AAAA,MACL,OAAA,EAAS,IAAA;AAAA,MACT,SAAA;AAAA,MACA,cAAA,EAAgB;AAAA,QACd,CAAA,SAAA,EAAY,OAAO,YAAY,CAAA,CAAA;AAAA,QAC/B,CAAA,GAAA,EAAM,OAAO,YAAY,CAAA,CAAA;AAAA,QACzB,aAAA;AAAA,QACA,CAAA,YAAA,EAAe,OAAO,OAAA,CAAQ,SAAA,CAAU,YAAY,CAAA,CAAE,GAAA,CAAI,CAAC,CAAC,GAAA,EAAK,GAAG,CAAA,KAAM,CAAA,EAAG,GAAG,CAAA,CAAA,EAAI,GAAG,EAAE,CAAA,CAAE,IAAA,CAAK,GAAG,CAAC,CAAA;AAAA,OACtG;AAAA,MACA,cAAA,EAAgB;AAAA,QACd,gIAAA;AAAA,QACA,mFAAA;AAAA,QACA,yEAAA;AAAA,QACA;AAAA;AACF,KACF;AAAA,EACF;AACF;AAGA,SAAS,uBAAA,CAAwB,QAAgB,MAAA,EAAqB;AACpE,EAAA,IAAI,WAAW,SAAA,EAAW;AACxB,IAAA,OAAO,CAAA,qBAAA,EAAwB,OAAO,IAAI,CAAA,EAAA,CAAA;AAAA,EAC5C,CAAA,MAAA,IAAW,WAAW,YAAA,EAAc;AAClC,IAAA,OAAO,CAAA,aAAA,EAAgB,OAAO,IAAI,CAAA,wBAAA,CAAA;AAAA,EACpC;AACA,EAAA,OAAO,EAAA;AACT;AAEA,SAAS,kBAAA,CAAmB,QAAgB,QAAA,EAA2B;AACrE,EAAA,OAAO,SAAS,GAAA,CAAI,CAAA,MAAA,KAAU,uBAAA,CAAwB,MAAA,EAAQ,MAAM,CAAC,CAAA;AACvE;AAGO,MAAM,iBAAA,GAAoB;AAAA,EAC/B,sBAAA;AAAA,EACA,wBAAA;AAAA,EACA;AACF;;;;"}