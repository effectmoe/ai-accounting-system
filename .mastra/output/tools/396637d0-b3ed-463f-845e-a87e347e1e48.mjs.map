{"version":3,"file":"396637d0-b3ed-463f-845e-a87e347e1e48.mjs","sources":["../../../src/mastra/tools/product-tools.ts"],"sourcesContent":["import { getDatabase } from '@/lib/mongodb-client';\nimport { logger } from '@/lib/logger';\n\n/**\n * 新商品を登録\n */\nexport const createProductTool = {\n  name: 'create_product',\n  description: '新商品を登録します',\n  parameters: {\n    type: 'object',\n    properties: {\n      name: { type: 'string', description: '商品名' },\n      name_kana: { type: 'string', description: '商品名（カナ）' },\n      code: { type: 'string', description: '商品コード' },\n      jan_code: { type: 'string', description: 'JANコード' },\n      category: { type: 'string', description: 'カテゴリ' },\n      unit_price: { type: 'number', description: '単価' },\n      cost_price: { type: 'number', description: '原価' },\n      tax_type: { type: 'string', enum: ['standard', 'reduced', 'exempt'], description: '税区分' },\n      stock_management: { type: 'boolean', description: '在庫管理対象か' },\n      description: { type: 'string', description: '商品説明' },\n    },\n    required: ['name', 'code', 'unit_price', 'tax_type'],\n  },\n  handler: async (params: any) => {\n    logger.info('Creating product:', params);\n    \n    const db = await getDatabase();\n    const collection = db.collection('products');\n    \n    // 商品コードの重複チェック\n    const existing = await collection.findOne({ code: params.code });\n    if (existing) {\n      return {\n        success: false,\n        error: `商品コード ${params.code} は既に使用されています`,\n      };\n    }\n    \n    // JANコードのバリデーション（13桁または8桁）\n    if (params.jan_code && ![8, 13].includes(params.jan_code.length)) {\n      return {\n        success: false,\n        error: 'JANコードは8桁または13桁である必要があります',\n      };\n    }\n    \n    // 利益率の計算\n    const profitMargin = params.cost_price \n      ? ((params.unit_price - params.cost_price) / params.unit_price * 100).toFixed(2)\n      : null;\n    \n    const product = {\n      name: params.name,\n      name_kana: params.name_kana || '',\n      code: params.code,\n      jan_code: params.jan_code || '',\n      category: params.category || '未分類',\n      unit_price: params.unit_price,\n      cost_price: params.cost_price || 0,\n      profit_margin: profitMargin,\n      tax_type: params.tax_type,\n      tax_rate: params.tax_type === 'reduced' ? 0.08 : params.tax_type === 'exempt' ? 0 : 0.1,\n      stock_management: params.stock_management ?? true,\n      description: params.description || '',\n      status: 'active',\n      created_at: new Date(),\n      updated_at: new Date(),\n      // 初期在庫情報\n      stock_info: {\n        current_stock: 0,\n        reserved_stock: 0,\n        available_stock: 0,\n        reorder_point: 0,\n        reorder_quantity: 0,\n      },\n      // 販売統計（初期値）\n      sales_stats: {\n        total_sold: 0,\n        total_revenue: 0,\n        last_sold_date: null,\n        average_daily_sales: 0,\n      },\n    };\n    \n    const result = await collection.insertOne(product);\n    \n    return {\n      success: true,\n      product_id: result.insertedId.toString(),\n      product: {\n        ...product,\n        _id: result.insertedId,\n      },\n      message: `商品「${params.name}」を登録しました`,\n      next_steps: [\n        '初期在庫の登録',\n        '発注点の設定',\n        '商品画像の追加',\n        '関連商品の設定',\n      ],\n    };\n  }\n};\n\n/**\n * 在庫分析を実行\n */\nexport const analyzeInventoryTool = {\n  name: 'analyze_inventory',\n  description: '在庫分析を実行します',\n  parameters: {\n    type: 'object',\n    properties: {\n      analysis_type: {\n        type: 'string',\n        enum: ['abc_analysis', 'turnover_rate', 'dead_stock', 'reorder_point', 'seasonal_trend'],\n        description: '分析タイプ',\n      },\n      period_days: { type: 'number', description: '分析期間（日数）' },\n      category_filter: { type: 'string', description: 'カテゴリフィルター' },\n      warehouse_id: { type: 'string', description: '倉庫ID' },\n    },\n    required: ['analysis_type'],\n  },\n  handler: async (params: any) => {\n    logger.info('Analyzing inventory:', params);\n    \n    const db = await getDatabase();\n    const productsCollection = db.collection('products');\n    const inventoryCollection = db.collection('inventory_movements');\n    \n    const periodDays = params.period_days || 90;\n    const startDate = new Date(Date.now() - periodDays * 24 * 60 * 60 * 1000);\n    \n    let analysisResult: any = {\n      analysis_type: params.analysis_type,\n      period: {\n        days: periodDays,\n        start_date: startDate,\n        end_date: new Date(),\n      },\n    };\n    \n    switch (params.analysis_type) {\n      case 'abc_analysis':\n        // ABC分析（売上貢献度による分類）\n        const products = await productsCollection.find(\n          params.category_filter ? { category: params.category_filter } : {}\n        ).toArray();\n        \n        // 売上データの集計\n        const productSales = await Promise.all(products.map(async (product) => {\n          const sales = await inventoryCollection.aggregate([\n            {\n              $match: {\n                product_id: product._id,\n                type: 'sale',\n                date: { $gte: startDate },\n              },\n            },\n            {\n              $group: {\n                _id: null,\n                total_quantity: { $sum: '$quantity' },\n                total_revenue: { $sum: { $multiply: ['$quantity', '$unit_price'] } },\n              },\n            },\n          ]).toArray();\n          \n          return {\n            product_id: product._id,\n            product_name: product.name,\n            product_code: product.code,\n            total_revenue: sales[0]?.total_revenue || 0,\n            total_quantity: sales[0]?.total_quantity || 0,\n          };\n        }));\n        \n        // 売上高順にソート\n        productSales.sort((a, b) => b.total_revenue - a.total_revenue);\n        \n        // 累積売上高の計算とABC分類\n        const totalRevenue = productSales.reduce((sum, p) => sum + p.total_revenue, 0);\n        let cumulativeRevenue = 0;\n        \n        const abcClassification = productSales.map(product => {\n          cumulativeRevenue += product.total_revenue;\n          const cumulativePercentage = (cumulativeRevenue / totalRevenue) * 100;\n          \n          let classification = 'C';\n          if (cumulativePercentage <= 70) classification = 'A';\n          else if (cumulativePercentage <= 90) classification = 'B';\n          \n          return {\n            ...product,\n            revenue_percentage: ((product.total_revenue / totalRevenue) * 100).toFixed(2),\n            cumulative_percentage: cumulativePercentage.toFixed(2),\n            classification,\n          };\n        });\n        \n        analysisResult.abc_analysis = {\n          total_revenue: totalRevenue,\n          classifications: {\n            A: abcClassification.filter(p => p.classification === 'A'),\n            B: abcClassification.filter(p => p.classification === 'B'),\n            C: abcClassification.filter(p => p.classification === 'C'),\n          },\n          summary: {\n            A_items_count: abcClassification.filter(p => p.classification === 'A').length,\n            B_items_count: abcClassification.filter(p => p.classification === 'B').length,\n            C_items_count: abcClassification.filter(p => p.classification === 'C').length,\n          },\n        };\n        \n        analysisResult.recommendations = [\n          'A商品：在庫切れを避けるため、安全在庫を高めに設定',\n          'B商品：標準的な在庫管理を実施',\n          'C商品：在庫削減を検討、廃番候補の評価',\n        ];\n        break;\n        \n      case 'turnover_rate':\n        // 在庫回転率分析\n        const turnoverData = await productsCollection.aggregate([\n          {\n            $lookup: {\n              from: 'inventory_movements',\n              let: { product_id: '$_id' },\n              pipeline: [\n                {\n                  $match: {\n                    $expr: {\n                      $and: [\n                        { $eq: ['$product_id', '$$product_id'] },\n                        { $eq: ['$type', 'sale'] },\n                        { $gte: ['$date', startDate] },\n                      ],\n                    },\n                  },\n                },\n                {\n                  $group: {\n                    _id: null,\n                    total_sold: { $sum: '$quantity' },\n                  },\n                },\n              ],\n              as: 'sales_data',\n            },\n          },\n          {\n            $project: {\n              name: 1,\n              code: 1,\n              current_stock: '$stock_info.current_stock',\n              total_sold: { $ifNull: [{ $arrayElemAt: ['$sales_data.total_sold', 0] }, 0] },\n              average_stock: { $avg: ['$stock_info.current_stock', 0] }, // 簡易計算\n            },\n          },\n          {\n            $addFields: {\n              turnover_rate: {\n                $cond: {\n                  if: { $eq: ['$average_stock', 0] },\n                  then: 0,\n                  else: { $divide: ['$total_sold', '$average_stock'] },\n                },\n              },\n              days_of_inventory: {\n                $cond: {\n                  if: { $eq: ['$total_sold', 0] },\n                  then: 999,\n                  else: { $divide: [{ $multiply: ['$current_stock', periodDays] }, '$total_sold'] },\n                },\n              },\n            },\n          },\n        ]).toArray();\n        \n        analysisResult.turnover_analysis = {\n          products: turnoverData.sort((a, b) => b.turnover_rate - a.turnover_rate),\n          average_turnover_rate: (turnoverData.reduce((sum, p) => sum + p.turnover_rate, 0) / turnoverData.length).toFixed(2),\n          high_performers: turnoverData.filter(p => p.turnover_rate > 12), // 年12回転以上\n          low_performers: turnoverData.filter(p => p.turnover_rate < 4), // 年4回転未満\n        };\n        break;\n        \n      case 'dead_stock':\n        // 死蔵在庫の検出\n        const deadStockThreshold = 180; // 180日以上動きがない在庫\n        \n        const deadStock = await productsCollection.aggregate([\n          {\n            $lookup: {\n              from: 'inventory_movements',\n              let: { product_id: '$_id' },\n              pipeline: [\n                {\n                  $match: {\n                    $expr: {\n                      $and: [\n                        { $eq: ['$product_id', '$$product_id'] },\n                        { $in: ['$type', ['sale', 'purchase']] },\n                      ],\n                    },\n                  },\n                },\n                {\n                  $sort: { date: -1 },\n                },\n                {\n                  $limit: 1,\n                },\n              ],\n              as: 'last_movement',\n            },\n          },\n          {\n            $addFields: {\n              last_movement_date: { $arrayElemAt: ['$last_movement.date', 0] },\n              days_since_movement: {\n                $divide: [\n                  { $subtract: [new Date(), { $ifNull: [{ $arrayElemAt: ['$last_movement.date', 0] }, '$created_at'] }] },\n                  1000 * 60 * 60 * 24,\n                ],\n              },\n            },\n          },\n          {\n            $match: {\n              $and: [\n                { 'stock_info.current_stock': { $gt: 0 } },\n                { days_since_movement: { $gte: deadStockThreshold } },\n              ],\n            },\n          },\n        ]).toArray();\n        \n        analysisResult.dead_stock = {\n          threshold_days: deadStockThreshold,\n          dead_stock_items: deadStock,\n          total_dead_stock_value: deadStock.reduce((sum, item) => \n            sum + (item.stock_info.current_stock * item.unit_price), 0\n          ),\n          recommendations: [\n            '特別セールでの在庫処分',\n            'バンドル商品としての販売',\n            '廃棄処分の検討',\n            '仕入先への返品交渉',\n          ],\n        };\n        break;\n        \n      case 'reorder_point':\n        // 発注点の最適化分析\n        const reorderAnalysis = await productsCollection.aggregate([\n          {\n            $lookup: {\n              from: 'inventory_movements',\n              let: { product_id: '$_id' },\n              pipeline: [\n                {\n                  $match: {\n                    $expr: {\n                      $and: [\n                        { $eq: ['$product_id', '$$product_id'] },\n                        { $eq: ['$type', 'sale'] },\n                        { $gte: ['$date', startDate] },\n                      ],\n                    },\n                  },\n                },\n                {\n                  $group: {\n                    _id: {\n                      $dateToString: { format: '%Y-%m-%d', date: '$date' },\n                    },\n                    daily_sales: { $sum: '$quantity' },\n                  },\n                },\n              ],\n              as: 'daily_sales',\n            },\n          },\n          {\n            $addFields: {\n              average_daily_demand: { $avg: '$daily_sales.daily_sales' },\n              demand_std_dev: { $stdDevPop: '$daily_sales.daily_sales' },\n            },\n          },\n        ]).toArray();\n        \n        analysisResult.reorder_point_analysis = reorderAnalysis.map(product => {\n          const leadTimeDays = 7; // デフォルトリードタイム\n          const serviceLevel = 0.95; // 95%のサービスレベル\n          const zScore = 1.65; // 95%のz値\n          \n          const avgDemand = product.average_daily_demand || 0;\n          const stdDev = product.demand_std_dev || 0;\n          \n          const reorderPoint = Math.ceil(\n            (avgDemand * leadTimeDays) + (zScore * stdDev * Math.sqrt(leadTimeDays))\n          );\n          \n          const reorderQuantity = Math.ceil(avgDemand * 30); // 30日分\n          \n          return {\n            product_id: product._id,\n            product_name: product.name,\n            average_daily_demand: avgDemand.toFixed(2),\n            demand_variability: stdDev.toFixed(2),\n            current_reorder_point: product.stock_info?.reorder_point || 0,\n            recommended_reorder_point: reorderPoint,\n            recommended_reorder_quantity: reorderQuantity,\n            needs_adjustment: Math.abs((product.stock_info?.reorder_point || 0) - reorderPoint) > 5,\n          };\n        });\n        break;\n    }\n    \n    return {\n      success: true,\n      analysis: analysisResult,\n      export_available: true,\n      export_formats: ['excel', 'csv', 'pdf'],\n    };\n  }\n};\n\n/**\n * 価格最適化を提案\n */\nexport const optimizePricingTool = {\n  name: 'optimize_pricing',\n  description: '価格最適化を提案します',\n  parameters: {\n    type: 'object',\n    properties: {\n      product_id: { type: 'string', description: '商品ID' },\n      optimization_goal: {\n        type: 'string',\n        enum: ['maximize_profit', 'maximize_volume', 'match_competition', 'clear_inventory'],\n        description: '最適化目標',\n      },\n      competitor_prices: { type: 'array', items: { type: 'number' }, description: '競合価格' },\n      price_elasticity: { type: 'number', description: '価格弾力性' },\n      constraints: {\n        type: 'object',\n        properties: {\n          min_margin: { type: 'number', description: '最低利益率' },\n          max_price: { type: 'number', description: '最高価格' },\n          min_price: { type: 'number', description: '最低価格' },\n        },\n      },\n    },\n    required: ['product_id', 'optimization_goal'],\n  },\n  handler: async (params: any) => {\n    logger.info('Optimizing pricing:', params);\n    \n    const db = await getDatabase();\n    const productsCollection = db.collection('products');\n    const salesCollection = db.collection('inventory_movements');\n    \n    // 商品情報の取得\n    const product = await productsCollection.findOne({ _id: params.product_id });\n    if (!product) {\n      return {\n        success: false,\n        error: '商品が見つかりません',\n      };\n    }\n    \n    // 過去の販売データから価格弾力性を推定（簡易版）\n    const elasticity = params.price_elasticity || -1.5; // デフォルト値\n    \n    let optimizedPrice = product.unit_price;\n    let reasoning = '';\n    let projectedImpact: any = {};\n    \n    switch (params.optimization_goal) {\n      case 'maximize_profit':\n        // 利益最大化\n        // 最適価格 = 原価 / (1 + 1/|弾力性|)\n        const optimalMarkup = 1 / Math.abs(elasticity);\n        optimizedPrice = product.cost_price / (1 - optimalMarkup);\n        reasoning = '需要の価格弾力性に基づいて利益を最大化する価格を計算しました';\n        \n        projectedImpact = {\n          current_margin: ((product.unit_price - product.cost_price) / product.unit_price * 100).toFixed(2) + '%',\n          new_margin: ((optimizedPrice - product.cost_price) / optimizedPrice * 100).toFixed(2) + '%',\n          volume_change: ((Math.pow(optimizedPrice / product.unit_price, elasticity) - 1) * 100).toFixed(2) + '%',\n        };\n        break;\n        \n      case 'maximize_volume':\n        // 販売数量最大化（制約内で最低価格）\n        const minMarginPrice = product.cost_price / (1 - (params.constraints?.min_margin || 0.1));\n        optimizedPrice = Math.max(minMarginPrice, params.constraints?.min_price || minMarginPrice);\n        reasoning = '最低利益率を確保しながら販売数量を最大化する価格を設定しました';\n        \n        projectedImpact = {\n          price_reduction: ((1 - optimizedPrice / product.unit_price) * 100).toFixed(2) + '%',\n          expected_volume_increase: ((Math.pow(optimizedPrice / product.unit_price, elasticity) - 1) * 100).toFixed(2) + '%',\n        };\n        break;\n        \n      case 'match_competition':\n        // 競合価格に合わせる\n        if (params.competitor_prices && params.competitor_prices.length > 0) {\n          const avgCompetitorPrice = params.competitor_prices.reduce((a, b) => a + b, 0) / params.competitor_prices.length;\n          optimizedPrice = avgCompetitorPrice * 0.95; // 競合より5%安く\n          reasoning = '競合他社の平均価格より5%低い価格を設定し、競争優位性を確保します';\n          \n          projectedImpact = {\n            competitor_average: avgCompetitorPrice,\n            price_advantage: '5%',\n            market_position: '価格リーダー',\n          };\n        }\n        break;\n        \n      case 'clear_inventory':\n        // 在庫処分\n        const clearanceDiscount = 0.3; // 30%割引\n        optimizedPrice = product.unit_price * (1 - clearanceDiscount);\n        reasoning = '在庫を迅速に処分するため、大幅な割引価格を設定しました';\n        \n        projectedImpact = {\n          discount_percentage: (clearanceDiscount * 100) + '%',\n          break_even_volume: Math.ceil(product.cost_price * product.stock_info.current_stock / optimizedPrice),\n          expected_clearance_days: 14,\n        };\n        break;\n    }\n    \n    // 制約条件の適用\n    if (params.constraints) {\n      if (params.constraints.min_price) {\n        optimizedPrice = Math.max(optimizedPrice, params.constraints.min_price);\n      }\n      if (params.constraints.max_price) {\n        optimizedPrice = Math.min(optimizedPrice, params.constraints.max_price);\n      }\n      \n      const margin = (optimizedPrice - product.cost_price) / optimizedPrice;\n      if (params.constraints.min_margin && margin < params.constraints.min_margin) {\n        optimizedPrice = product.cost_price / (1 - params.constraints.min_margin);\n      }\n    }\n    \n    return {\n      success: true,\n      pricing_optimization: {\n        product_name: product.name,\n        current_price: product.unit_price,\n        optimized_price: Math.round(optimizedPrice),\n        price_change: ((optimizedPrice / product.unit_price - 1) * 100).toFixed(2) + '%',\n        optimization_goal: params.optimization_goal,\n        reasoning: reasoning,\n      },\n      projected_impact: projectedImpact,\n      implementation_strategy: {\n        timing: params.optimization_goal === 'clear_inventory' ? '即時' : '段階的',\n        test_period: '2週間',\n        monitoring_metrics: ['売上高', '販売数量', '在庫回転率', '利益率'],\n      },\n      risks: [\n        '顧客の価格感度による売上への影響',\n        '競合他社の価格対抗',\n        'ブランドイメージへの影響',\n      ],\n    };\n  }\n};\n\n// すべてのツールをエクスポート\nexport const productTools = [\n  createProductTool,\n  analyzeInventoryTool,\n  optimizePricingTool,\n];"],"names":[],"mappings":"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"}