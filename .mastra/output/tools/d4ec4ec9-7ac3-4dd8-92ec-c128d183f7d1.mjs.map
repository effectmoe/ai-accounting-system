{"version":3,"file":"d4ec4ec9-7ac3-4dd8-92ec-c128d183f7d1.mjs","sources":["../../../src/mastra/tools/ocr-tools.ts"],"sourcesContent":["import { getDatabase } from '@/lib/mongodb-client';\nimport { logger } from '@/lib/logger';\n\n/**\n * 文書画像をOCR処理してテキストを抽出\n */\nexport const processDocumentImageTool = {\n  name: 'process_document_image',\n  description: '文書画像をOCR処理してテキストを抽出します',\n  parameters: {\n    type: 'object',\n    properties: {\n      image_url: { type: 'string', description: '画像URL' },\n      image_base64: { type: 'string', description: 'Base64エンコードされた画像データ' },\n      document_type: {\n        type: 'string',\n        enum: ['receipt', 'invoice', 'delivery_note', 'quotation', 'contract', 'business_card', 'unknown'],\n        description: '文書タイプ',\n      },\n      language: { type: 'string', enum: ['ja', 'en', 'auto'], description: '言語設定' },\n      enhance_quality: { type: 'boolean', description: '画質向上処理を行うか' },\n    },\n    required: ['document_type'],\n  },\n  handler: async (params: any) => {\n    logger.info('Processing document image:', params);\n    \n    const db = await getDatabase();\n    const collection = db.collection('ocr_results');\n    \n    // OCR処理のシミュレーション\n    let extractedText = '';\n    let structuredData: any = {};\n    \n    switch (params.document_type) {\n      case 'receipt':\n        extractedText = `スーパーマーケット ABC\n東京都渋谷区1-2-3\nTEL: 03-1234-5678\n\n2024年1月15日 14:30\nレジ#: 001 担当: 田中\n\n商品名　　　　　数量　単価　　金額\n-----------------------------------\n牛乳　　　　　　1　　¥248　　¥248\nパン　　　　　　2　　¥158　　¥316\n卵　　　　　　　1　　¥298　　¥298\n野菜ジュース　　3　　¥128　　¥384\n-----------------------------------\n小計　　　　　　　　　　　　¥1,246\n消費税(8%)　　　　　　　　　　¥72\n消費税(10%)　　　　　　　　　　¥28\n-----------------------------------\n合計　　　　　　　　　　　　¥1,346\n\nお預かり　　　　　　　　　　¥2,000\nお釣り　　　　　　　　　　　　¥654`;\n        \n        structuredData = {\n          store_name: 'スーパーマーケット ABC',\n          store_address: '東京都渋谷区1-2-3',\n          store_phone: '03-1234-5678',\n          transaction_date: '2024-01-15',\n          transaction_time: '14:30',\n          items: [\n            { name: '牛乳', quantity: 1, unit_price: 248, tax_rate: 0.08 },\n            { name: 'パン', quantity: 2, unit_price: 158, tax_rate: 0.08 },\n            { name: '卵', quantity: 1, unit_price: 298, tax_rate: 0.08 },\n            { name: '野菜ジュース', quantity: 3, unit_price: 128, tax_rate: 0.1 },\n          ],\n          subtotal: 1246,\n          tax_8_percent: 72,\n          tax_10_percent: 28,\n          total_amount: 1346,\n        };\n        break;\n        \n      case 'invoice':\n        extractedText = `請求書\n                        \n請求書番号: INV-2024-0123\n発行日: 2024年1月20日\n支払期限: 2024年2月20日\n\n株式会社サンプル商事 御中\n\n株式会社ABC\n〒100-0001\n東京都千代田区1-2-3\nTEL: 03-9876-5432\n登録番号: T1234567890123\n\n品目　　　　　　　数量　単価　　　金額\n商品A　　　　　　 10　　¥5,000　 ¥50,000\nサービスB　　　　　5　　¥8,000　 ¥40,000\n配送料　　　　　　 1　　¥2,000　　¥2,000\n\n小計　　　　　　　　　　　　　　¥92,000\n消費税(10%)　　　　　　　　　　　¥9,200\n合計　　　　　　　　　　　　　 ¥101,200\n\n振込先:\nみずほ銀行 東京支店\n普通 1234567\nカ)エービーシー`;\n        \n        structuredData = {\n          invoice_number: 'INV-2024-0123',\n          issue_date: '2024-01-20',\n          due_date: '2024-02-20',\n          customer_name: '株式会社サンプル商事',\n          supplier_name: '株式会社ABC',\n          supplier_address: '東京都千代田区1-2-3',\n          supplier_phone: '03-9876-5432',\n          tax_registration_number: 'T1234567890123',\n          items: [\n            { description: '商品A', quantity: 10, unit_price: 5000, amount: 50000 },\n            { description: 'サービスB', quantity: 5, unit_price: 8000, amount: 40000 },\n            { description: '配送料', quantity: 1, unit_price: 2000, amount: 2000 },\n          ],\n          subtotal: 92000,\n          tax_amount: 9200,\n          total_amount: 101200,\n          bank_info: {\n            bank_name: 'みずほ銀行',\n            branch_name: '東京支店',\n            account_type: '普通',\n            account_number: '1234567',\n          },\n        };\n        break;\n        \n      case 'business_card':\n        extractedText = `株式会社テクノロジー\n代表取締役\n山田 太郎\nTARO YAMADA\n\n〒150-0001\n東京都渋谷区神宮前1-2-3\nテクノロジービル 10F\n\nTEL: 03-1111-2222\nFAX: 03-1111-2223\nMobile: 090-1234-5678\nEmail: yamada@technology.co.jp\nURL: https://www.technology.co.jp`;\n        \n        structuredData = {\n          name: '山田 太郎',\n          name_romaji: 'TARO YAMADA',\n          title: '代表取締役',\n          company: '株式会社テクノロジー',\n          address: '東京都渋谷区神宮前1-2-3 テクノロジービル 10F',\n          postal_code: '150-0001',\n          phone: '03-1111-2222',\n          fax: '03-1111-2223',\n          mobile: '090-1234-5678',\n          email: 'yamada@technology.co.jp',\n          website: 'https://www.technology.co.jp',\n        };\n        break;\n        \n      default:\n        extractedText = 'OCR処理が完了しました。文書タイプが不明なため、構造化データは生成されませんでした。';\n    }\n    \n    // OCR結果を保存\n    const ocrResult = {\n      document_type: params.document_type,\n      language: params.language || 'ja',\n      extracted_text: extractedText,\n      structured_data: structuredData,\n      confidence_score: 0.95,\n      processing_time_ms: 1500,\n      image_url: params.image_url,\n      created_at: new Date(),\n      enhanced_quality: params.enhance_quality || false,\n    };\n    \n    const result = await collection.insertOne(ocrResult);\n    \n    return {\n      success: true,\n      ocr_result_id: result.insertedId.toString(),\n      document_type: params.document_type,\n      extracted_text: extractedText,\n      structured_data: structuredData,\n      confidence_score: ocrResult.confidence_score,\n      processing_time_ms: ocrResult.processing_time_ms,\n      language_detected: 'ja',\n      quality_assessment: {\n        text_clarity: 'high',\n        layout_preservation: 'excellent',\n        character_accuracy: '98%',\n      },\n    };\n  }\n};\n\n/**\n * 領収書から構造化データを抽出\n */\nexport const extractReceiptDataTool = {\n  name: 'extract_receipt_data',\n  description: '領収書から構造化データを抽出します',\n  parameters: {\n    type: 'object',\n    properties: {\n      ocr_text: { type: 'string', description: 'OCRで抽出されたテキスト' },\n      image_url: { type: 'string', description: '元画像URL（精度向上用）' },\n      extract_items: { type: 'boolean', description: '明細項目を抽出するか' },\n    },\n    required: ['ocr_text'],\n  },\n  handler: async (params: any) => {\n    logger.info('Extracting receipt data:', params);\n    \n    // テキスト解析によるデータ抽出\n    const lines = params.ocr_text.split('\\n');\n    const receiptData: any = {\n      raw_text: params.ocr_text,\n      store_info: {},\n      transaction_info: {},\n      items: [],\n      payment_info: {},\n    };\n    \n    // 店舗情報の抽出\n    const storeNamePattern = /^(.+?)(店|マーケット|ストア|商店)/;\n    const phonePattern = /TEL[:：]\\s*(\\d{2,4}-\\d{2,4}-\\d{4})/;\n    const addressPattern = /(〒?\\d{3}-?\\d{4})?\\s*(.+?[都道府県].+?[市区町村].+)/;\n    \n    for (const line of lines) {\n      if (storeNamePattern.test(line)) {\n        receiptData.store_info.name = line.trim();\n      }\n      if (phonePattern.test(line)) {\n        receiptData.store_info.phone = line.match(phonePattern)?.[1];\n      }\n      if (addressPattern.test(line)) {\n        const match = line.match(addressPattern);\n        if (match) {\n          receiptData.store_info.postal_code = match[1];\n          receiptData.store_info.address = match[2];\n        }\n      }\n    }\n    \n    // 日付・時刻の抽出\n    const datePattern = /(\\d{4}年\\d{1,2}月\\d{1,2}日)/;\n    const timePattern = /(\\d{1,2}[:：]\\d{2})/;\n    \n    for (const line of lines) {\n      if (datePattern.test(line)) {\n        receiptData.transaction_info.date = line.match(datePattern)?.[1];\n      }\n      if (timePattern.test(line)) {\n        receiptData.transaction_info.time = line.match(timePattern)?.[1];\n      }\n    }\n    \n    // 金額の抽出\n    const totalPattern = /合計.+?[¥￥]?\\s*(\\d{1,3}(?:,\\d{3})*)/;\n    const taxPattern = /消費税.+?[¥￥]?\\s*(\\d{1,3}(?:,\\d{3})*)/;\n    \n    for (const line of lines) {\n      if (totalPattern.test(line)) {\n        const amount = line.match(totalPattern)?.[1]?.replace(/,/g, '');\n        receiptData.payment_info.total_amount = parseInt(amount || '0');\n      }\n      if (taxPattern.test(line)) {\n        const amount = line.match(taxPattern)?.[1]?.replace(/,/g, '');\n        receiptData.payment_info.tax_amount = parseInt(amount || '0');\n      }\n    }\n    \n    // 明細項目の抽出（オプション）\n    if (params.extract_items) {\n      const itemPattern = /(.+?)\\s+(\\d+)\\s+[¥￥]?(\\d{1,3}(?:,\\d{3})*)\\s+[¥￥]?(\\d{1,3}(?:,\\d{3})*)/;\n      \n      for (const line of lines) {\n        const match = line.match(itemPattern);\n        if (match && !line.includes('小計') && !line.includes('合計')) {\n          receiptData.items.push({\n            name: match[1].trim(),\n            quantity: parseInt(match[2]),\n            unit_price: parseInt(match[3].replace(/,/g, '')),\n            amount: parseInt(match[4].replace(/,/g, '')),\n          });\n        }\n      }\n    }\n    \n    // データの検証と補完\n    if (receiptData.items.length > 0) {\n      const calculatedTotal = receiptData.items.reduce((sum: number, item: any) => sum + item.amount, 0);\n      receiptData.validation = {\n        items_total: calculatedTotal,\n        matches_receipt_total: Math.abs(calculatedTotal - (receiptData.payment_info.total_amount || 0)) < 100,\n      };\n    }\n    \n    return {\n      success: true,\n      receipt_data: receiptData,\n      extraction_quality: {\n        store_info_complete: Object.keys(receiptData.store_info).length >= 2,\n        transaction_info_complete: Object.keys(receiptData.transaction_info).length >= 2,\n        payment_info_complete: Object.keys(receiptData.payment_info).length >= 1,\n        items_extracted: receiptData.items.length,\n      },\n      suggestions: [\n        receiptData.store_info.name ? null : '店舗名が検出できませんでした',\n        receiptData.transaction_info.date ? null : '取引日が検出できませんでした',\n        receiptData.payment_info.total_amount ? null : '合計金額が検出できませんでした',\n      ].filter(s => s !== null),\n    };\n  }\n};\n\n/**\n * 表形式データを構造化して抽出\n */\nexport const extractTableDataTool = {\n  name: 'extract_table_data',\n  description: '画像内の表形式データを構造化して抽出します',\n  parameters: {\n    type: 'object',\n    properties: {\n      image_url: { type: 'string', description: '画像URL' },\n      image_base64: { type: 'string', description: 'Base64エンコードされた画像データ' },\n      table_type: {\n        type: 'string',\n        enum: ['invoice_items', 'price_list', 'inventory', 'financial_statement'],\n        description: '表のタイプ',\n      },\n      headers: { type: 'array', items: { type: 'string' }, description: '期待されるヘッダー' },\n    },\n    required: ['table_type'],\n  },\n  handler: async (params: any) => {\n    logger.info('Extracting table data:', params);\n    \n    let tableData: any = {\n      headers: [],\n      rows: [],\n      summary: {},\n    };\n    \n    // 表タイプに応じたサンプルデータ生成\n    switch (params.table_type) {\n      case 'invoice_items':\n        tableData.headers = ['品目', '数量', '単価', '金額', '税率'];\n        tableData.rows = [\n          ['商品A', '10', '¥1,000', '¥10,000', '10%'],\n          ['商品B', '5', '¥2,500', '¥12,500', '10%'],\n          ['サービスC', '1', '¥30,000', '¥30,000', '10%'],\n          ['配送料', '1', '¥1,500', '¥1,500', '10%'],\n        ];\n        tableData.summary = {\n          subtotal: 54000,\n          tax: 5400,\n          total: 59400,\n        };\n        break;\n        \n      case 'price_list':\n        tableData.headers = ['商品コード', '商品名', '定価', '卸価格', '在庫'];\n        tableData.rows = [\n          ['PRD-001', 'ノートPC', '¥150,000', '¥120,000', '25'],\n          ['PRD-002', 'モニター', '¥35,000', '¥28,000', '50'],\n          ['PRD-003', 'キーボード', '¥8,000', '¥6,400', '100'],\n          ['PRD-004', 'マウス', '¥3,000', '¥2,400', '150'],\n        ];\n        break;\n        \n      case 'financial_statement':\n        tableData.headers = ['勘定科目', '当期', '前期', '増減'];\n        tableData.rows = [\n          ['売上高', '¥50,000,000', '¥45,000,000', '+11.1%'],\n          ['売上原価', '¥30,000,000', '¥28,000,000', '+7.1%'],\n          ['売上総利益', '¥20,000,000', '¥17,000,000', '+17.6%'],\n          ['販管費', '¥15,000,000', '¥14,000,000', '+7.1%'],\n          ['営業利益', '¥5,000,000', '¥3,000,000', '+66.7%'],\n        ];\n        break;\n    }\n    \n    // カスタムヘッダーが指定されている場合は上書き\n    if (params.headers && params.headers.length > 0) {\n      tableData.headers = params.headers;\n    }\n    \n    // 数値データの解析\n    const numericColumns: number[] = [];\n    tableData.headers.forEach((header: string, index: number) => {\n      if (['金額', '単価', '当期', '前期', '定価', '卸価格'].includes(header)) {\n        numericColumns.push(index);\n      }\n    });\n    \n    // 統計情報の計算\n    if (numericColumns.length > 0) {\n      tableData.statistics = {\n        row_count: tableData.rows.length,\n        numeric_columns: numericColumns.map((i: number) => tableData.headers[i]),\n        has_totals: tableData.summary && Object.keys(tableData.summary).length > 0,\n      };\n    }\n    \n    return {\n      success: true,\n      table_data: tableData,\n      extraction_info: {\n        table_type: params.table_type,\n        headers_detected: tableData.headers.length,\n        rows_extracted: tableData.rows.length,\n        confidence: 0.92,\n      },\n      formatting_detected: {\n        currency_format: '¥',\n        number_format: 'comma_separated',\n        percentage_format: 'detected',\n      },\n      export_formats_available: ['csv', 'excel', 'json'],\n    };\n  }\n};\n\n// すべてのツールをエクスポート\nexport const ocrTools = [\n  processDocumentImageTool,\n  extractReceiptDataTool,\n  extractTableDataTool,\n];"],"names":[],"mappings":"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"}