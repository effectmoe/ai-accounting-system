{"version":3,"file":"20b3e85f-c7da-405c-89b1-71b0ecbad4da.mjs","sources":["../../../src/mastra/tools/japan-tax-tools.ts"],"sourcesContent":["import { getDatabase } from '@/lib/mongodb-client';\nimport { logger } from '@/lib/logger';\n\n/**\n * 消費税を計算（軽減税率対応）\n */\nexport const calculateConsumptionTaxTool = {\n  name: 'calculate_consumption_tax',\n  description: '消費税を計算します（軽減税率対応）',\n  parameters: {\n    type: 'object',\n    properties: {\n      amount: { type: 'number', description: '税抜金額' },\n      tax_rate: { type: 'number', enum: [0.08, 0.1], description: '税率（0.08=8%、0.1=10%）' },\n      item_type: {\n        type: 'string',\n        enum: ['food', 'newspaper', 'standard', 'mixed'],\n        description: '品目タイプ',\n      },\n      calculation_method: {\n        type: 'string',\n        enum: ['item_by_item', 'invoice', 'total'],\n        description: '計算方式',\n      },\n      is_tax_included: { type: 'boolean', description: '税込価格から計算するか' },\n    },\n    required: ['amount', 'tax_rate'],\n  },\n  handler: async (params: any) => {\n    logger.info('Calculating consumption tax:', params);\n    \n    let taxableAmount = params.amount;\n    let taxAmount = 0;\n    let totalAmount = 0;\n    \n    // 税込価格から税抜価格を計算\n    if (params.is_tax_included) {\n      taxableAmount = params.amount / (1 + params.tax_rate);\n      taxAmount = params.amount - taxableAmount;\n      totalAmount = params.amount;\n    } else {\n      // 税抜価格から税額を計算\n      taxAmount = taxableAmount * params.tax_rate;\n      totalAmount = taxableAmount + taxAmount;\n    }\n    \n    // 端数処理（切り捨て）\n    taxAmount = Math.floor(taxAmount);\n    \n    // 品目タイプに応じた情報\n    let itemInfo = '';\n    switch (params.item_type) {\n      case 'food':\n        itemInfo = '食品（軽減税率8%適用）';\n        break;\n      case 'newspaper':\n        itemInfo = '新聞（週2回以上発行、定期購読契約、軽減税率8%適用）';\n        break;\n      case 'standard':\n        itemInfo = '標準税率10%適用';\n        break;\n      case 'mixed':\n        itemInfo = '軽減税率と標準税率の混在';\n        break;\n    }\n    \n    return {\n      success: true,\n      calculation: {\n        original_amount: params.amount,\n        is_tax_included: params.is_tax_included,\n        taxable_amount: Math.floor(taxableAmount),\n        tax_rate: params.tax_rate,\n        tax_rate_percentage: `${params.tax_rate * 100}%`,\n        tax_amount: taxAmount,\n        total_amount: Math.floor(totalAmount),\n        item_type: params.item_type,\n        item_info: itemInfo,\n        calculation_method: params.calculation_method || 'item_by_item',\n      },\n      invoice_requirement: params.tax_rate === 0.08 || params.item_type === 'mixed' \n        ? '適格請求書の記載が必要です（軽減税率対象品目のため）' \n        : '標準税率のみの場合も適格請求書の発行が推奨されます',\n    };\n  }\n};\n\n/**\n * 源泉徴収税を計算\n */\nexport const calculateWithholdingTaxTool = {\n  name: 'calculate_withholding_tax',\n  description: '源泉徴収税を計算します',\n  parameters: {\n    type: 'object',\n    properties: {\n      payment_type: {\n        type: 'string',\n        enum: ['salary', 'bonus', 'retirement', 'dividend', 'interest', 'royalty', 'professional_fee'],\n        description: '支払種別',\n      },\n      gross_amount: { type: 'number', description: '総支払額' },\n      employee_info: {\n        type: 'object',\n        properties: {\n          dependents: { type: 'number', description: '扶養人数' },\n          insurance_deduction: { type: 'number', description: '社会保険料控除額' },\n          is_resident: { type: 'boolean', description: '居住者か' },\n        },\n      },\n      payment_date: { type: 'string', description: '支払日' },\n    },\n    required: ['payment_type', 'gross_amount'],\n  },\n  handler: async (params: any) => {\n    logger.info('Calculating withholding tax:', params);\n    \n    let withholdingAmount = 0;\n    let taxRate = 0;\n    let calculationMethod = '';\n    \n    const db = await getDatabase();\n    const collection = db.collection('withholding_tax_calculations');\n    \n    switch (params.payment_type) {\n      case 'salary':\n        // 給与所得の源泉徴収税額表に基づく計算（簡易版）\n        const monthlyAmount = params.gross_amount;\n        const socialInsurance = params.employee_info?.insurance_deduction || monthlyAmount * 0.15;\n        const taxableAmount = monthlyAmount - socialInsurance;\n        const dependents = params.employee_info?.dependents || 0;\n        \n        // 簡易的な税額計算（実際は源泉徴収税額表を参照）\n        if (taxableAmount <= 88000) {\n          taxRate = 0;\n        } else if (taxableAmount <= 89000) {\n          withholdingAmount = 130;\n        } else if (taxableAmount <= 90000) {\n          withholdingAmount = 180;\n        } else if (taxableAmount <= 93000) {\n          withholdingAmount = 290;\n        } else if (taxableAmount <= 94000) {\n          withholdingAmount = 340;\n        } else {\n          // 概算計算\n          taxRate = 0.05;\n          withholdingAmount = taxableAmount * taxRate;\n        }\n        \n        // 扶養控除の適用\n        withholdingAmount = Math.max(0, withholdingAmount - (dependents * 3000));\n        calculationMethod = '給与所得の源泉徴収税額表（月額表）';\n        break;\n        \n      case 'bonus':\n        // 賞与の源泉徴収税額計算\n        const previousMonthSalary = params.employee_info?.previous_month_salary || 300000;\n        const bonusTaxRate = getBonusTaxRate(previousMonthSalary);\n        withholdingAmount = params.gross_amount * bonusTaxRate;\n        taxRate = bonusTaxRate;\n        calculationMethod = '賞与に対する源泉徴収税額の算出率表';\n        break;\n        \n      case 'professional_fee':\n        // 報酬・料金等の源泉徴収\n        if (params.gross_amount <= 1000000) {\n          taxRate = 0.1021; // 10.21%（復興特別所得税含む）\n        } else {\n          taxRate = 0.2042; // 20.42%（復興特別所得税含む）\n          withholdingAmount = (params.gross_amount - 1000000) * 0.2042 + 102100;\n        }\n        \n        if (params.gross_amount <= 1000000) {\n          withholdingAmount = params.gross_amount * taxRate;\n        }\n        calculationMethod = '報酬・料金等の源泉徴収';\n        break;\n        \n      case 'dividend':\n        // 配当金の源泉徴収\n        taxRate = params.employee_info?.is_resident ? 0.20315 : 0.20315; // 20.315%\n        withholdingAmount = params.gross_amount * taxRate;\n        calculationMethod = '配当所得の源泉徴収';\n        break;\n        \n      default:\n        taxRate = 0.20315; // デフォルト税率\n        withholdingAmount = params.gross_amount * taxRate;\n        calculationMethod = '標準税率による計算';\n    }\n    \n    // 計算結果を保存\n    const calculation = {\n      payment_type: params.payment_type,\n      gross_amount: params.gross_amount,\n      withholding_amount: Math.floor(withholdingAmount),\n      net_amount: params.gross_amount - Math.floor(withholdingAmount),\n      tax_rate: taxRate,\n      calculation_method: calculationMethod,\n      payment_date: params.payment_date || new Date(),\n      employee_info: params.employee_info,\n      created_at: new Date(),\n    };\n    \n    await collection.insertOne(calculation);\n    \n    return {\n      success: true,\n      withholding_tax: {\n        gross_amount: params.gross_amount,\n        withholding_amount: Math.floor(withholdingAmount),\n        net_amount: params.gross_amount - Math.floor(withholdingAmount),\n        effective_tax_rate: `${(taxRate * 100).toFixed(3)}%`,\n        calculation_method: calculationMethod,\n      },\n      payment_slip: {\n        payment_date: params.payment_date || new Date().toISOString().split('T')[0],\n        payment_type: params.payment_type,\n        deadline: '翌月10日までに納付',\n      },\n      notes: [\n        '復興特別所得税（2.1%）を含む税率で計算しています',\n        '実際の計算は最新の源泉徴収税額表をご確認ください',\n      ],\n    };\n  }\n};\n\n/**\n * 節税戦略を提案\n */\nexport const optimizeTaxStrategyTool = {\n  name: 'optimize_tax_strategy',\n  description: '節税戦略を提案します',\n  parameters: {\n    type: 'object',\n    properties: {\n      company_profile: {\n        type: 'object',\n        properties: {\n          industry: { type: 'string', description: '業種' },\n          annual_revenue: { type: 'number', description: '年間売上高' },\n          employee_count: { type: 'number', description: '従業員数' },\n          capital: { type: 'number', description: '資本金' },\n        },\n      },\n      target_areas: {\n        type: 'array',\n        items: {\n          type: 'string',\n          enum: ['depreciation', 'tax_credits', 'deductions', 'timing', 'structure'],\n        },\n        description: '最適化対象分野',\n      },\n    },\n    required: ['company_profile'],\n  },\n  handler: async (params: any) => {\n    logger.info('Optimizing tax strategy:', params);\n    \n    const strategies: any[] = [];\n    const isSmallCompany = params.company_profile.capital <= 100000000; // 1億円以下\n    \n    // 中小企業向けの節税策\n    if (isSmallCompany) {\n      strategies.push({\n        strategy: '中小企業投資促進税制',\n        description: '機械装置等の取得に対する特別償却または税額控除',\n        potential_benefit: '取得価額の30%特別償却または7%税額控除',\n        requirements: ['資本金1億円以下', '青色申告法人', '対象設備の新規取得'],\n        applicable: true,\n      });\n      \n      strategies.push({\n        strategy: '中小企業経営強化税制',\n        description: '経営力向上計画に基づく設備投資の即時償却',\n        potential_benefit: '取得価額の100%即時償却または10%税額控除',\n        requirements: ['経営力向上計画の認定', '対象設備の取得'],\n        applicable: true,\n      });\n    }\n    \n    // 一般的な節税策\n    strategies.push({\n      strategy: '役員報酬の最適化',\n      description: '定期同額給与による損金算入と所得分散',\n      potential_benefit: '法人税と所得税の税率差を活用した節税',\n      implementation: [\n        '事前確定届出給与の活用',\n        '退職金規程の整備',\n        '社会保険料の最適化',\n      ],\n    });\n    \n    strategies.push({\n      strategy: '減価償却の最適化',\n      description: '定率法採用や特別償却の活用',\n      potential_benefit: '初年度の経費計上額増加による節税',\n      implementation: [\n        '定率法への変更届出',\n        '少額減価償却資産の特例活用（30万円未満）',\n        '一括償却資産の活用（20万円未満）',\n      ],\n    });\n    \n    // 業種別の節税策\n    if (params.company_profile.industry === 'IT' || params.company_profile.industry === 'ソフトウェア') {\n      strategies.push({\n        strategy: '研究開発税制',\n        description: '試験研究費の税額控除',\n        potential_benefit: '試験研究費の8-14%を税額控除',\n        requirements: ['試験研究費の適正な区分経理', '青色申告法人'],\n      });\n    }\n    \n    // タイミング戦略\n    if (params.target_areas?.includes('timing')) {\n      strategies.push({\n        strategy: '決算期変更',\n        description: '利益の繰り延べによる節税',\n        potential_benefit: '高収益期の課税所得を分散',\n        considerations: ['株主総会の承認が必要', '税務署への届出'],\n      });\n    }\n    \n    const totalPotentialSaving = Math.floor(params.company_profile.annual_revenue * 0.02); // 売上の2%程度\n    \n    return {\n      success: true,\n      company_profile: params.company_profile,\n      tax_optimization_strategies: strategies,\n      estimated_annual_tax_saving: totalPotentialSaving,\n      implementation_priority: [\n        '1. 中小企業税制の活用（該当する場合）',\n        '2. 役員報酬の見直し',\n        '3. 減価償却方法の最適化',\n        '4. 各種税額控除の活用',\n      ],\n      next_steps: [\n        '税理士との詳細な相談',\n        '各制度の要件確認',\n        '必要書類の準備',\n        '実施スケジュールの策定',\n      ],\n      warnings: [\n        '税制は頻繁に改正されるため、最新情報の確認が必要です',\n        '過度な節税は税務調査のリスクを高める可能性があります',\n        '専門家のアドバイスを受けることを推奨します',\n      ],\n    };\n  }\n};\n\n// ヘルパー関数\nfunction getBonusTaxRate(previousMonthSalary: number): number {\n  // 簡易的な賞与税率表（実際はもっと細かい）\n  if (previousMonthSalary <= 68000) return 0;\n  if (previousMonthSalary <= 79000) return 0.02042;\n  if (previousMonthSalary <= 252000) return 0.04084;\n  if (previousMonthSalary <= 300000) return 0.06126;\n  if (previousMonthSalary <= 334000) return 0.08168;\n  if (previousMonthSalary <= 363000) return 0.10210;\n  if (previousMonthSalary <= 395000) return 0.12252;\n  if (previousMonthSalary <= 426000) return 0.14294;\n  if (previousMonthSalary <= 550000) return 0.16336;\n  return 0.18378;\n}\n\n// すべてのツールをエクスポート\nexport const japanTaxTools = [\n  calculateConsumptionTaxTool,\n  calculateWithholdingTaxTool,\n  optimizeTaxStrategyTool,\n];"],"names":[],"mappings":"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"}