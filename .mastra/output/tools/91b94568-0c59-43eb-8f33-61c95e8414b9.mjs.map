{"version":3,"file":"91b94568-0c59-43eb-8f33-61c95e8414b9.mjs","sources":["../../../src/mastra/tools/refactor-tools.ts"],"sourcesContent":["import { getDatabase } from '@/lib/mongodb-client';\nimport { logger } from '@/lib/logger';\n\n/**\n * コード品質を分析\n */\nexport const analyzeCodeQualityTool = {\n  name: 'analyze_code_quality',\n  description: 'コード品質を分析します',\n  parameters: {\n    type: 'object',\n    properties: {\n      code_path: { type: 'string', description: 'コードパス' },\n      language: { type: 'string', description: 'プログラミング言語' },\n      analysis_type: {\n        type: 'array',\n        items: {\n          type: 'string',\n          enum: ['complexity', 'duplication', 'style', 'security', 'performance', 'test_coverage'],\n        },\n        description: '分析タイプ',\n      },\n      metrics: {\n        type: 'array',\n        items: {\n          type: 'string',\n          enum: ['cyclomatic_complexity', 'lines_of_code', 'technical_debt', 'maintainability_index'],\n        },\n        description: '計測メトリクス',\n      },\n    },\n    required: ['code_path', 'language', 'analysis_type'],\n  },\n  handler: async (params: any) => {\n    logger.info('Analyzing code quality:', params);\n    \n    const db = await getDatabase();\n    const collection = db.collection('code_quality_analyses');\n    \n    // コード品質分析の実行（シミュレーション）\n    const analysis: any = {\n      code_path: params.code_path,\n      language: params.language,\n      analysis_types: params.analysis_type,\n      timestamp: new Date(),\n      results: {},\n    };\n    \n    // 複雑度分析\n    if (params.analysis_type.includes('complexity')) {\n      analysis.results.complexity = {\n        cyclomatic_complexity: {\n          average: 8.5,\n          max: 25,\n          distribution: {\n            low: 65, // 1-5\n            medium: 25, // 6-10\n            high: 8, // 11-20\n            very_high: 2, // 20+\n          },\n          high_complexity_functions: [\n            { name: 'processInvoice', complexity: 25, line: 145 },\n            { name: 'calculateTax', complexity: 18, line: 320 },\n            { name: 'validateData', complexity: 15, line: 89 },\n          ],\n        },\n        cognitive_complexity: {\n          average: 12.3,\n          max: 35,\n        },\n      };\n    }\n    \n    // 重複コード検出\n    if (params.analysis_type.includes('duplication')) {\n      analysis.results.duplication = {\n        duplication_percentage: 15.2,\n        duplicated_lines: 342,\n        duplicated_blocks: [\n          {\n            lines: '45-67',\n            duplicated_in: ['utils.ts:120-142', 'helpers.ts:89-111'],\n            similarity: 0.95,\n          },\n          {\n            lines: '234-250',\n            duplicated_in: ['validation.ts:56-72'],\n            similarity: 0.88,\n          },\n        ],\n        refactoring_opportunities: [\n          'エラーハンドリングロジックの共通化',\n          'バリデーション関数の抽出',\n          'データ変換処理のユーティリティ化',\n        ],\n      };\n    }\n    \n    // スタイル分析\n    if (params.analysis_type.includes('style')) {\n      analysis.results.style = {\n        violations: {\n          total: 127,\n          by_severity: {\n            error: 12,\n            warning: 45,\n            info: 70,\n          },\n          by_rule: {\n            'no-unused-vars': 8,\n            'prefer-const': 15,\n            'arrow-function': 22,\n            'naming-convention': 30,\n          },\n        },\n        consistency_score: 82, // 100点満点\n        recommendations: [\n          'ESLint/Prettierの設定を厳格化',\n          'pre-commitフックの導入',\n          'コードレビューチェックリストの作成',\n        ],\n      };\n    }\n    \n    // セキュリティ分析\n    if (params.analysis_type.includes('security')) {\n      analysis.results.security = {\n        vulnerabilities: {\n          critical: 0,\n          high: 2,\n          medium: 5,\n          low: 12,\n        },\n        issues: [\n          {\n            type: 'SQL Injection Risk',\n            severity: 'high',\n            location: 'database.ts:45',\n            recommendation: 'パラメータ化クエリの使用',\n          },\n          {\n            type: 'Hardcoded Secret',\n            severity: 'high',\n            location: 'config.ts:12',\n            recommendation: '環境変数の使用',\n          },\n        ],\n        owasp_compliance: {\n          passed: 8,\n          failed: 2,\n          not_applicable: 0,\n        },\n      };\n    }\n    \n    // パフォーマンス分析\n    if (params.analysis_type.includes('performance')) {\n      analysis.results.performance = {\n        bottlenecks: [\n          {\n            function: 'generateReport',\n            issue: 'N+1クエリ問題',\n            impact: 'high',\n            solution: 'データの事前読み込みまたはバッチ処理',\n          },\n          {\n            function: 'processLargeFile',\n            issue: 'メモリ使用量過多',\n            impact: 'medium',\n            solution: 'ストリーミング処理の実装',\n          },\n        ],\n        optimization_opportunities: [\n          'インデックスの追加',\n          'キャッシュの実装',\n          '非同期処理の活用',\n          'アルゴリズムの最適化',\n        ],\n        estimated_improvement: '40-60%のレスポンスタイム改善',\n      };\n    }\n    \n    // メトリクスの計算\n    if (params.metrics && params.metrics.length > 0) {\n      analysis.results.metrics = {};\n      \n      if (params.metrics.includes('lines_of_code')) {\n        analysis.results.metrics.lines_of_code = {\n          total: 5432,\n          code: 3890,\n          comment: 892,\n          blank: 650,\n        };\n      }\n      \n      if (params.metrics.includes('maintainability_index')) {\n        analysis.results.metrics.maintainability_index = {\n          score: 68, // 0-100\n          rating: 'B', // A-F\n          trend: 'improving',\n        };\n      }\n      \n      if (params.metrics.includes('technical_debt')) {\n        analysis.results.metrics.technical_debt = {\n          total_hours: 156,\n          cost_estimate: '¥2,340,000',\n          by_category: {\n            code_smells: 45,\n            bugs: 20,\n            vulnerabilities: 15,\n            duplications: 30,\n            test_coverage: 46,\n          },\n        };\n      }\n    }\n    \n    // 総合評価\n    analysis.overall_score = calculateOverallScore(analysis.results);\n    analysis.grade = getGrade(analysis.overall_score);\n    \n    // 分析結果の保存\n    await collection.insertOne(analysis);\n    \n    return {\n      success: true,\n      analysis: analysis,\n      summary: {\n        overall_score: analysis.overall_score,\n        grade: analysis.grade,\n        critical_issues: countCriticalIssues(analysis.results),\n        improvement_areas: getTopImprovementAreas(analysis.results),\n      },\n      action_plan: generateActionPlan(analysis.results),\n    };\n  }\n};\n\n/**\n * リファクタリングを提案\n */\nexport const suggestRefactoringTool = {\n  name: 'suggest_refactoring',\n  description: 'リファクタリングを提案します',\n  parameters: {\n    type: 'object',\n    properties: {\n      code_snippet: { type: 'string', description: 'コードスニペット' },\n      refactoring_goals: {\n        type: 'array',\n        items: {\n          type: 'string',\n          enum: ['improve_readability', 'reduce_complexity', 'remove_duplication', 'improve_performance', 'add_type_safety'],\n        },\n        description: 'リファクタリング目標',\n      },\n      preserve_behavior: { type: 'boolean', description: '動作を保持するか' },\n      target_patterns: {\n        type: 'array',\n        items: { type: 'string' },\n        description: '適用するデザインパターン',\n      },\n    },\n    required: ['code_snippet', 'refactoring_goals'],\n  },\n  handler: async (params: any) => {\n    logger.info('Suggesting refactoring:', params);\n    \n    const refactoringSuggestions: any[] = [];\n    \n    // コードの簡易解析\n    const codeAnalysis = {\n      language: detectLanguage(params.code_snippet),\n      lines: params.code_snippet.split('\\n').length,\n      complexity: estimateComplexity(params.code_snippet),\n      has_duplication: detectDuplication(params.code_snippet),\n    };\n    \n    // リファクタリング目標に基づく提案\n    if (params.refactoring_goals.includes('improve_readability')) {\n      refactoringSuggestions.push({\n        type: 'Extract Method',\n        description: '長いメソッドを小さな単位に分割',\n        example: `// Before:\nfunction processOrder(order) {\n  // 50行のコード...\n}\n\n// After:\nfunction processOrder(order) {\n  validateOrder(order);\n  calculatePricing(order);\n  applyDiscounts(order);\n  createInvoice(order);\n}`,\n        benefits: ['可読性向上', 'テストしやすさ向上', '再利用性向上'],\n      });\n      \n      refactoringSuggestions.push({\n        type: 'Rename Variables',\n        description: '意味のある変数名への変更',\n        example: `// Before:\nconst d = new Date();\nconst u = users.filter(x => x.a > 18);\n\n// After:\nconst currentDate = new Date();\nconst adultUsers = users.filter(user => user.age > 18);`,\n        benefits: ['コードの自己文書化', '理解しやすさ向上'],\n      });\n    }\n    \n    if (params.refactoring_goals.includes('reduce_complexity')) {\n      refactoringSuggestions.push({\n        type: 'Replace Conditional with Polymorphism',\n        description: '複雑な条件分岐をポリモーフィズムで置換',\n        example: `// Before:\nfunction calculatePrice(type, basePrice) {\n  if (type === 'regular') return basePrice;\n  if (type === 'premium') return basePrice * 1.2;\n  if (type === 'vip') return basePrice * 1.5;\n}\n\n// After:\nclass PricingStrategy {\n  calculate(basePrice) { throw new Error('Must implement'); }\n}\n\nclass RegularPricing extends PricingStrategy {\n  calculate(basePrice) { return basePrice; }\n}\n\nclass PremiumPricing extends PricingStrategy {\n  calculate(basePrice) { return basePrice * 1.2; }\n}`,\n        benefits: ['拡張性向上', '複雑度削減', 'Open/Closed原則の遵守'],\n      });\n      \n      refactoringSuggestions.push({\n        type: 'Decompose Conditional',\n        description: '複雑な条件式を関数に抽出',\n        example: `// Before:\nif (user.age >= 18 && user.hasValidId && !user.isBanned) {\n  // 処理\n}\n\n// After:\nif (isEligibleUser(user)) {\n  // 処理\n}\n\nfunction isEligibleUser(user) {\n  return user.age >= 18 && user.hasValidId && !user.isBanned;\n}`,\n        benefits: ['可読性向上', '条件の再利用', 'テストしやすさ'],\n      });\n    }\n    \n    if (params.refactoring_goals.includes('remove_duplication')) {\n      refactoringSuggestions.push({\n        type: 'Extract Shared Function',\n        description: '重複コードを共通関数に抽出',\n        example: `// Before:\nfunction processInvoice(invoice) {\n  // バリデーション\n  if (!invoice.id) throw new Error('Invalid invoice');\n  if (!invoice.amount) throw new Error('Invalid amount');\n  // 処理...\n}\n\nfunction processReceipt(receipt) {\n  // バリデーション（重複）\n  if (!receipt.id) throw new Error('Invalid receipt');\n  if (!receipt.amount) throw new Error('Invalid amount');\n  // 処理...\n}\n\n// After:\nfunction validateDocument(doc, type) {\n  if (!doc.id) throw new Error(\\`Invalid \\${type}\\`);\n  if (!doc.amount) throw new Error('Invalid amount');\n}\n\nfunction processInvoice(invoice) {\n  validateDocument(invoice, 'invoice');\n  // 処理...\n}`,\n        benefits: ['DRY原則の遵守', '保守性向上', 'バグ修正の一元化'],\n      });\n    }\n    \n    if (params.refactoring_goals.includes('add_type_safety')) {\n      refactoringSuggestions.push({\n        type: 'Add TypeScript Types',\n        description: 'TypeScript型定義の追加',\n        example: `// Before:\nfunction createUser(name, email, age) {\n  return { name, email, age };\n}\n\n// After:\ninterface User {\n  name: string;\n  email: string;\n  age: number;\n}\n\nfunction createUser(name: string, email: string, age: number): User {\n  return { name, email, age };\n}`,\n        benefits: ['型安全性', 'IDE支援の向上', 'ランタイムエラーの削減'],\n      });\n    }\n    \n    // デザインパターンの適用\n    if (params.target_patterns && params.target_patterns.length > 0) {\n      params.target_patterns.forEach((pattern: string) => {\n        const patternSuggestion = getDesignPatternSuggestion(pattern, codeAnalysis);\n        if (patternSuggestion) {\n          refactoringSuggestions.push(patternSuggestion);\n        }\n      });\n    }\n    \n    // 優先順位付け\n    const prioritizedSuggestions = refactoringSuggestions.map((suggestion, index) => ({\n      ...suggestion,\n      priority: index + 1,\n      estimated_effort: estimateRefactoringEffort(suggestion.type),\n      risk_level: params.preserve_behavior ? 'low' : 'medium',\n    }));\n    \n    return {\n      success: true,\n      code_analysis: codeAnalysis,\n      refactoring_suggestions: prioritizedSuggestions,\n      implementation_order: prioritizedSuggestions.map(s => s.type),\n      testing_strategy: {\n        unit_tests: 'リファクタリング前後で全テストが通ることを確認',\n        integration_tests: '統合テストで動作を検証',\n        regression_tests: '既存機能への影響をチェック',\n      },\n      best_practices: [\n        '小さなステップでリファクタリング',\n        '各ステップでテストを実行',\n        'コミットを細かく分ける',\n        'レビューを受ける',\n      ],\n    };\n  }\n};\n\n/**\n * コードをモダナイズ\n */\nexport const modernizeCodeTool = {\n  name: 'modernize_code',\n  description: 'コードをモダナイズします',\n  parameters: {\n    type: 'object',\n    properties: {\n      legacy_code: { type: 'string', description: 'レガシーコード' },\n      target_version: { type: 'string', description: 'ターゲットバージョン' },\n      modernization_goals: {\n        type: 'array',\n        items: {\n          type: 'string',\n          enum: ['use_modern_syntax', 'add_type_annotations', 'async_await', 'functional_programming', 'remove_deprecated'],\n        },\n        description: 'モダナイゼーション目標',\n      },\n      compatibility_requirements: {\n        type: 'object',\n        properties: {\n          min_version: { type: 'string', description: '最小互換バージョン' },\n          breaking_changes_allowed: { type: 'boolean', description: '破壊的変更を許可するか' },\n        },\n      },\n    },\n    required: ['legacy_code', 'target_version', 'modernization_goals'],\n  },\n  handler: async (params: any) => {\n    logger.info('Modernizing code:', params);\n    \n    const modernizationSteps: any[] = [];\n    const language = detectLanguage(params.legacy_code);\n    \n    // モダナイゼーション目標に基づく変換\n    if (params.modernization_goals.includes('use_modern_syntax')) {\n      modernizationSteps.push({\n        step: 'Modern JavaScript Syntax',\n        transformations: [\n          {\n            name: 'Arrow Functions',\n            before: 'function(x) { return x * 2; }',\n            after: '(x) => x * 2',\n          },\n          {\n            name: 'Template Literals',\n            before: '\"Hello \" + name + \"!\"',\n            after: '`Hello ${name}!`',\n          },\n          {\n            name: 'Destructuring',\n            before: 'const name = user.name; const age = user.age;',\n            after: 'const { name, age } = user;',\n          },\n          {\n            name: 'Spread Operator',\n            before: 'arr1.concat(arr2)',\n            after: '[...arr1, ...arr2]',\n          },\n        ],\n      });\n    }\n    \n    if (params.modernization_goals.includes('async_await')) {\n      modernizationSteps.push({\n        step: 'Async/Await Migration',\n        transformations: [\n          {\n            name: 'Promise to Async/Await',\n            before: `fetchData()\n  .then(data => processData(data))\n  .then(result => console.log(result))\n  .catch(error => console.error(error));`,\n            after: `try {\n  const data = await fetchData();\n  const result = await processData(data);\n  console.log(result);\n} catch (error) {\n  console.error(error);\n}`,\n          },\n        ],\n      });\n    }\n    \n    if (params.modernization_goals.includes('add_type_annotations')) {\n      modernizationSteps.push({\n        step: 'TypeScript Migration',\n        transformations: [\n          {\n            name: 'Add Type Annotations',\n            before: 'function calculate(a, b) { return a + b; }',\n            after: 'function calculate(a: number, b: number): number { return a + b; }',\n          },\n          {\n            name: 'Interface Definition',\n            before: 'const user = { name: \"John\", age: 30 };',\n            after: `interface User {\n  name: string;\n  age: number;\n}\nconst user: User = { name: \"John\", age: 30 };`,\n          },\n        ],\n      });\n    }\n    \n    if (params.modernization_goals.includes('functional_programming')) {\n      modernizationSteps.push({\n        step: 'Functional Programming',\n        transformations: [\n          {\n            name: 'Immutable Operations',\n            before: 'arr.push(item); return arr;',\n            after: 'return [...arr, item];',\n          },\n          {\n            name: 'Pure Functions',\n            before: `let total = 0;\nfunction addToTotal(value) {\n  total += value;\n}`,\n            after: `function add(total, value) {\n  return total + value;\n}`,\n          },\n          {\n            name: 'Higher-Order Functions',\n            before: `const result = [];\nfor (let i = 0; i < arr.length; i++) {\n  if (arr[i] > 10) {\n    result.push(arr[i] * 2);\n  }\n}`,\n            after: 'const result = arr.filter(x => x > 10).map(x => x * 2);',\n          },\n        ],\n      });\n    }\n    \n    // 廃止予定機能の削除\n    if (params.modernization_goals.includes('remove_deprecated')) {\n      modernizationSteps.push({\n        step: 'Remove Deprecated Features',\n        items: [\n          'var → let/const',\n          'arguments → rest parameters (...args)',\n          'Object.assign → spread operator',\n          'callback → Promise/async-await',\n        ],\n      });\n    }\n    \n    // 互換性チェック\n    const compatibilityReport = {\n      target_version: params.target_version,\n      min_compatible_version: params.compatibility_requirements?.min_version || params.target_version,\n      breaking_changes: params.compatibility_requirements?.breaking_changes_allowed ? \n        ['ES6 modules', 'Optional chaining', 'Nullish coalescing'] : [],\n      polyfills_needed: ['Promise', 'Array.from', 'Object.entries'],\n    };\n    \n    // 移行計画\n    const migrationPlan = {\n      phases: [\n        {\n          phase: 1,\n          name: 'Syntax Modernization',\n          duration: '1週間',\n          tasks: ['Arrow functions', 'Template literals', 'Destructuring'],\n        },\n        {\n          phase: 2,\n          name: 'Type Safety',\n          duration: '2週間',\n          tasks: ['TypeScript setup', 'Type annotations', 'Interface definitions'],\n        },\n        {\n          phase: 3,\n          name: 'Async Pattern Migration',\n          duration: '1週間',\n          tasks: ['Promise to async/await', 'Error handling improvement'],\n        },\n        {\n          phase: 4,\n          name: 'Testing & Validation',\n          duration: '1週間',\n          tasks: ['Unit test updates', 'Integration testing', 'Performance validation'],\n        },\n      ],\n    };\n    \n    return {\n      success: true,\n      modernization_plan: {\n        current_version: 'ES5/Legacy',\n        target_version: params.target_version,\n        steps: modernizationSteps,\n        total_transformations: modernizationSteps.reduce((sum, step) => \n          sum + (step.transformations?.length || 0), 0),\n      },\n      compatibility_report: compatibilityReport,\n      migration_plan: migrationPlan,\n      tools_recommended: [\n        'Babel (transpilation)',\n        'TypeScript (type safety)',\n        'ESLint (code quality)',\n        'Jest (testing)',\n      ],\n      estimated_effort: '4-6週間',\n      risk_assessment: {\n        level: params.compatibility_requirements?.breaking_changes_allowed ? 'medium' : 'low',\n        mitigation: [\n          '段階的な移行',\n          '自動テストの充実',\n          'フィーチャーフラグの使用',\n          'ロールバック計画',\n        ],\n      },\n    };\n  }\n};\n\n// ヘルパー関数\nfunction calculateOverallScore(results: any): number {\n  let score = 100;\n  \n  if (results.complexity) {\n    score -= results.complexity.cyclomatic_complexity.average > 10 ? 10 : 0;\n  }\n  if (results.duplication) {\n    score -= results.duplication.duplication_percentage > 10 ? 15 : 0;\n  }\n  if (results.security) {\n    score -= results.security.vulnerabilities.high * 5;\n    score -= results.security.vulnerabilities.critical * 10;\n  }\n  \n  return Math.max(0, score);\n}\n\nfunction getGrade(score: number): string {\n  if (score >= 90) return 'A';\n  if (score >= 80) return 'B';\n  if (score >= 70) return 'C';\n  if (score >= 60) return 'D';\n  return 'F';\n}\n\nfunction countCriticalIssues(results: any): number {\n  let count = 0;\n  if (results.security) {\n    count += results.security.vulnerabilities.critical || 0;\n    count += results.security.vulnerabilities.high || 0;\n  }\n  return count;\n}\n\nfunction getTopImprovementAreas(results: any): string[] {\n  const areas = [];\n  if (results.complexity?.cyclomatic_complexity.average > 10) {\n    areas.push('複雑度の削減');\n  }\n  if (results.duplication?.duplication_percentage > 10) {\n    areas.push('重複コードの除去');\n  }\n  if (results.security?.vulnerabilities.high > 0) {\n    areas.push('セキュリティ脆弱性の修正');\n  }\n  return areas;\n}\n\nfunction generateActionPlan(results: any): any[] {\n  return [\n    {\n      priority: 'high',\n      action: 'セキュリティ脆弱性の修正',\n      timeline: '1週間以内',\n    },\n    {\n      priority: 'medium',\n      action: '高複雑度関数のリファクタリング',\n      timeline: '2週間以内',\n    },\n    {\n      priority: 'low',\n      action: 'コーディング規約の適用',\n      timeline: '1ヶ月以内',\n    },\n  ];\n}\n\nfunction detectLanguage(code: string): string {\n  if (code.includes('function') || code.includes('=>')) return 'JavaScript';\n  if (code.includes('interface') || code.includes(': string')) return 'TypeScript';\n  if (code.includes('def ') || code.includes('import ')) return 'Python';\n  return 'Unknown';\n}\n\nfunction estimateComplexity(code: string): string {\n  const lines = code.split('\\n').length;\n  if (lines < 20) return 'low';\n  if (lines < 50) return 'medium';\n  return 'high';\n}\n\nfunction detectDuplication(code: string): boolean {\n  // 簡易的な重複検出\n  const lines = code.split('\\n');\n  const lineSet = new Set(lines);\n  return lines.length - lineSet.size > 5;\n}\n\nfunction estimateRefactoringEffort(type: string): string {\n  const effortMap: Record<string, string> = {\n    'Extract Method': '2-4時間',\n    'Rename Variables': '1-2時間',\n    'Replace Conditional with Polymorphism': '4-8時間',\n    'Extract Shared Function': '2-3時間',\n    'Add TypeScript Types': '8-16時間',\n  };\n  return effortMap[type] || '要見積もり';\n}\n\nfunction getDesignPatternSuggestion(pattern: string, codeAnalysis: any): any {\n  const patterns: Record<string, any> = {\n    'Factory': {\n      type: 'Factory Pattern',\n      description: 'オブジェクト生成の抽象化',\n      applicable_when: 'オブジェクト生成ロジックが複雑',\n      benefits: ['生成ロジックの隠蔽', '柔軟性の向上'],\n    },\n    'Observer': {\n      type: 'Observer Pattern',\n      description: 'イベント駆動の実装',\n      applicable_when: '状態変化の通知が必要',\n      benefits: ['疎結合', 'イベント駆動アーキテクチャ'],\n    },\n    'Strategy': {\n      type: 'Strategy Pattern',\n      description: 'アルゴリズムの切り替え',\n      applicable_when: '実行時にアルゴリズムを選択',\n      benefits: ['柔軟性', 'テストしやすさ'],\n    },\n  };\n  return patterns[pattern];\n}\n\n// すべてのツールをエクスポート\nexport const refactorTools = [\n  analyzeCodeQualityTool,\n  suggestRefactoringTool,\n  modernizeCodeTool,\n];"],"names":[],"mappings":"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"}