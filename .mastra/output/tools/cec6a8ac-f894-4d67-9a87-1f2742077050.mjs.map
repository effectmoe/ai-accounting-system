{"version":3,"file":"cec6a8ac-f894-4d67-9a87-1f2742077050.mjs","sources":["../../../src/mastra/tools/customer-tools.ts"],"sourcesContent":["import { getDatabase } from '@/lib/mongodb-client';\nimport { logger } from '@/lib/logger';\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * 新規顧客を登録\n */\nexport const createCustomerTool = {\n  name: 'create_customer',\n  description: '新規顧客を登録します',\n  parameters: {\n    type: 'object',\n    properties: {\n      name: { type: 'string', description: '顧客名（会社名または個人名）' },\n      name_kana: { type: 'string', description: '顧客名（カナ）' },\n      email: { type: 'string', description: 'メールアドレス' },\n      phone: { type: 'string', description: '電話番号' },\n      address: { type: 'string', description: '住所' },\n      tax_id: { type: 'string', description: '法人番号または個人番号' },\n      payment_terms: { type: 'number', description: '支払条件（日数）' },\n      credit_limit: { type: 'number', description: '与信限度額' },\n      notes: { type: 'string', description: '備考' },\n    },\n    required: ['name', 'name_kana', 'email'],\n  },\n  handler: async (params: any) => {\n    logger.info('Creating customer via Mastra:', params);\n    \n    const db = await getDatabase();\n    const collection = db.collection('customers');\n    \n    // メールアドレスの重複チェック\n    if (params.email) {\n      const existing = await collection.findOne({ email: params.email });\n      if (existing) {\n        throw new Error(`メールアドレス ${params.email} は既に登録されています`);\n      }\n    }\n    \n    // 住所を分解（簡易版）\n    const addressParts = params.address ? params.address.split(/(?=市|区|町|村)/) : [];\n    \n    const customer = {\n      customerId: `CUST-${Date.now()}`,\n      companyName: params.name,\n      companyNameKana: params.name_kana,\n      email: params.email,\n      phone: params.phone,\n      fax: '',\n      taxId: params.tax_id || '',\n      postalCode: '',\n      prefecture: addressParts[0] || '',\n      city: addressParts[1] || '',\n      address1: addressParts.slice(2).join('') || '',\n      address2: '',\n      website: '',\n      paymentTerms: params.payment_terms || 30,\n      creditLimit: params.credit_limit || 0,\n      notes: params.notes || '',\n      tags: [],\n      contacts: [],\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    \n    const result = await collection.insertOne(customer);\n    \n    return {\n      success: true,\n      customer_id: result.insertedId.toString(),\n      customer_code: customer.customerId,\n      ...customer\n    };\n  }\n};\n\n/**\n * 顧客情報を更新\n */\nexport const updateCustomerTool = {\n  name: 'update_customer',\n  description: '顧客情報を更新します',\n  parameters: {\n    type: 'object',\n    properties: {\n      customer_id: { type: 'string', description: '顧客ID' },\n      updates: {\n        type: 'object',\n        description: '更新する項目',\n        properties: {\n          name: { type: 'string', description: '顧客名' },\n          email: { type: 'string', description: 'メールアドレス' },\n          phone: { type: 'string', description: '電話番号' },\n          address: { type: 'string', description: '住所' },\n          credit_limit: { type: 'number', description: '与信限度額' },\n          status: { type: 'string', enum: ['active', 'inactive', 'suspended'], description: 'ステータス' },\n        },\n      },\n    },\n    required: ['customer_id', 'updates'],\n  },\n  handler: async (params: any) => {\n    logger.info('Updating customer via Mastra:', params);\n    \n    const db = await getDatabase();\n    const collection = db.collection('customers');\n    \n    const updates: any = {\n      updatedAt: new Date()\n    };\n    \n    // 更新フィールドのマッピング\n    if (params.updates.name) updates.companyName = params.updates.name;\n    if (params.updates.email) updates.email = params.updates.email;\n    if (params.updates.phone) updates.phone = params.updates.phone;\n    if (params.updates.credit_limit !== undefined) updates.creditLimit = params.updates.credit_limit;\n    if (params.updates.status) updates.isActive = params.updates.status === 'active';\n    \n    if (params.updates.address) {\n      const addressParts = params.updates.address.split(/(?=市|区|町|村)/);\n      updates.prefecture = addressParts[0] || '';\n      updates.city = addressParts[1] || '';\n      updates.address1 = addressParts.slice(2).join('') || '';\n    }\n    \n    const result = await collection.updateOne(\n      { customerId: params.customer_id },\n      { $set: updates }\n    );\n    \n    if (result.matchedCount === 0) {\n      throw new Error(`顧客ID ${params.customer_id} が見つかりません`);\n    }\n    \n    return {\n      success: true,\n      customer_id: params.customer_id,\n      updated_fields: Object.keys(params.updates),\n      updated_at: updates.updatedAt\n    };\n  }\n};\n\n/**\n * 顧客を検索\n */\nexport const searchCustomersTool = {\n  name: 'search_customers',\n  description: '条件に基づいて顧客を検索します',\n  parameters: {\n    type: 'object',\n    properties: {\n      query: { type: 'string', description: '検索キーワード' },\n      filters: {\n        type: 'object',\n        description: 'フィルター条件',\n        properties: {\n          status: { type: 'string', enum: ['active', 'inactive', 'suspended'], description: 'ステータス' },\n          min_revenue: { type: 'number', description: '最小売上高' },\n          max_revenue: { type: 'number', description: '最大売上高' },\n          created_after: { type: 'string', description: '作成日（以降）' },\n          created_before: { type: 'string', description: '作成日（以前）' },\n        },\n      },\n      sort_by: { type: 'string', enum: ['name', 'revenue', 'created_date'], description: 'ソート項目' },\n      limit: { type: 'number', description: '取得件数' },\n    },\n    required: [],\n  },\n  handler: async (params: any) => {\n    logger.info('Searching customers via Mastra:', params);\n    \n    const db = await getDatabase();\n    const collection = db.collection('customers');\n    \n    // 検索条件の構築\n    const query: any = {};\n    \n    if (params.query) {\n      query.$or = [\n        { companyName: { $regex: params.query, $options: 'i' } },\n        { companyNameKana: { $regex: params.query, $options: 'i' } },\n        { email: { $regex: params.query, $options: 'i' } },\n        { customerId: { $regex: params.query, $options: 'i' } }\n      ];\n    }\n    \n    if (params.filters) {\n      if (params.filters.status) {\n        query.isActive = params.filters.status === 'active';\n      }\n      if (params.filters.created_after) {\n        query.createdAt = { $gte: new Date(params.filters.created_after) };\n      }\n      if (params.filters.created_before) {\n        query.createdAt = { ...query.createdAt, $lte: new Date(params.filters.created_before) };\n      }\n    }\n    \n    // ソート条件\n    const sort: any = {};\n    if (params.sort_by === 'name') {\n      sort.companyName = 1;\n    } else if (params.sort_by === 'created_date') {\n      sort.createdAt = -1;\n    } else {\n      sort.createdAt = -1;\n    }\n    \n    const customers = await collection\n      .find(query)\n      .sort(sort)\n      .limit(params.limit || 20)\n      .toArray();\n    \n    return {\n      success: true,\n      count: customers.length,\n      customers: customers.map(c => ({\n        customer_id: c.customerId,\n        name: c.companyName,\n        email: c.email,\n        phone: c.phone,\n        status: c.isActive ? 'active' : 'inactive',\n        created_at: c.createdAt\n      }))\n    };\n  }\n};\n\n/**\n * 顧客の取引履歴を分析\n */\nexport const analyzeCustomerTool = {\n  name: 'analyze_customer',\n  description: '顧客の取引履歴を分析します',\n  parameters: {\n    type: 'object',\n    properties: {\n      customer_id: { type: 'string', description: '顧客ID' },\n      analysis_type: {\n        type: 'string',\n        enum: ['transaction_history', 'revenue_trend', 'payment_behavior', 'profitability'],\n        description: '分析タイプ',\n      },\n      period_start: { type: 'string', description: '分析期間開始日' },\n      period_end: { type: 'string', description: '分析期間終了日' },\n    },\n    required: ['customer_id', 'analysis_type'],\n  },\n  handler: async (params: any) => {\n    logger.info('Analyzing customer via Mastra:', params);\n    \n    const db = await getDatabase();\n    \n    // 顧客情報を取得\n    const customer = await db.collection('customers').findOne({ customerId: params.customer_id });\n    if (!customer) {\n      throw new Error(`顧客ID ${params.customer_id} が見つかりません`);\n    }\n    \n    const startDate = params.period_start ? new Date(params.period_start) : new Date(Date.now() - 365 * 24 * 60 * 60 * 1000);\n    const endDate = params.period_end ? new Date(params.period_end) : new Date();\n    \n    // 請求書データを取得\n    const invoices = await db.collection('invoices').find({\n      customerName: customer.companyName,\n      issueDate: { $gte: startDate, $lte: endDate }\n    }).toArray();\n    \n    let analysisResult: any = {\n      customer_id: params.customer_id,\n      customer_name: customer.companyName,\n      analysis_type: params.analysis_type,\n      period: {\n        start: startDate,\n        end: endDate\n      }\n    };\n    \n    switch (params.analysis_type) {\n      case 'transaction_history':\n        analysisResult.transactions = invoices.map(inv => ({\n          invoice_number: inv.invoiceNumber,\n          date: inv.issueDate,\n          amount: inv.totalAmount,\n          status: inv.status,\n          due_date: inv.dueDate\n        }));\n        analysisResult.total_transactions = invoices.length;\n        analysisResult.total_amount = invoices.reduce((sum, inv) => sum + (inv.totalAmount || 0), 0);\n        break;\n        \n      case 'revenue_trend':\n        const monthlyRevenue: Record<string, number> = {};\n        invoices.forEach(inv => {\n          const month = new Date(inv.issueDate).toISOString().substring(0, 7);\n          monthlyRevenue[month] = (monthlyRevenue[month] || 0) + (inv.totalAmount || 0);\n        });\n        \n        analysisResult.monthly_revenue = monthlyRevenue;\n        analysisResult.average_monthly_revenue = \n          Object.values(monthlyRevenue).reduce((sum, val) => sum + val, 0) / Object.keys(monthlyRevenue).length;\n        analysisResult.trend = Object.values(monthlyRevenue).length > 1 \n          ? (Object.values(monthlyRevenue)[Object.values(monthlyRevenue).length - 1] > Object.values(monthlyRevenue)[0] ? 'increasing' : 'decreasing')\n          : 'stable';\n        break;\n        \n      case 'payment_behavior':\n        const paidInvoices = invoices.filter(inv => inv.status === 'paid');\n        const unpaidInvoices = invoices.filter(inv => inv.status === 'unpaid');\n        const overdueInvoices = invoices.filter(inv => \n          inv.status === 'unpaid' && new Date(inv.dueDate) < new Date()\n        );\n        \n        analysisResult.payment_stats = {\n          total_invoices: invoices.length,\n          paid_invoices: paidInvoices.length,\n          unpaid_invoices: unpaidInvoices.length,\n          overdue_invoices: overdueInvoices.length,\n          payment_rate: invoices.length > 0 ? (paidInvoices.length / invoices.length * 100).toFixed(2) + '%' : '0%',\n          average_payment_days: customer.paymentTerms || 30\n        };\n        break;\n        \n      case 'profitability':\n        const totalRevenue = invoices.reduce((sum, inv) => sum + (inv.totalAmount || 0), 0);\n        const estimatedCost = totalRevenue * 0.6; // 仮の原価率60%\n        const estimatedProfit = totalRevenue - estimatedCost;\n        \n        analysisResult.profitability = {\n          total_revenue: totalRevenue,\n          estimated_cost: estimatedCost,\n          estimated_profit: estimatedProfit,\n          profit_margin: totalRevenue > 0 ? (estimatedProfit / totalRevenue * 100).toFixed(2) + '%' : '0%',\n          customer_rank: estimatedProfit > 1000000 ? 'A' : estimatedProfit > 500000 ? 'B' : 'C'\n        };\n        break;\n    }\n    \n    return {\n      success: true,\n      analysis: analysisResult\n    };\n  }\n};\n\n/**\n * 顧客生涯価値（CLV）を計算\n */\nexport const calculateCustomerLifetimeValueTool = {\n  name: 'calculate_customer_lifetime_value',\n  description: '顧客生涯価値（CLV）を計算します',\n  parameters: {\n    type: 'object',\n    properties: {\n      customer_id: { type: 'string', description: '顧客ID' },\n      projection_years: { type: 'number', description: '予測年数' },\n      discount_rate: { type: 'number', description: '割引率' },\n    },\n    required: ['customer_id'],\n  },\n  handler: async (params: any) => {\n    logger.info('Calculating customer lifetime value via Mastra:', params);\n    \n    const db = await getDatabase();\n    \n    // 顧客情報を取得\n    const customer = await db.collection('customers').findOne({ customerId: params.customer_id });\n    if (!customer) {\n      throw new Error(`顧客ID ${params.customer_id} が見つかりません`);\n    }\n    \n    // 過去の取引履歴を取得\n    const invoices = await db.collection('invoices').find({\n      customerName: customer.companyName\n    }).toArray();\n    \n    // 年間平均売上を計算\n    const firstInvoiceDate = invoices.reduce((min, inv) => \n      inv.issueDate < min ? inv.issueDate : min, \n      invoices[0]?.issueDate || new Date()\n    );\n    const lastInvoiceDate = invoices.reduce((max, inv) => \n      inv.issueDate > max ? inv.issueDate : max, \n      invoices[0]?.issueDate || new Date()\n    );\n    \n    const yearsActive = Math.max(1, (lastInvoiceDate.getTime() - firstInvoiceDate.getTime()) / (365 * 24 * 60 * 60 * 1000));\n    const totalRevenue = invoices.reduce((sum, inv) => sum + (inv.totalAmount || 0), 0);\n    const annualRevenue = totalRevenue / yearsActive;\n    \n    // CLVを計算\n    const projectionYears = params.projection_years || 5;\n    const discountRate = params.discount_rate || 0.1;\n    let clv = 0;\n    \n    for (let year = 1; year <= projectionYears; year++) {\n      const discountedValue = annualRevenue / Math.pow(1 + discountRate, year);\n      clv += discountedValue;\n    }\n    \n    return {\n      success: true,\n      customer_id: params.customer_id,\n      customer_name: customer.companyName,\n      calculation: {\n        historical_data: {\n          total_revenue: totalRevenue,\n          years_active: yearsActive.toFixed(1),\n          annual_revenue: annualRevenue,\n          transaction_count: invoices.length\n        },\n        projection: {\n          years: projectionYears,\n          discount_rate: (discountRate * 100).toFixed(2) + '%',\n          clv: Math.round(clv),\n          clv_formatted: '¥' + Math.round(clv).toLocaleString()\n        }\n      }\n    };\n  }\n};\n\n/**\n * 顧客レポートを生成\n */\nexport const generateCustomerReportTool = {\n  name: 'generate_customer_report',\n  description: '顧客レポートを生成します',\n  parameters: {\n    type: 'object',\n    properties: {\n      report_type: {\n        type: 'string',\n        enum: ['summary', 'detailed', 'segment_analysis', 'top_customers'],\n        description: 'レポートタイプ',\n      },\n      period_start: { type: 'string', description: '期間開始日' },\n      period_end: { type: 'string', description: '期間終了日' },\n      format: { type: 'string', enum: ['pdf', 'excel', 'json'], description: '出力形式' },\n    },\n    required: ['report_type', 'period_start', 'period_end'],\n  },\n  handler: async (params: any) => {\n    logger.info('Generating customer report via Mastra:', params);\n    \n    const db = await getDatabase();\n    const startDate = new Date(params.period_start);\n    const endDate = new Date(params.period_end);\n    \n    let reportData: any = {\n      report_type: params.report_type,\n      period: {\n        start: startDate,\n        end: endDate\n      },\n      generated_at: new Date()\n    };\n    \n    switch (params.report_type) {\n      case 'summary':\n        const customers = await db.collection('customers').find({}).toArray();\n        const activeCustomers = customers.filter(c => c.isActive);\n        \n        reportData.summary = {\n          total_customers: customers.length,\n          active_customers: activeCustomers.length,\n          inactive_customers: customers.length - activeCustomers.length,\n          new_customers_period: customers.filter(c => \n            c.createdAt >= startDate && c.createdAt <= endDate\n          ).length\n        };\n        break;\n        \n      case 'top_customers':\n        // 期間内の売上でトップ顧客を取得\n        const invoices = await db.collection('invoices').find({\n          issueDate: { $gte: startDate, $lte: endDate }\n        }).toArray();\n        \n        const customerRevenue: Record<string, number> = {};\n        invoices.forEach(inv => {\n          const customerName = inv.customerName || 'Unknown';\n          customerRevenue[customerName] = (customerRevenue[customerName] || 0) + (inv.totalAmount || 0);\n        });\n        \n        reportData.top_customers = Object.entries(customerRevenue)\n          .sort(([,a], [,b]) => b - a)\n          .slice(0, 10)\n          .map(([name, revenue], index) => ({\n            rank: index + 1,\n            customer_name: name,\n            revenue: revenue,\n            revenue_formatted: '¥' + revenue.toLocaleString()\n          }));\n        break;\n        \n      case 'segment_analysis':\n        const allCustomers = await db.collection('customers').find({}).toArray();\n        \n        // 地域別セグメント\n        const prefectureSegment: Record<string, number> = {};\n        allCustomers.forEach(c => {\n          const prefecture = c.prefecture || '不明';\n          prefectureSegment[prefecture] = (prefectureSegment[prefecture] || 0) + 1;\n        });\n        \n        reportData.segments = {\n          by_prefecture: prefectureSegment,\n          by_payment_terms: {\n            immediate: allCustomers.filter(c => c.paymentTerms === 0).length,\n            net_30: allCustomers.filter(c => c.paymentTerms === 30).length,\n            net_60: allCustomers.filter(c => c.paymentTerms === 60).length,\n            other: allCustomers.filter(c => c.paymentTerms && c.paymentTerms !== 0 && c.paymentTerms !== 30 && c.paymentTerms !== 60).length\n          }\n        };\n        break;\n    }\n    \n    // レポートを保存\n    const reportsCollection = db.collection('customer_reports');\n    const result = await reportsCollection.insertOne(reportData);\n    \n    return {\n      success: true,\n      report_id: result.insertedId.toString(),\n      report: reportData,\n      format: params.format || 'json'\n    };\n  }\n};\n\n// すべてのツールをエクスポート\nexport const customerTools = [\n  createCustomerTool,\n  updateCustomerTool,\n  searchCustomersTool,\n  analyzeCustomerTool,\n  calculateCustomerLifetimeValueTool,\n  generateCustomerReportTool\n];"],"names":[],"mappings":"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"}