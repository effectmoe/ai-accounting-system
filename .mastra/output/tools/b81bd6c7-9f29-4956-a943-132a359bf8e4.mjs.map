{"version":3,"file":"b81bd6c7-9f29-4956-a943-132a359bf8e4.mjs","sources":["../../../src/mastra/tools/database-tools.ts"],"sourcesContent":["import { getDatabase } from '@/lib/mongodb-client';\nimport { logger } from '@/lib/logger';\nimport { ObjectId } from 'mongodb';\n\n/**\n * MongoDBクエリを実行\n */\nexport const executeQueryTool = {\n  name: 'execute_query',\n  description: 'MongoDBクエリを実行します',\n  parameters: {\n    type: 'object',\n    properties: {\n      collection: { type: 'string', description: 'コレクション名' },\n      operation: {\n        type: 'string',\n        enum: ['find', 'findOne', 'insertOne', 'insertMany', 'updateOne', 'updateMany', 'deleteOne', 'deleteMany'],\n        description: '操作タイプ',\n      },\n      query: { type: 'object', description: 'クエリ条件' },\n      update: { type: 'object', description: '更新内容（update操作時）' },\n      options: { type: 'object', description: 'オプション（sort, limit, skipなど）' },\n    },\n    required: ['collection', 'operation'],\n  },\n  handler: async (params: any) => {\n    logger.info('Executing MongoDB query:', params);\n    \n    const db = await getDatabase();\n    const collection = db.collection(params.collection);\n    \n    let result: any;\n    \n    try {\n      switch (params.operation) {\n        case 'find':\n          const cursor = collection.find(params.query || {});\n          if (params.options?.sort) cursor.sort(params.options.sort);\n          if (params.options?.limit) cursor.limit(params.options.limit);\n          if (params.options?.skip) cursor.skip(params.options.skip);\n          result = await cursor.toArray();\n          break;\n          \n        case 'findOne':\n          result = await collection.findOne(params.query || {}, params.options);\n          break;\n          \n        case 'insertOne':\n          result = await collection.insertOne({\n            ...params.query,\n            created_at: new Date(),\n            updated_at: new Date(),\n          });\n          break;\n          \n        case 'insertMany':\n          const documents = params.query.map((doc: any) => ({\n            ...doc,\n            created_at: new Date(),\n            updated_at: new Date(),\n          }));\n          result = await collection.insertMany(documents);\n          break;\n          \n        case 'updateOne':\n          result = await collection.updateOne(\n            params.query || {},\n            { \n              $set: {\n                ...params.update,\n                updated_at: new Date(),\n              }\n            },\n            params.options\n          );\n          break;\n          \n        case 'updateMany':\n          result = await collection.updateMany(\n            params.query || {},\n            { \n              $set: {\n                ...params.update,\n                updated_at: new Date(),\n              }\n            },\n            params.options\n          );\n          break;\n          \n        case 'deleteOne':\n          result = await collection.deleteOne(params.query || {});\n          break;\n          \n        case 'deleteMany':\n          result = await collection.deleteMany(params.query || {});\n          break;\n      }\n      \n      return {\n        success: true,\n        operation: params.operation,\n        collection: params.collection,\n        result: result,\n        timestamp: new Date(),\n      };\n    } catch (error: any) {\n      logger.error('Query execution failed:', error);\n      return {\n        success: false,\n        error: error.message,\n        operation: params.operation,\n        collection: params.collection,\n      };\n    }\n  }\n};\n\n/**\n * 集計パイプラインを作成・実行\n */\nexport const createAggregationPipelineTool = {\n  name: 'create_aggregation_pipeline',\n  description: '集計パイプラインを作成・実行します',\n  parameters: {\n    type: 'object',\n    properties: {\n      collection: { type: 'string', description: 'コレクション名' },\n      pipeline: {\n        type: 'array',\n        description: '集計パイプラインステージ',\n        items: { type: 'object' },\n      },\n      output_collection: { type: 'string', description: '出力先コレクション（オプション）' },\n    },\n    required: ['collection', 'pipeline'],\n  },\n  handler: async (params: any) => {\n    logger.info('Creating aggregation pipeline:', params);\n    \n    const db = await getDatabase();\n    const collection = db.collection(params.collection);\n    \n    try {\n      let pipeline = params.pipeline;\n      \n      // 出力先コレクションが指定されている場合\n      if (params.output_collection) {\n        pipeline.push({\n          $out: params.output_collection\n        });\n      }\n      \n      const result = await collection.aggregate(pipeline).toArray();\n      \n      return {\n        success: true,\n        collection: params.collection,\n        pipeline_stages: pipeline.length,\n        result_count: result.length,\n        results: result,\n        output_collection: params.output_collection,\n      };\n    } catch (error: any) {\n      logger.error('Aggregation pipeline failed:', error);\n      return {\n        success: false,\n        error: error.message,\n        collection: params.collection,\n      };\n    }\n  }\n};\n\n/**\n * データベースパフォーマンスを分析\n */\nexport const analyzePerformanceTool = {\n  name: 'analyze_performance',\n  description: 'データベースパフォーマンスを分析します',\n  parameters: {\n    type: 'object',\n    properties: {\n      analysis_type: {\n        type: 'string',\n        enum: ['slow_queries', 'index_usage', 'collection_stats', 'storage_stats'],\n        description: '分析タイプ',\n      },\n      time_range: { type: 'string', description: '分析期間' },\n      threshold_ms: { type: 'number', description: 'スロークエリ閾値（ミリ秒）' },\n    },\n    required: ['analysis_type'],\n  },\n  handler: async (params: any) => {\n    logger.info('Analyzing database performance:', params);\n    \n    const db = await getDatabase();\n    const adminDb = db.admin();\n    \n    let analysisResult: any = {\n      analysis_type: params.analysis_type,\n      timestamp: new Date(),\n    };\n    \n    try {\n      switch (params.analysis_type) {\n        case 'slow_queries':\n          // スロークエリの分析（実際の実装では MongoDB のプロファイリング結果を使用）\n          const threshold = params.threshold_ms || 100;\n          analysisResult.slow_queries = [\n            {\n              query: { collection: 'invoices', filter: { status: 'pending' } },\n              execution_time_ms: 250,\n              documents_examined: 10000,\n              documents_returned: 50,\n              recommendation: 'status フィールドにインデックスを作成してください',\n            },\n            {\n              query: { collection: 'customers', filter: { email: /.*@example.com/ } },\n              execution_time_ms: 180,\n              documents_examined: 5000,\n              documents_returned: 10,\n              recommendation: '正規表現検索の代わりにテキストインデックスの使用を検討してください',\n            },\n          ];\n          analysisResult.threshold_ms = threshold;\n          break;\n          \n        case 'index_usage':\n          // インデックス使用状況の分析\n          const collections = await db.listCollections().toArray();\n          analysisResult.index_stats = [];\n          \n          for (const coll of collections) {\n            const indexes = await db.collection(coll.name).indexes();\n            const stats = await db.collection(coll.name).stats();\n            \n            analysisResult.index_stats.push({\n              collection: coll.name,\n              total_indexes: indexes.length,\n              index_size: stats.totalIndexSize,\n              unused_indexes: [], // 実際の実装では $indexStats を使用\n              recommendations: indexes.length > 10 ? ['インデックスが多すぎます。使用されていないインデックスを削除してください'] : [],\n            });\n          }\n          break;\n          \n        case 'collection_stats':\n          // コレクション統計の分析\n          const collectionList = await db.listCollections().toArray();\n          analysisResult.collections = [];\n          \n          for (const coll of collectionList) {\n            const stats = await db.collection(coll.name).stats();\n            analysisResult.collections.push({\n              name: coll.name,\n              document_count: stats.count,\n              avg_document_size: stats.avgObjSize,\n              total_size: stats.size,\n              storage_size: stats.storageSize,\n              index_count: stats.nindexes,\n            });\n          }\n          break;\n          \n        case 'storage_stats':\n          // ストレージ統計の分析\n          const dbStats = await db.stats();\n          analysisResult.storage = {\n            database_size: dbStats.dataSize,\n            storage_size: dbStats.storageSize,\n            index_size: dbStats.indexSize,\n            collections: dbStats.collections,\n            objects: dbStats.objects,\n            avg_obj_size: dbStats.avgObjSize,\n            free_storage_size: dbStats.freeStorageSize || 0,\n          };\n          break;\n      }\n      \n      analysisResult.success = true;\n      return analysisResult;\n    } catch (error: any) {\n      logger.error('Performance analysis failed:', error);\n      return {\n        success: false,\n        error: error.message,\n        analysis_type: params.analysis_type,\n      };\n    }\n  }\n};\n\n// すべてのツールをエクスポート\nexport const databaseTools = [\n  executeQueryTool,\n  createAggregationPipelineTool,\n  analyzePerformanceTool,\n];"],"names":[],"mappings":"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"}