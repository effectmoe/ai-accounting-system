{"version":3,"file":"12105a5a-9dd3-442b-b462-67a04361b4d9.mjs","sources":["../../../src/mastra/tools/deployment-tools.ts"],"sourcesContent":["import { getDatabase } from '@/lib/mongodb-client';\nimport { logger } from '@/lib/logger';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\n/**\n * デプロイメントパイプラインを作成\n */\nexport const createDeploymentPipelineTool = {\n  name: 'create_deployment_pipeline',\n  description: 'デプロイメントパイプラインを作成します',\n  parameters: {\n    type: 'object',\n    properties: {\n      pipeline_name: { type: 'string', description: 'パイプライン名' },\n      platform: {\n        type: 'string',\n        enum: ['github-actions', 'gitlab-ci', 'jenkins', 'circleci', 'azure-devops'],\n        description: 'CI/CDプラットフォーム',\n      },\n      stages: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: { type: 'string', description: 'ステージ名' },\n            steps: { type: 'array', items: { type: 'object' }, description: 'ステップ' },\n            conditions: { type: 'object', description: '実行条件' },\n          },\n        },\n        description: 'パイプラインステージ',\n      },\n      triggers: { type: 'array', items: { type: 'string' }, description: 'トリガー条件' },\n    },\n    required: ['pipeline_name', 'platform', 'stages'],\n  },\n  handler: async (params: any) => {\n    logger.info('Creating deployment pipeline:', params);\n    \n    const db = await getDatabase();\n    const collection = db.collection('deployment_pipelines');\n    \n    let pipelineConfig: any = {\n      name: params.pipeline_name,\n      platform: params.platform,\n      stages: params.stages,\n      triggers: params.triggers || ['push', 'pull_request'],\n      created_at: new Date(),\n      updated_at: new Date(),\n    };\n    \n    // プラットフォームに応じた設定ファイルを生成\n    let configFile: string = '';\n    \n    if (params.platform === 'github-actions') {\n      configFile = generateGitHubActionsConfig(params);\n      pipelineConfig.config_file_path = '.github/workflows/deploy.yml';\n    } else if (params.platform === 'gitlab-ci') {\n      configFile = generateGitLabCIConfig(params);\n      pipelineConfig.config_file_path = '.gitlab-ci.yml';\n    }\n    \n    pipelineConfig.config_content = configFile;\n    \n    const result = await collection.insertOne(pipelineConfig);\n    \n    return {\n      success: true,\n      pipeline_id: result.insertedId.toString(),\n      pipeline_name: params.pipeline_name,\n      platform: params.platform,\n      config_file: configFile,\n      setup_instructions: [\n        `1. 設定ファイルを ${pipelineConfig.config_file_path} に保存してください`,\n        '2. リポジトリにコミット・プッシュしてください',\n        '3. CI/CDプラットフォームで必要な環境変数を設定してください',\n      ],\n    };\n  }\n};\n\n/**\n * アプリケーションをデプロイ\n */\nexport const deployApplicationTool = {\n  name: 'deploy_application',\n  description: 'アプリケーションをデプロイします',\n  parameters: {\n    type: 'object',\n    properties: {\n      application_name: { type: 'string', description: 'アプリケーション名' },\n      environment: {\n        type: 'string',\n        enum: ['development', 'staging', 'production'],\n        description: 'デプロイ環境',\n      },\n      deployment_type: {\n        type: 'string',\n        enum: ['rolling', 'blue-green', 'canary', 'recreate'],\n        description: 'デプロイ方式',\n      },\n      version: { type: 'string', description: 'バージョン' },\n      rollback_enabled: { type: 'boolean', description: 'ロールバック機能を有効にするか' },\n    },\n    required: ['application_name', 'environment', 'deployment_type', 'version'],\n  },\n  handler: async (params: any) => {\n    logger.info('Deploying application:', params);\n    \n    const db = await getDatabase();\n    const deploymentsCollection = db.collection('deployments');\n    \n    const deployment = {\n      application_name: params.application_name,\n      environment: params.environment,\n      deployment_type: params.deployment_type,\n      version: params.version,\n      rollback_enabled: params.rollback_enabled ?? true,\n      status: 'in_progress',\n      started_at: new Date(),\n      deployment_id: `DEPLOY-${Date.now()}`,\n    };\n    \n    const result = await deploymentsCollection.insertOne(deployment);\n    \n    // デプロイプロセスのシミュレーション\n    const deploymentSteps = [\n      { step: 'pre-deployment-checks', status: 'completed' },\n      { step: 'backup-current-version', status: 'completed' },\n      { step: 'deploy-new-version', status: 'completed' },\n      { step: 'health-checks', status: 'completed' },\n      { step: 'update-load-balancer', status: 'completed' },\n    ];\n    \n    // デプロイメント完了の更新\n    await deploymentsCollection.updateOne(\n      { _id: result.insertedId },\n      {\n        $set: {\n          status: 'completed',\n          completed_at: new Date(),\n          deployment_steps: deploymentSteps,\n        }\n      }\n    );\n    \n    return {\n      success: true,\n      deployment_id: deployment.deployment_id,\n      status: 'completed',\n      deployment_url: `https://${params.environment}.${params.application_name}.example.com`,\n      monitoring_url: `https://monitoring.example.com/deployments/${deployment.deployment_id}`,\n      rollback_command: `deploy rollback ${deployment.deployment_id}`,\n      deployment_summary: {\n        application: params.application_name,\n        environment: params.environment,\n        version: params.version,\n        deployment_type: params.deployment_type,\n        duration_seconds: 180,\n      },\n    };\n  }\n};\n\n/**\n * デプロイメントをロールバック\n */\nexport const rollbackDeploymentTool = {\n  name: 'rollback_deployment',\n  description: 'デプロイメントをロールバックします',\n  parameters: {\n    type: 'object',\n    properties: {\n      deployment_id: { type: 'string', description: 'デプロイメントID' },\n      target_version: { type: 'string', description: 'ロールバック先バージョン' },\n      strategy: {\n        type: 'string',\n        enum: ['immediate', 'gradual', 'manual'],\n        description: 'ロールバック戦略',\n      },\n      reason: { type: 'string', description: 'ロールバック理由' },\n    },\n    required: ['deployment_id', 'target_version', 'strategy', 'reason'],\n  },\n  handler: async (params: any) => {\n    logger.info('Rolling back deployment:', params);\n    \n    const db = await getDatabase();\n    const deploymentsCollection = db.collection('deployments');\n    const rollbacksCollection = db.collection('rollbacks');\n    \n    // 元のデプロイメント情報を取得\n    const originalDeployment = await deploymentsCollection.findOne({\n      deployment_id: params.deployment_id\n    });\n    \n    if (!originalDeployment) {\n      return {\n        success: false,\n        error: `Deployment ${params.deployment_id} not found`,\n      };\n    }\n    \n    const rollback = {\n      original_deployment_id: params.deployment_id,\n      target_version: params.target_version,\n      strategy: params.strategy,\n      reason: params.reason,\n      rollback_id: `ROLLBACK-${Date.now()}`,\n      status: 'in_progress',\n      started_at: new Date(),\n      application_name: originalDeployment.application_name,\n      environment: originalDeployment.environment,\n    };\n    \n    const result = await rollbacksCollection.insertOne(rollback);\n    \n    // ロールバックプロセスのシミュレーション\n    const rollbackSteps = [\n      { step: 'verify-target-version', status: 'completed' },\n      { step: 'prepare-rollback', status: 'completed' },\n      { step: 'switch-traffic', status: 'completed' },\n      { step: 'verify-rollback', status: 'completed' },\n      { step: 'cleanup', status: 'completed' },\n    ];\n    \n    // ロールバック完了の更新\n    await rollbacksCollection.updateOne(\n      { _id: result.insertedId },\n      {\n        $set: {\n          status: 'completed',\n          completed_at: new Date(),\n          rollback_steps: rollbackSteps,\n        }\n      }\n    );\n    \n    // 元のデプロイメントのステータスを更新\n    await deploymentsCollection.updateOne(\n      { deployment_id: params.deployment_id },\n      {\n        $set: {\n          status: 'rolled_back',\n          rolled_back_at: new Date(),\n          rollback_id: rollback.rollback_id,\n        }\n      }\n    );\n    \n    return {\n      success: true,\n      rollback_id: rollback.rollback_id,\n      status: 'completed',\n      original_deployment: params.deployment_id,\n      target_version: params.target_version,\n      rollback_summary: {\n        duration_seconds: 120,\n        strategy: params.strategy,\n        reason: params.reason,\n        affected_environment: originalDeployment.environment,\n      },\n      post_rollback_actions: [\n        'インシデントレポートの作成',\n        'ロールバック原因の根本分析',\n        '再デプロイ計画の策定',\n      ],\n    };\n  }\n};\n\n// ヘルパー関数\nfunction generateGitHubActionsConfig(params: any): string {\n  const stages = params.stages.map((stage: any) => {\n    const steps = stage.steps.map((step: any) => `      - name: ${step.name}\n        run: ${step.command || 'echo \"Step implementation needed\"'}`).join('\\n');\n    \n    return `  ${stage.name}:\n    runs-on: ubuntu-latest\n    steps:\n${steps}`;\n  }).join('\\n\\n');\n  \n  return `name: ${params.pipeline_name}\n\non:\n  ${params.triggers.map((t: string) => t).join('\\n  ')}\n\njobs:\n${stages}`;\n}\n\nfunction generateGitLabCIConfig(params: any): string {\n  const stages = params.stages.map((stage: any) => stage.name);\n  const jobs = params.stages.map((stage: any) => {\n    const scripts = stage.steps.map((step: any) => `    - ${step.command || 'echo \"Step implementation needed\"'}`).join('\\n');\n    \n    return `${stage.name}:\n  stage: ${stage.name}\n  script:\n${scripts}`;\n  }).join('\\n\\n');\n  \n  return `stages:\n  ${stages.map(s => `- ${s}`).join('\\n  ')}\n\n${jobs}`;\n}\n\n// すべてのツールをエクスポート\nexport const deploymentTools = [\n  createDeploymentPipelineTool,\n  deployApplicationTool,\n  rollbackDeploymentTool,\n];"],"names":[],"mappings":"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"}