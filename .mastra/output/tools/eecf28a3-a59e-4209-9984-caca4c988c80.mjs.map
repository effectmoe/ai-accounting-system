{"version":3,"file":"eecf28a3-a59e-4209-9984-caca4c988c80.mjs","sources":["../../../services/company-info.service.ts","../../../services/invoice.service.ts","../../../src/mastra/tools/accounting-tools.ts"],"sourcesContent":["import { db, Collections } from '@/lib/mongodb-client';\nimport { ObjectId } from 'mongodb';\nimport { SpeechSettings } from '@/types/collections';\n\nimport { logger } from '@/lib/logger';\nexport interface CompanyInfo {\n  _id?: ObjectId;\n  companyName: string;\n  registrationNumber?: string;\n  postalCode?: string;\n  prefecture?: string;\n  city?: string;\n  address1?: string;\n  address2?: string;\n  phone?: string;\n  fax?: string;\n  email?: string;\n  website?: string;\n  fiscalYearEnd?: string;\n  invoiceNumberFormat?: string;\n  invoicePrefix?: string;\n  paymentTerms?: string;\n  invoiceNotes?: string;\n  logoUrl?: string;\n  logoImage?: string;\n  stampImage?: string;\n  representative?: string;\n  establishedDate?: string;\n  capital?: number;\n  quoteValidityDays?: number;\n  speechSettings?: SpeechSettings;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport class CompanyInfoService {\n  private collectionName = Collections.COMPANY_INFO;\n\n  /**\n   * 会社情報を取得（最初の1件）\n   */\n  async getCompanyInfo(): Promise<CompanyInfo | null> {\n    try {\n      const companies = await db.find<CompanyInfo>(this.collectionName, {}, { limit: 1 });\n      return companies.length > 0 ? companies[0] : null;\n    } catch (error) {\n      logger.error('Error in getCompanyInfo:', error);\n      throw new Error('会社情報の取得に失敗しました');\n    }\n  }\n\n  /**\n   * 会社情報を作成または更新（アップサート）\n   */\n  async upsertCompanyInfo(companyData: Omit<CompanyInfo, '_id' | 'createdAt' | 'updatedAt'>): Promise<CompanyInfo> {\n    try {\n      logger.debug('upsertCompanyInfo called with data:', {\n        ...companyData,\n        logoImage: companyData.logoImage ? '[BASE64_IMAGE]' : null,\n        stampImage: companyData.stampImage ? '[BASE64_IMAGE]' : null,\n      });\n\n      // 既存の会社情報を取得\n      const existingInfo = await this.getCompanyInfo();\n      logger.debug('Existing company info found:', !!existingInfo);\n\n      if (existingInfo && existingInfo._id) {\n        // 更新\n        logger.debug('Updating existing company info with ID:', existingInfo._id);\n        \n        // _idフィールドを除外して更新データを準備\n        const { _id, createdAt, updatedAt, ...updateData } = { ...companyData } as any;\n        logger.debug('Update data prepared:', {\n          ...updateData,\n          logoImage: updateData.logoImage ? '[BASE64_IMAGE]' : null,\n          stampImage: updateData.stampImage ? '[BASE64_IMAGE]' : null,\n        });\n        \n        const updated = await db.update<CompanyInfo>(\n          this.collectionName,\n          existingInfo._id,\n          updateData\n        );\n        \n        if (!updated) {\n          throw new Error('会社情報の更新に失敗しました');\n        }\n        \n        logger.debug('Company info updated successfully');\n        return updated;\n      } else {\n        // 新規作成\n        logger.debug('Creating new company info');\n        const created = await db.create<CompanyInfo>(this.collectionName, companyData);\n        logger.debug('Company info created successfully');\n        return created;\n      }\n    } catch (error) {\n      logger.error('Error in upsertCompanyInfo:', error);\n      throw new Error('会社情報の保存に失敗しました');\n    }\n  }\n\n  /**\n   * 会社情報を更新\n   */\n  async updateCompanyInfo(updateData: Partial<CompanyInfo>): Promise<CompanyInfo | null> {\n    try {\n      const existingInfo = await this.getCompanyInfo();\n      \n      if (!existingInfo || !existingInfo._id) {\n        throw new Error('更新する会社情報が見つかりません');\n      }\n\n      // _idフィールドは更新対象から除外\n      const { _id, ...dataToUpdate } = updateData;\n\n      const updated = await db.update<CompanyInfo>(\n        this.collectionName,\n        existingInfo._id,\n        dataToUpdate\n      );\n\n      return updated;\n    } catch (error) {\n      logger.error('Error in updateCompanyInfo:', error);\n      throw new Error('会社情報の更新に失敗しました');\n    }\n  }\n\n  /**\n   * 会社情報を削除\n   */\n  async deleteCompanyInfo(): Promise<boolean> {\n    try {\n      const existingInfo = await this.getCompanyInfo();\n      \n      if (!existingInfo || !existingInfo._id) {\n        return false;\n      }\n\n      return await db.delete(this.collectionName, existingInfo._id);\n    } catch (error) {\n      logger.error('Error in deleteCompanyInfo:', error);\n      throw new Error('会社情報の削除に失敗しました');\n    }\n  }\n\n  /**\n   * 請求書番号を生成\n   */\n  async generateInvoiceNumber(): Promise<string> {\n    try {\n      const companyInfo = await this.getCompanyInfo();\n      const format = companyInfo?.invoiceNumberFormat || 'INV-{YYYY}{MM}{DD}-{SEQ}';\n      \n      const now = new Date();\n      const year = now.getFullYear().toString();\n      const month = (now.getMonth() + 1).toString().padStart(2, '0');\n      const day = now.getDate().toString().padStart(2, '0');\n      \n      // シーケンス番号を取得（今日の請求書数 + 1）\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      const tomorrow = new Date(today);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      \n      const invoiceCount = await db.count(Collections.INVOICES, {\n        createdAt: {\n          $gte: today,\n          $lt: tomorrow\n        }\n      });\n      \n      const seq = (invoiceCount + 1).toString().padStart(3, '0');\n      \n      // フォーマットに従って請求書番号を生成\n      const invoiceNumber = format\n        .replace('{YYYY}', year)\n        .replace('{YY}', year.slice(-2))\n        .replace('{MM}', month)\n        .replace('{DD}', day)\n        .replace('{SEQ}', seq);\n      \n      return invoiceNumber;\n    } catch (error) {\n      logger.error('Error in generateInvoiceNumber:', error);\n      // エラーの場合はデフォルトフォーマットで生成\n      const timestamp = new Date().getTime();\n      return `INV-${timestamp}`;\n    }\n  }\n}","import { db, Collections } from '@/lib/mongodb-client';\nimport { ObjectId } from 'mongodb';\nimport { Invoice, InvoiceStatus, InvoiceItem, Customer, BankAccount } from '@/types/collections';\nimport { CompanyInfoService } from './company-info.service';\n\nimport { logger } from '@/lib/logger';\nexport interface InvoiceSearchParams {\n  customerId?: string;\n  status?: InvoiceStatus;\n  dateFrom?: Date;\n  dateTo?: Date;\n  isGeneratedByAI?: boolean;\n  limit?: number;\n  skip?: number;\n}\n\nexport interface InvoiceSearchResult {\n  invoices: Invoice[];\n  total: number;\n  hasMore: boolean;\n}\n\nexport class InvoiceService {\n  private collectionName = Collections.INVOICES;\n\n  /**\n   * 請求書を検索\n   */\n  async searchInvoices(params: InvoiceSearchParams): Promise<InvoiceSearchResult> {\n    try {\n      const filter: any = {};\n\n      if (params.customerId) {\n        filter.customerId = new ObjectId(params.customerId);\n      }\n\n      if (params.status) {\n        filter.status = params.status;\n      }\n\n      if (params.dateFrom || params.dateTo) {\n        filter.issueDate = {};\n        if (params.dateFrom) {\n          filter.issueDate.$gte = params.dateFrom;\n        }\n        if (params.dateTo) {\n          filter.issueDate.$lte = params.dateTo;\n        }\n      }\n\n      if (params.isGeneratedByAI !== undefined) {\n        filter.isGeneratedByAI = params.isGeneratedByAI;\n      }\n\n      const limit = params.limit || 20;\n      const skip = params.skip || 0;\n\n      // 請求書を取得\n      const invoices = await db.find<Invoice>(this.collectionName, filter, {\n        sort: { issueDate: -1, invoiceNumber: -1 },\n        limit: limit + 1, // hasMoreを判定するため1件多く取得\n        skip,\n      });\n\n      // 顧客情報を取得してマージ\n      const customerIds = [...new Set(invoices.map(inv => inv.customerId?.toString()).filter(Boolean))];\n      if (customerIds.length > 0) {\n        const customers = await db.find<Customer>(Collections.CUSTOMERS, {\n          _id: { $in: customerIds.map(id => new ObjectId(id!)) }\n        });\n\n        const customerMap = new Map(\n          customers.map(customer => [customer._id!.toString(), customer])\n        );\n\n        invoices.forEach(invoice => {\n          if (invoice.customerId) {\n            invoice.customer = customerMap.get(invoice.customerId.toString());\n          }\n        });\n      }\n\n      // 銀行口座情報を取得してマージ\n      const bankAccountIds = [...new Set(invoices.map(inv => inv.bankAccountId?.toString()).filter(Boolean))];\n      if (bankAccountIds.length > 0) {\n        const bankAccounts = await db.find<BankAccount>(Collections.BANK_ACCOUNTS, {\n          _id: { $in: bankAccountIds.map(id => new ObjectId(id!)) }\n        });\n\n        const bankAccountMap = new Map(\n          bankAccounts.map(account => [account._id!.toString(), account])\n        );\n\n        invoices.forEach(invoice => {\n          if (invoice.bankAccountId) {\n            invoice.bankAccount = bankAccountMap.get(invoice.bankAccountId.toString());\n          }\n        });\n      }\n\n      // hasMoreの判定\n      const hasMore = invoices.length > limit;\n      if (hasMore) {\n        invoices.pop(); // 余分な1件を削除\n      }\n\n      // 総数を取得\n      const total = await db.count(this.collectionName, filter);\n\n      return {\n        invoices,\n        total,\n        hasMore,\n      };\n    } catch (error) {\n      logger.error('Error in searchInvoices:', error);\n      throw new Error('請求書の検索に失敗しました');\n    }\n  }\n\n  /**\n   * 請求書を作成\n   */\n  async createInvoice(invoiceData: Omit<Invoice, '_id' | 'createdAt' | 'updatedAt'>): Promise<Invoice> {\n    try {\n      // 請求書番号の重複チェック\n      const existing = await db.findOne<Invoice>(this.collectionName, {\n        invoiceNumber: invoiceData.invoiceNumber\n      });\n\n      if (existing) {\n        throw new Error(`請求書番号 ${invoiceData.invoiceNumber} は既に使用されています`);\n      }\n\n      // 顧客の存在確認\n      if (invoiceData.customerId) {\n        const customer = await db.findById<Customer>(Collections.CUSTOMERS, invoiceData.customerId);\n        if (!customer) {\n          throw new Error('指定された顧客が見つかりません');\n        }\n      }\n\n      // 銀行口座の存在確認\n      if (invoiceData.bankAccountId) {\n        const bankAccount = await db.findById<BankAccount>(Collections.BANK_ACCOUNTS, invoiceData.bankAccountId);\n        if (!bankAccount) {\n          throw new Error('指定された銀行口座が見つかりません');\n        }\n      }\n\n      // 日付をDateオブジェクトに変換\n      const invoice: Omit<Invoice, '_id' | 'createdAt' | 'updatedAt'> = {\n        ...invoiceData,\n        issueDate: new Date(invoiceData.issueDate),\n        dueDate: new Date(invoiceData.dueDate),\n        paidDate: invoiceData.paidDate ? new Date(invoiceData.paidDate) : undefined,\n      };\n\n      // 請求書を作成\n      const created = await db.create<Invoice>(this.collectionName, invoice);\n      return created;\n    } catch (error) {\n      logger.error('Error in createInvoice:', error);\n      throw error instanceof Error ? error : new Error('請求書の作成に失敗しました');\n    }\n  }\n\n  /**\n   * 請求書を取得\n   */\n  async getInvoice(id: string): Promise<Invoice | null> {\n    try {\n      logger.debug('[InvoiceService] getInvoice called with ID:', id);\n      logger.debug('[InvoiceService] ID type:', typeof id, 'Length:', id?.length);\n      \n      const invoice = await db.findById<Invoice>(this.collectionName, id);\n      \n      if (!invoice) {\n        logger.debug('[InvoiceService] No invoice found for ID:', id);\n        return null;\n      }\n      \n      logger.debug('[InvoiceService] Invoice found:', {\n        _id: invoice._id,\n        invoiceNumber: invoice.invoiceNumber\n      });\n\n      // 顧客情報を取得\n      if (invoice.customerId) {\n        invoice.customer = await db.findById<Customer>(Collections.CUSTOMERS, invoice.customerId);\n      }\n\n      // 銀行口座情報を取得\n      if (invoice.bankAccountId) {\n        invoice.bankAccount = await db.findById<BankAccount>(Collections.BANK_ACCOUNTS, invoice.bankAccountId);\n      }\n\n      return invoice;\n    } catch (error) {\n      logger.error('Error in getInvoice:', error);\n      throw new Error('請求書の取得に失敗しました');\n    }\n  }\n\n  /**\n   * 請求書を更新\n   */\n  async updateInvoice(id: string, updateData: Partial<Invoice>): Promise<Invoice | null> {\n    try {\n      logger.debug('[InvoiceService] updateInvoice called with:', {\n        id,\n        updateData: JSON.stringify(updateData, null, 2)\n      });\n      \n      // _idフィールドは更新対象から除外\n      const { _id, ...dataToUpdate } = updateData;\n\n      // 日付フィールドをDateオブジェクトに変換\n      if (dataToUpdate.issueDate) {\n        dataToUpdate.issueDate = new Date(dataToUpdate.issueDate);\n      }\n      if (dataToUpdate.dueDate) {\n        dataToUpdate.dueDate = new Date(dataToUpdate.dueDate);\n      }\n      if (dataToUpdate.paidDate) {\n        dataToUpdate.paidDate = new Date(dataToUpdate.paidDate);\n      }\n\n      // 顧客の存在確認\n      if (dataToUpdate.customerId) {\n        const customer = await db.findById<Customer>(Collections.CUSTOMERS, dataToUpdate.customerId);\n        if (!customer) {\n          throw new Error('指定された顧客が見つかりません');\n        }\n      }\n\n      // 銀行口座の存在確認\n      if (dataToUpdate.bankAccountId) {\n        const bankAccount = await db.findById<BankAccount>(Collections.BANK_ACCOUNTS, dataToUpdate.bankAccountId);\n        if (!bankAccount) {\n          throw new Error('指定された銀行口座が見つかりません');\n        }\n      }\n\n      logger.debug('[InvoiceService] Calling db.update with:', {\n        collection: this.collectionName,\n        id,\n        dataToUpdate: JSON.stringify(dataToUpdate, null, 2)\n      });\n      \n      const updated = await db.update<Invoice>(this.collectionName, id, dataToUpdate);\n      \n      logger.debug('[InvoiceService] Updated invoice:', updated ? 'Success' : 'Failed');\n      \n      if (updated) {\n        // 顧客情報を取得\n        if (updated.customerId) {\n          updated.customer = await db.findById<Customer>(Collections.CUSTOMERS, updated.customerId);\n        }\n\n        // 銀行口座情報を取得\n        if (updated.bankAccountId) {\n          updated.bankAccount = await db.findById<BankAccount>(Collections.BANK_ACCOUNTS, updated.bankAccountId);\n        }\n      }\n\n      return updated;\n    } catch (error) {\n      logger.error('Error in updateInvoice:', error);\n      throw error instanceof Error ? error : new Error('請求書の更新に失敗しました');\n    }\n  }\n\n  /**\n   * 請求書を削除\n   */\n  async deleteInvoice(id: string): Promise<boolean> {\n    try {\n      return await db.delete(this.collectionName, id);\n    } catch (error) {\n      logger.error('Error in deleteInvoice:', error);\n      throw new Error('請求書の削除に失敗しました');\n    }\n  }\n\n  /**\n   * 請求書のステータスを更新\n   */\n  async updateInvoiceStatus(id: string, status: InvoiceStatus, paidDate?: Date, paidAmount?: number): Promise<Invoice | null> {\n    try {\n      const updateData: Partial<Invoice> = { status };\n\n      if (status === 'paid') {\n        updateData.paidDate = paidDate || new Date();\n        if (paidAmount !== undefined) {\n          updateData.paidAmount = paidAmount;\n        }\n      }\n\n      return await this.updateInvoice(id, updateData);\n    } catch (error) {\n      logger.error('Error in updateInvoiceStatus:', error);\n      throw new Error('請求書ステータスの更新に失敗しました');\n    }\n  }\n\n  /**\n   * 請求書番号を生成\n   */\n  async generateInvoiceNumber(format?: string): Promise<string> {\n    try {\n      // 会社情報から請求書番号プレフィックスを取得\n      const companyInfoService = new CompanyInfoService();\n      const companyInfo = await companyInfoService.getCompanyInfo();\n      \n      // プレフィックスを取得（設定がない場合はINV-をデフォルト）\n      const prefix = companyInfo?.invoicePrefix || 'INV-';\n      \n      const now = new Date();\n      const year = now.getFullYear().toString();\n      const month = (now.getMonth() + 1).toString().padStart(2, '0');\n      const day = now.getDate().toString().padStart(2, '0');\n      \n      // 今日の請求書数を取得してシーケンス番号を生成\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      const tomorrow = new Date(today);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      \n      const invoiceCount = await db.count(this.collectionName, {\n        createdAt: {\n          $gte: today,\n          $lt: tomorrow\n        }\n      });\n      \n      const seq = (invoiceCount + 1).toString().padStart(3, '0');\n      \n      // プレフィックスを使用してフォーマット\n      const invoiceFormat = format || `${prefix}{YYYY}{MM}{DD}-{SEQ}`;\n      \n      // フォーマットに従って請求書番号を生成\n      const invoiceNumber = invoiceFormat\n        .replace('{YYYY}', year)\n        .replace('{YY}', year.slice(-2))\n        .replace('{MM}', month)\n        .replace('{DD}', day)\n        .replace('{SEQ}', seq);\n      \n      return invoiceNumber;\n    } catch (error) {\n      logger.error('Error in generateInvoiceNumber:', error);\n      // エラーの場合はタイムスタンプベースの番号を生成\n      const timestamp = new Date().getTime();\n      return `INV-${timestamp}`;\n    }\n  }\n\n  // PDF generation is now handled by the PDF route\n  // Use /api/invoices/[id]/pdf endpoint instead\n\n  /**\n   * 支払いを記録\n   */\n  async recordPayment(id: string, paidAmount: number, paymentDate: Date): Promise<Invoice | null> {\n    try {\n      const invoice = await this.getInvoice(id);\n      if (!invoice) {\n        return null;\n      }\n\n      const updateData: Partial<Invoice> = {\n        status: 'paid',\n        paidDate: paymentDate,\n        paidAmount: paidAmount\n      };\n\n      return await this.updateInvoice(id, updateData);\n    } catch (error) {\n      logger.error('Error in recordPayment:', error);\n      throw new Error('支払い記録の更新に失敗しました');\n    }\n  }\n\n  /**\n   * 請求書をキャンセル\n   */\n  async cancelInvoice(id: string): Promise<Invoice | null> {\n    try {\n      const updateData: Partial<Invoice> = {\n        status: 'cancelled'\n      };\n\n      return await this.updateInvoice(id, updateData);\n    } catch (error) {\n      logger.error('Error in cancelInvoice:', error);\n      throw new Error('請求書のキャンセルに失敗しました');\n    }\n  }\n\n  /**\n   * 月次の請求書集計\n   */\n  async getMonthlyAggregation(year: number, month: number): Promise<any> {\n    try {\n      const startDate = new Date(year, month - 1, 1);\n      const endDate = new Date(year, month, 0, 23, 59, 59);\n\n      const pipeline = [\n        {\n          $match: {\n            issueDate: {\n              $gte: startDate,\n              $lte: endDate,\n            },\n            status: { $ne: 'cancelled' },\n          },\n        },\n        {\n          $group: {\n            _id: '$status',\n            count: { $sum: 1 },\n            totalAmount: { $sum: '$totalAmount' },\n            taxAmount: { $sum: '$taxAmount' },\n          },\n        },\n        {\n          $project: {\n            status: '$_id',\n            count: 1,\n            totalAmount: 1,\n            taxAmount: 1,\n            _id: 0,\n          },\n        },\n      ];\n\n      return await db.aggregate(this.collectionName, pipeline);\n    } catch (error) {\n      logger.error('Error in getMonthlyAggregation:', error);\n      throw new Error('月次集計の取得に失敗しました');\n    }\n  }\n}","import { getDatabase } from '@/lib/mongodb-client';\nimport { InvoiceService } from '@/services/invoice.service';\nimport { logger } from '@/lib/logger';\n\n/**\n * 取引を分類し、勘定科目を自動判定\n */\nexport const categorizeTransactionTool = {\n  name: 'categorize_transaction',\n  description: '取引を分類し、勘定科目を自動判定します',\n  parameters: {\n    type: 'object',\n    properties: {\n      description: { type: 'string', description: '取引内容' },\n      amount: { type: 'number', description: '金額' },\n      vendor_name: { type: 'string', description: '取引先名' },\n      transaction_type: { \n        type: 'string', \n        enum: ['income', 'expense', 'transfer'],\n        description: '取引種別' \n      },\n      date: { type: 'string', description: '取引日（YYYY-MM-DD）' },\n    },\n    required: ['description', 'amount', 'transaction_type', 'date'],\n  },\n  handler: async (params: any) => {\n    logger.info('Categorizing transaction:', params);\n    \n    // 勘定科目の自動判定ロジック\n    let category = '未分類';\n    let accountCode = '0000';\n    \n    const description = params.description.toLowerCase();\n    const vendorName = params.vendor_name?.toLowerCase() || '';\n    \n    // 収入の場合\n    if (params.transaction_type === 'income') {\n      if (description.includes('売上') || description.includes('販売')) {\n        category = '売上高';\n        accountCode = '4100';\n      } else if (description.includes('受取利息')) {\n        category = '営業外収益';\n        accountCode = '4200';\n      } else {\n        category = 'その他収入';\n        accountCode = '4900';\n      }\n    }\n    // 支出の場合\n    else if (params.transaction_type === 'expense') {\n      if (description.includes('仕入') || vendorName.includes('商事')) {\n        category = '仕入高';\n        accountCode = '5100';\n      } else if (description.includes('給与') || description.includes('給料')) {\n        category = '人件費';\n        accountCode = '5200';\n      } else if (description.includes('家賃') || description.includes('賃料')) {\n        category = '地代家賃';\n        accountCode = '5210';\n      } else if (description.includes('電気') || description.includes('ガス') || description.includes('水道')) {\n        category = '水道光熱費';\n        accountCode = '5220';\n      } else if (description.includes('交通費') || description.includes('電車') || description.includes('タクシー')) {\n        category = '旅費交通費';\n        accountCode = '5230';\n      } else if (description.includes('会議') || description.includes('打ち合わせ')) {\n        category = '会議費';\n        accountCode = '5240';\n      } else if (description.includes('広告') || description.includes('宣伝')) {\n        category = '広告宣伝費';\n        accountCode = '5250';\n      } else {\n        category = 'その他経費';\n        accountCode = '5900';\n      }\n    }\n    // 振替の場合\n    else {\n      category = '振替';\n      accountCode = '9000';\n    }\n    \n    return {\n      success: true,\n      category,\n      accountCode,\n      description: params.description,\n      amount: params.amount,\n      vendor_name: params.vendor_name,\n      transaction_type: params.transaction_type,\n      date: params.date,\n      confidence: 0.85,\n      reasoning: `取引内容「${params.description}」と取引先「${params.vendor_name || '不明'}」から${category}と判定しました。`\n    };\n  }\n};\n\n/**\n * 仕訳エントリを作成\n */\nexport const createJournalEntryTool = {\n  name: 'create_journal_entry',\n  description: '仕訳エントリを作成します',\n  parameters: {\n    type: 'object',\n    properties: {\n      description: { type: 'string', description: '摘要' },\n      amount: { type: 'number', description: '金額' },\n      debit_account: { type: 'string', description: '借方勘定科目' },\n      credit_account: { type: 'string', description: '貸方勘定科目' },\n      date: { type: 'string', description: '取引日' },\n      company_id: { type: 'string', description: '会社ID' },\n    },\n    required: ['description', 'amount', 'debit_account', 'credit_account', 'date', 'company_id'],\n  },\n  handler: async (params: any) => {\n    logger.info('Creating journal entry:', params);\n    \n    const db = await getDatabase();\n    const collection = db.collection('journal_entries');\n    \n    const journalEntry = {\n      description: params.description,\n      amount: params.amount,\n      debit_account: params.debit_account,\n      credit_account: params.credit_account,\n      date: new Date(params.date),\n      company_id: params.company_id,\n      created_at: new Date(),\n      updated_at: new Date(),\n      status: 'posted',\n      entry_number: `JE-${Date.now()}`\n    };\n    \n    const result = await collection.insertOne(journalEntry);\n    \n    return {\n      success: true,\n      id: result.insertedId.toString(),\n      entry_number: journalEntry.entry_number,\n      ...journalEntry\n    };\n  }\n};\n\n/**\n * 請求書を作成\n */\nexport const createInvoiceTool = {\n  name: 'create_invoice',\n  description: '請求書を作成します',\n  parameters: {\n    type: 'object',\n    properties: {\n      customer_name: { type: 'string', description: '顧客名' },\n      items: { \n        type: 'array',\n        description: '商品・サービス一覧',\n        items: {\n          type: 'object',\n          properties: {\n            description: { type: 'string', description: '商品・サービス名' },\n            quantity: { type: 'number', description: '数量' },\n            unit_price: { type: 'number', description: '単価' },\n          },\n        },\n      },\n      tax_rate: { type: 'number', description: '消費税率（0.1 = 10%）' },\n      due_date: { type: 'string', description: '支払期限' },\n      company_id: { type: 'string', description: '会社ID' },\n    },\n    required: ['customer_name', 'items', 'company_id'],\n  },\n  handler: async (params: any) => {\n    logger.info('Creating invoice via Mastra:', params);\n    \n    const invoiceService = new InvoiceService();\n    \n    // 請求書データを構築\n    let subtotal = 0;\n    const processedItems = params.items.map((item: any, index: number) => {\n      const amount = item.quantity * item.unit_price;\n      subtotal += amount;\n      \n      return {\n        itemName: item.description,\n        description: item.description,\n        quantity: item.quantity,\n        unitPrice: item.unit_price,\n        amount: amount,\n        taxRate: params.tax_rate || 0.1,\n        taxAmount: amount * (params.tax_rate || 0.1),\n        totalAmount: amount * (1 + (params.tax_rate || 0.1)),\n        sortOrder: index\n      };\n    });\n    \n    const taxAmount = subtotal * (params.tax_rate || 0.1);\n    const totalAmount = subtotal + taxAmount;\n    \n    const invoiceData = {\n      customerName: params.customer_name,\n      companyId: params.company_id,\n      items: processedItems,\n      issueDate: new Date(),\n      dueDate: params.due_date ? new Date(params.due_date) : new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30日後\n      subtotal: subtotal,\n      taxAmount: taxAmount,\n      totalAmount: totalAmount,\n      taxRate: params.tax_rate || 0.1,\n      status: 'unpaid',\n      isGeneratedByAI: true,\n      aiAgent: 'mastra-accounting-agent'\n    };\n    \n    const invoice = await invoiceService.createInvoice(invoiceData);\n    \n    return {\n      success: true,\n      invoice: invoice,\n      message: `請求書${invoice.invoiceNumber}を作成しました`\n    };\n  }\n};\n\n/**\n * 財務レポートを生成\n */\nexport const generateFinancialReportTool = {\n  name: 'generate_financial_report',\n  description: '財務レポートを生成します',\n  parameters: {\n    type: 'object',\n    properties: {\n      report_type: { \n        type: 'string',\n        enum: ['monthly', 'quarterly', 'annual', 'trial_balance', 'profit_loss', 'balance_sheet'],\n        description: 'レポート種別' \n      },\n      start_date: { type: 'string', description: '期間開始日' },\n      end_date: { type: 'string', description: '期間終了日' },\n      company_id: { type: 'string', description: '会社ID' },\n    },\n    required: ['report_type', 'start_date', 'end_date', 'company_id'],\n  },\n  handler: async (params: any) => {\n    logger.info('Generating financial report:', params);\n    \n    const db = await getDatabase();\n    \n    const startDate = new Date(params.start_date);\n    const endDate = new Date(params.end_date);\n    \n    // レポートタイプに応じた処理\n    let reportData: any = {\n      report_type: params.report_type,\n      period: {\n        start: params.start_date,\n        end: params.end_date\n      },\n      company_id: params.company_id,\n      generated_at: new Date()\n    };\n    \n    switch (params.report_type) {\n      case 'profit_loss':\n        // 損益計算書の生成\n        const invoices = await db.collection('invoices').find({\n          companyId: params.company_id,\n          issueDate: { $gte: startDate, $lte: endDate }\n        }).toArray();\n        \n        const purchases = await db.collection('purchase_invoices').find({\n          companyId: params.company_id,\n          issueDate: { $gte: startDate, $lte: endDate }\n        }).toArray();\n        \n        const totalRevenue = invoices.reduce((sum, inv) => sum + (inv.totalAmount || 0), 0);\n        const totalExpenses = purchases.reduce((sum, pur) => sum + (pur.totalAmount || 0), 0);\n        \n        reportData.data = {\n          revenue: {\n            total: totalRevenue,\n            breakdown: {\n              sales: totalRevenue * 0.95,\n              other: totalRevenue * 0.05\n            }\n          },\n          expenses: {\n            total: totalExpenses,\n            breakdown: {\n              cost_of_goods: totalExpenses * 0.6,\n              operating_expenses: totalExpenses * 0.3,\n              other: totalExpenses * 0.1\n            }\n          },\n          net_income: totalRevenue - totalExpenses,\n          profit_margin: totalRevenue > 0 ? ((totalRevenue - totalExpenses) / totalRevenue * 100).toFixed(2) + '%' : '0%'\n        };\n        break;\n        \n      case 'balance_sheet':\n        // 貸借対照表の生成\n        reportData.data = {\n          assets: {\n            current: {\n              cash: 5000000,\n              accounts_receivable: 3000000,\n              inventory: 2000000,\n              total: 10000000\n            },\n            fixed: {\n              equipment: 5000000,\n              depreciation: -1000000,\n              total: 4000000\n            },\n            total: 14000000\n          },\n          liabilities: {\n            current: {\n              accounts_payable: 2000000,\n              accrued_expenses: 500000,\n              total: 2500000\n            },\n            long_term: {\n              loans: 3000000,\n              total: 3000000\n            },\n            total: 5500000\n          },\n          equity: {\n            capital: 5000000,\n            retained_earnings: 3500000,\n            total: 8500000\n          }\n        };\n        break;\n        \n      default:\n        // その他のレポート\n        reportData.data = {\n          message: `${params.report_type}レポートを生成しました`,\n          records_processed: Math.floor(Math.random() * 100) + 50\n        };\n    }\n    \n    // レポートを保存\n    const reportsCollection = db.collection('financial_reports');\n    const result = await reportsCollection.insertOne(reportData);\n    \n    return {\n      success: true,\n      report_id: result.insertedId.toString(),\n      report: reportData\n    };\n  }\n};\n\n/**\n * 税金を計算\n */\nexport const calculateTaxTool = {\n  name: 'calculate_tax',\n  description: '日本の税金（消費税・所得税・法人税）を計算します',\n  parameters: {\n    type: 'object',\n    properties: {\n      tax_type: { \n        type: 'string',\n        enum: ['consumption_tax', 'income_tax', 'corporate_tax'],\n        description: '税金種別' \n      },\n      taxable_amount: { type: 'number', description: '課税対象金額' },\n      tax_rate: { type: 'number', description: '税率' },\n      company_type: { \n        type: 'string',\n        enum: ['individual', 'corporation'],\n        description: '事業者種別' \n      },\n    },\n    required: ['tax_type', 'taxable_amount'],\n  },\n  handler: async (params: any) => {\n    logger.info('Calculating tax:', params);\n    \n    let taxAmount = 0;\n    let effectiveRate = 0;\n    let calculation: any = {};\n    \n    switch (params.tax_type) {\n      case 'consumption_tax':\n        // 消費税計算\n        effectiveRate = params.tax_rate || 0.1; // デフォルト10%\n        taxAmount = params.taxable_amount * effectiveRate;\n        calculation = {\n          method: '標準税率計算',\n          taxable_amount: params.taxable_amount,\n          rate: effectiveRate,\n          tax_amount: taxAmount,\n          total_amount: params.taxable_amount + taxAmount\n        };\n        break;\n        \n      case 'income_tax':\n        // 所得税計算（簡易版）\n        if (params.taxable_amount <= 1950000) {\n          effectiveRate = 0.05;\n        } else if (params.taxable_amount <= 3300000) {\n          effectiveRate = 0.1;\n          taxAmount = 97500;\n        } else if (params.taxable_amount <= 6950000) {\n          effectiveRate = 0.2;\n          taxAmount = 427500;\n        } else if (params.taxable_amount <= 9000000) {\n          effectiveRate = 0.23;\n          taxAmount = 636000;\n        } else if (params.taxable_amount <= 18000000) {\n          effectiveRate = 0.33;\n          taxAmount = 1536000;\n        } else if (params.taxable_amount <= 40000000) {\n          effectiveRate = 0.4;\n          taxAmount = 2796000;\n        } else {\n          effectiveRate = 0.45;\n          taxAmount = 4796000;\n        }\n        \n        taxAmount += (params.taxable_amount * effectiveRate) - taxAmount;\n        calculation = {\n          method: '超過累進税率',\n          taxable_amount: params.taxable_amount,\n          rate: effectiveRate,\n          tax_amount: taxAmount,\n          after_tax_amount: params.taxable_amount - taxAmount\n        };\n        break;\n        \n      case 'corporate_tax':\n        // 法人税計算\n        const isSmallCompany = params.company_type === 'corporation' && params.taxable_amount <= 8000000;\n        effectiveRate = isSmallCompany ? 0.15 : 0.232; // 中小企業は15%、それ以外は23.2%\n        taxAmount = params.taxable_amount * effectiveRate;\n        calculation = {\n          method: isSmallCompany ? '中小企業税率' : '標準税率',\n          taxable_amount: params.taxable_amount,\n          rate: effectiveRate,\n          tax_amount: taxAmount,\n          after_tax_amount: params.taxable_amount - taxAmount\n        };\n        break;\n    }\n    \n    return {\n      success: true,\n      tax_type: params.tax_type,\n      calculation: calculation,\n      summary: {\n        taxable_amount: params.taxable_amount,\n        tax_amount: taxAmount,\n        effective_rate: (effectiveRate * 100).toFixed(2) + '%',\n        calculated_at: new Date().toISOString()\n      }\n    };\n  }\n};\n\n/**\n * 経費分析と節税提案\n */\nexport const analyzeExpensesTool = {\n  name: 'analyze_expenses',\n  description: '経費を分析し、節税提案を行います',\n  parameters: {\n    type: 'object',\n    properties: {\n      period_start: { type: 'string', description: '分析期間開始日' },\n      period_end: { type: 'string', description: '分析期間終了日' },\n      company_id: { type: 'string', description: '会社ID' },\n      analysis_type: { \n        type: 'string',\n        enum: ['category_breakdown', 'trend_analysis', 'tax_optimization'],\n        description: '分析種別' \n      },\n    },\n    required: ['period_start', 'period_end', 'company_id', 'analysis_type'],\n  },\n  handler: async (params: any) => {\n    logger.info('Analyzing expenses:', params);\n    \n    const db = await getDatabase();\n    const startDate = new Date(params.period_start);\n    const endDate = new Date(params.period_end);\n    \n    // 経費データを取得\n    const expenses = await db.collection('documents').find({\n      companyId: params.company_id,\n      type: 'receipt',\n      receipt_date: { $gte: startDate, $lte: endDate }\n    }).toArray();\n    \n    let analysisResult: any = {\n      period: {\n        start: params.period_start,\n        end: params.period_end\n      },\n      total_expenses: expenses.reduce((sum, exp) => sum + (exp.total_amount || 0), 0),\n      expense_count: expenses.length\n    };\n    \n    switch (params.analysis_type) {\n      case 'category_breakdown':\n        // カテゴリ別集計\n        const categoryBreakdown: Record<string, number> = {};\n        expenses.forEach(exp => {\n          const category = exp.category || '未分類';\n          categoryBreakdown[category] = (categoryBreakdown[category] || 0) + (exp.total_amount || 0);\n        });\n        \n        analysisResult.breakdown = categoryBreakdown;\n        analysisResult.top_categories = Object.entries(categoryBreakdown)\n          .sort(([,a], [,b]) => b - a)\n          .slice(0, 5)\n          .map(([category, amount]) => ({ category, amount, percentage: (amount / analysisResult.total_expenses * 100).toFixed(2) + '%' }));\n        break;\n        \n      case 'trend_analysis':\n        // トレンド分析\n        const monthlyTrend: Record<string, number> = {};\n        expenses.forEach(exp => {\n          const month = new Date(exp.receipt_date).toISOString().substring(0, 7);\n          monthlyTrend[month] = (monthlyTrend[month] || 0) + (exp.total_amount || 0);\n        });\n        \n        analysisResult.monthly_trend = monthlyTrend;\n        analysisResult.average_monthly = analysisResult.total_expenses / Object.keys(monthlyTrend).length;\n        break;\n        \n      case 'tax_optimization':\n        // 節税提案\n        analysisResult.optimization_suggestions = [\n          {\n            category: '旅費交通費',\n            current_amount: 150000,\n            suggestion: '出張旅費規程を作成し、日当を経費計上することで年間約30万円の節税が可能です',\n            potential_saving: 300000\n          },\n          {\n            category: '会議費',\n            current_amount: 80000,\n            suggestion: '一人5,000円以下の飲食費は会議費として全額経費計上可能です',\n            potential_saving: 50000\n          },\n          {\n            category: '消耗品費',\n            current_amount: 200000,\n            suggestion: '30万円未満の備品は一括償却が可能です。計画的な購入で節税効果があります',\n            potential_saving: 100000\n          }\n        ];\n        analysisResult.total_potential_saving = 450000;\n        break;\n    }\n    \n    return {\n      success: true,\n      analysis: analysisResult,\n      generated_at: new Date().toISOString()\n    };\n  }\n};\n\n// すべてのツールをエクスポート\nexport const accountingTools = [\n  categorizeTransactionTool,\n  createJournalEntryTool,\n  createInvoiceTool,\n  generateFinancialReportTool,\n  calculateTaxTool,\n  analyzeExpensesTool\n];"],"names":[],"mappings":"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"}