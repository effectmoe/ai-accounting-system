import { NextRequest, NextResponse } from 'next/server';
import { MongoClient, ObjectId } from 'mongodb';

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017';
const DATABASE_NAME = process.env.DATABASE_NAME || 'accounting-automation';

// MongoDBクライアントの再利用
let client: MongoClient | null = null;

async function getMongoClient() {
  if (!client) {
    client = new MongoClient(MONGODB_URI);
    await client.connect();
  }
  return client;
}

export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params;
    const body = await request.json();
    const { isActive } = body;

    // バリデーション
    if (typeof isActive !== 'boolean') {
      return NextResponse.json(
        { success: false, error: 'isActiveはboolean型である必要があります' },
        { status: 400 }
      );
    }

    // MongoDB接続
    const mongoClient = await getMongoClient();
    const db = mongoClient.db(DATABASE_NAME);
    const collection = db.collection('customers');

    // ObjectId検証
    if (!ObjectId.isValid(id)) {
      return NextResponse.json(
        { success: false, error: '無効な顧客IDです' },
        { status: 400 }
      );
    }

    // 顧客の存在確認
    const existingCustomer = await collection.findOne({ _id: new ObjectId(id) });
    if (!existingCustomer) {
      return NextResponse.json(
        { success: false, error: '顧客が見つかりません' },
        { status: 404 }
      );
    }

    // ステータス更新
    const updateResult = await collection.updateOne(
      { _id: new ObjectId(id) },
      {
        $set: {
          isActive: isActive,
          updatedAt: new Date()
        }
      }
    );

    if (updateResult.modifiedCount === 0) {
      return NextResponse.json(
        { success: false, error: 'ステータスの更新に失敗しました' },
        { status: 500 }
      );
    }

    // 更新後の顧客データを取得
    const updatedCustomer = await collection.findOne({ _id: new ObjectId(id) });

    return NextResponse.json({
      success: true,
      customer: {
        ...updatedCustomer,
        id: updatedCustomer?._id?.toString(),
      },
      message: `顧客のステータスを${isActive ? 'アクティブ' : '非アクティブ'}に更新しました`
    });

  } catch (error) {
    console.error('顧客ステータス更新エラー:', error);
    return NextResponse.json(
      { success: false, error: 'サーバーエラーが発生しました' },
      { status: 500 }
    );
  }
}