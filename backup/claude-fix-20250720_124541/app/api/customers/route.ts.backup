import { NextRequest, NextResponse } from 'next/server';
import { getDatabase } from '@/lib/mongodb-client';
import { Customer } from '@/types/collections';
import { v4 as uuidv4 } from 'uuid';

// GET: 顧客一覧取得
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '10');
    const search = searchParams.get('search') || '';
    const skip = (page - 1) * limit;

    const db = await getDatabase();
    const collection = db.collection('customers');

    // 検索条件の構築
    const query: any = {};
    if (search) {
      query.$or = [
        { customerId: { $regex: search, $options: 'i' } },
        { companyName: { $regex: search, $options: 'i' } },
        { companyNameKana: { $regex: search, $options: 'i' } },
        { email: { $regex: search, $options: 'i' } },
        { department: { $regex: search, $options: 'i' } },
        { 'contacts.name': { $regex: search, $options: 'i' } },
      ];
    }

    // 総件数を取得
    const total = await collection.countDocuments(query);

    // 顧客データを取得
    const customers = await collection
      .find(query)
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit)
      .toArray();

    // MongoDBの_idをidに変換
    const formattedCustomers = customers.map(customer => ({
      ...customer,
      _id: customer._id.toString(),
      id: customer._id.toString(),
    }));

    return NextResponse.json({
      success: true,
      customers: formattedCustomers,
      total,
      page,
      limit,
    });
  } catch (error) {
    console.error('Error fetching customers:', error);
    return NextResponse.json(
      { success: false, error: '顧客データの取得に失敗しました' },
      { status: 500 }
    );
  }
}

// POST: 新規顧客作成
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // 必須フィールドのチェック
    if (!body.companyName) {
      return NextResponse.json(
        { success: false, error: '会社名は必須です' },
        { status: 400 }
      );
    }

    // メールアドレスの形式チェック（メールアドレスが提供された場合のみ）
    if (body.email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(body.email)) {
        return NextResponse.json(
          { success: false, error: '有効なメールアドレスを入力してください' },
          { status: 400 }
        );
      }
    }

    const db = await getDatabase();
    const collection = db.collection('customers');

    // メールアドレスの重複チェック（メールアドレスが提供された場合のみ）
    if (body.email) {
      const existingCustomer = await collection.findOne({ email: body.email });
      if (existingCustomer) {
        return NextResponse.json(
          { success: false, error: 'このメールアドレスは既に登録されています' },
          { status: 400 }
        );
      }
    }

    // 顧客IDの重複チェック（顧客IDが提供された場合のみ）
    if (body.customerId) {
      const existingCustomer = await collection.findOne({ customerId: body.customerId });
      if (existingCustomer) {
        return NextResponse.json(
          { success: false, error: 'この顧客コードは既に登録されています' },
          { status: 400 }
        );
      }
    }

    // 新規顧客データの作成
    const now = new Date();
    const newCustomer: Partial<Customer> = {
      customerId: body.customerId,
      companyName: body.companyName,
      companyNameKana: body.companyNameKana,
      department: body.department,
      postalCode: body.postalCode,
      prefecture: body.prefecture,
      city: body.city,
      address1: body.address1,
      address2: body.address2,
      phone: body.phone,
      fax: body.fax,
      email: body.email,
      website: body.website,
      paymentTerms: body.paymentTerms ? parseInt(body.paymentTerms) : undefined,
      contacts: body.contacts || [],
      tags: body.tags || [],
      notes: body.notes,
      isActive: body.isActive !== undefined ? body.isActive : true,
      createdAt: now,
      updatedAt: now,
    };

    // データベースに保存
    const result = await collection.insertOne(newCustomer);

    return NextResponse.json({
      success: true,
      _id: result.insertedId.toString(),
      id: result.insertedId.toString(),
      ...newCustomer,
    });
  } catch (error) {
    console.error('Error creating customer:', error);
    return NextResponse.json(
      { success: false, error: '顧客の作成に失敗しました' },
      { status: 500 }
    );
  }
}