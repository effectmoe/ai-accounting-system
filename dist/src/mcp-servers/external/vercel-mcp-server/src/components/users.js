"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerUserTools = registerUserTools;
const zod_1 = require("zod");
const response_js_1 = require("../utils/response.js");
const constants_js_1 = require("../config/constants.js");
function registerUserTools(server) {
    server.tool("delete_user", "Initiates the deletion process for the currently authenticated User", {
        reasons: zod_1.z.array(zod_1.z.object({
            slug: zod_1.z.string().describe("Reason identifier"),
            description: zod_1.z.string().describe("Detailed description of the reason")
        })).optional().describe("Optional array of objects that describe the reason why the User account is being deleted")
    }, async ({ reasons }) => {
        const response = await fetch(`${constants_js_1.BASE_URL}/v1/user`, {
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${constants_js_1.DEFAULT_ACCESS_TOKEN}`,
            },
            ...(reasons && { body: JSON.stringify({ reasons }) })
        });
        const data = await (0, response_js_1.handleResponse)(response);
        return {
            content: [
                { type: "text", text: `User deletion initiated:\n${JSON.stringify(data, null, 2)}` },
            ],
        };
    });
    server.tool("get_user", "Retrieves information related to the currently authenticated User", {}, async () => {
        const response = await fetch(`${constants_js_1.BASE_URL}/v2/user`, {
            headers: {
                Authorization: `Bearer ${constants_js_1.DEFAULT_ACCESS_TOKEN}`,
            },
        });
        const data = await (0, response_js_1.handleResponse)(response);
        return {
            content: [
                { type: "text", text: `User information:\n${JSON.stringify(data, null, 2)}` },
            ],
        };
    });
    server.tool("list_user_events", "Retrieves a list of events generated by the User on Vercel", {
        limit: zod_1.z.number().optional().describe("Maximum number of items which may be returned"),
        since: zod_1.z.string().optional().describe("Timestamp to only include items created since then (e.g. 2019-12-08T10:00:38.976Z)"),
        until: zod_1.z.string().optional().describe("Timestamp to only include items created until then (e.g. 2019-12-09T23:00:38.976Z)"),
        types: zod_1.z.string().optional().describe("Comma-delimited list of event types to filter the results by (e.g. login,team-member-join,domain-buy)"),
        userId: zod_1.z.string().optional().describe("When retrieving events for a Team, filter events by a specific member"),
        withPayload: zod_1.z.string().optional().describe("When set to true, includes the payload field for each event"),
        teamId: zod_1.z.string().optional().describe("The Team identifier to perform the request on behalf of"),
        slug: zod_1.z.string().optional().describe("The Team slug to perform the request on behalf of")
    }, async ({ limit, since, until, types, userId, withPayload, teamId, slug }) => {
        const url = new URL(`${constants_js_1.BASE_URL}/v3/events`);
        if (limit)
            url.searchParams.append("limit", limit.toString());
        if (since)
            url.searchParams.append("since", since);
        if (until)
            url.searchParams.append("until", until);
        if (types)
            url.searchParams.append("types", types);
        if (userId)
            url.searchParams.append("userId", userId);
        if (withPayload)
            url.searchParams.append("withPayload", withPayload);
        if (teamId)
            url.searchParams.append("teamId", teamId);
        if (slug)
            url.searchParams.append("slug", slug);
        const response = await fetch(url.toString(), {
            headers: {
                Authorization: `Bearer ${constants_js_1.DEFAULT_ACCESS_TOKEN}`,
            },
        });
        const data = await (0, response_js_1.handleResponse)(response);
        return {
            content: [
                { type: "text", text: `User events:\n${JSON.stringify(data, null, 2)}` },
            ],
        };
    });
}
//# sourceMappingURL=users.js.map