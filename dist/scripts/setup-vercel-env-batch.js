"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
// .env.local„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„ÇÄ
function loadEnvFile() {
    const envPath = path.join(process.cwd(), '.env.local');
    if (!fs.existsSync(envPath)) {
        console.error('‚ùå .env.local„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ');
        console.log('\nÂÖà„Å´.env.local„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
        process.exit(1);
    }
    const envContent = fs.readFileSync(envPath, 'utf-8');
    const envVars = {};
    envContent.split('\n').forEach(line => {
        line = line.trim();
        if (line && !line.startsWith('#')) {
            const [key, ...valueParts] = line.split('=');
            if (key && valueParts.length > 0) {
                envVars[key.trim()] = valueParts.join('=').trim();
            }
        }
    });
    return envVars;
}
// VercelÁí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö
async function setVercelEnv(key, value) {
    // productionÁí∞Â¢É„Å´Ë®≠ÂÆö
    await setVercelEnvForEnvironment(key, value, 'production');
    // previewÁí∞Â¢É„Å´Ë®≠ÂÆö
    await setVercelEnvForEnvironment(key, value, 'preview');
    // developmentÁí∞Â¢É„Å´Ë®≠ÂÆö
    await setVercelEnvForEnvironment(key, value, 'development');
}
// ÁâπÂÆö„ÅÆÁí∞Â¢É„Å´VercelÁí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö
async function setVercelEnvForEnvironment(key, value, env) {
    return new Promise((resolve, reject) => {
        const args = ['env', 'add', key, env];
        const vercel = (0, child_process_1.spawn)('vercel', args, {
            stdio: ['pipe', 'pipe', 'pipe']
        });
        let output = '';
        let error = '';
        vercel.stdout.on('data', (data) => {
            output += data.toString();
        });
        vercel.stderr.on('data', (data) => {
            error += data.toString();
        });
        // ÂÄ§„ÇíÊ®ôÊ∫ñÂÖ•Âäõ„Å´ÈÄÅ‰ø°
        vercel.stdin.write(value + '\n');
        vercel.stdin.end();
        vercel.on('close', (code) => {
            if (code === 0 || output.includes('Success') || output.includes('Updated') || output.includes('Added')) {
                // ÊàêÂäüÊôÇ„ÅØ‰Ωï„ÇÇÂá∫Âäõ„Åó„Å™„ÅÑÔºà3Áí∞Â¢ÉÂàÜÂá∫Âäõ„Åï„Çå„Çã„Åü„ÇÅÔºâ
                resolve();
            }
            else if (error.includes('already exists') || output.includes('already exists')) {
                // Êó¢„Å´Â≠òÂú®„Åô„ÇãÂ†¥Âêà„ÇÇ„Çπ„Ç≠„ÉÉ„Éó
                resolve();
            }
            else {
                console.error(`‚ùå ${key} „ÅÆ${env}Áí∞Â¢É„Å∏„ÅÆË®≠ÂÆö„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:`, error || output);
                reject(new Error(`Failed to set ${key} for ${env}`));
            }
        });
        vercel.on('error', (err) => {
            reject(err);
        });
    });
}
// „É°„Ç§„É≥Âá¶ÁêÜ
async function main() {
    console.log('üöÄ VercelÁí∞Â¢ÉÂ§âÊï∞„Éê„ÉÉ„ÉÅ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„ÉÑ„Éº„É´');
    console.log('=====================================\n');
    console.log('üìÇ .env.local„Éï„Ç°„Ç§„É´„Åã„ÇâÁí∞Â¢ÉÂ§âÊï∞„ÇíË™≠„ÅøËæº„Çì„Åß„ÅÑ„Åæ„Åô...\n');
    const envVars = loadEnvFile();
    const envKeys = Object.keys(envVars);
    if (envKeys.length === 0) {
        console.error('‚ùå .env.local„Éï„Ç°„Ç§„É´„Å´Áí∞Â¢ÉÂ§âÊï∞„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ');
        process.exit(1);
    }
    console.log(`‚úÖ ${envKeys.length}ÂÄã„ÅÆÁí∞Â¢ÉÂ§âÊï∞„ÇíÊ§úÂá∫„Åó„Åæ„Åó„Åü:\n`);
    envKeys.forEach(key => {
        const value = envVars[key];
        const masked = value.length > 8 ? value.substring(0, 4) + '****' + value.substring(value.length - 4) : '****';
        console.log(`  - ${key} = ${masked}`);
    });
    console.log('\n‚ö†Ô∏è  Ê≥®ÊÑè: „Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅØ„Åô„Åπ„Å¶„ÅÆÁí∞Â¢ÉÂ§âÊï∞„ÇíVercel„ÅÆÂÖ®Áí∞Â¢É(production, preview, development)„Å´Ë®≠ÂÆö„Åó„Åæ„Åô„ÄÇ\n');
    // Vercel CLI„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
    try {
        const version = await new Promise((resolve, reject) => {
            const vercel = (0, child_process_1.spawn)('vercel', ['--version']);
            let output = '';
            vercel.stdout.on('data', (data) => output += data.toString());
            vercel.on('close', (code) => code === 0 ? resolve(output) : reject());
            vercel.on('error', reject);
        });
        console.log('‚úÖ Vercel CLIÊ§úÂá∫:', version.trim());
    }
    catch (error) {
        console.error('‚ùå Vercel CLI„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ');
        console.log('\n‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„Åß„Ç§„É≥„Çπ„Éà„Éº„É´„Åó„Å¶„Åè„Å†„Åï„ÅÑ:');
        console.log('npm i -g vercel\n');
        process.exit(1);
    }
    // „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åå„É™„É≥„ÇØ„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
    console.log('\nüìé Vercel„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„ÅÑ„Åæ„Åô...');
    console.log('‚ö†Ô∏è  „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åå„Åæ„Å†„É™„É≥„ÇØ„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅÂÖà„Å´‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ:');
    console.log('   vercel link\n');
    console.log('üîÑ Vercel„Å´Áí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö„Åó„Å¶„ÅÑ„Åæ„Åô...\n');
    let successCount = 0;
    let skipCount = 0;
    let errorCount = 0;
    // ÂêÑÁí∞Â¢ÉÂ§âÊï∞„ÇíVercel„Å´Ë®≠ÂÆö
    for (const [key, value] of Object.entries(envVars)) {
        try {
            console.log(`üìù Ë®≠ÂÆö‰∏≠: ${key}...`);
            await setVercelEnv(key, value);
            console.log(`‚úÖ ${key} „ÇíÂÖ®Áí∞Â¢É„Å´Ë®≠ÂÆö„Åó„Åæ„Åó„Åü„ÄÇ`);
            successCount++;
        }
        catch (error) {
            errorCount++;
            console.error(`‚ùå ${key} „ÅÆË®≠ÂÆö‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:`, error);
        }
    }
    console.log('\n\nüìä ÁµêÊûú:');
    console.log(`‚úÖ ÊàêÂäü: ${successCount}ÂÄã`);
    console.log(`‚ö†Ô∏è  „Çπ„Ç≠„ÉÉ„Éó: ${skipCount}ÂÄã`);
    console.log(`‚ùå „Ç®„É©„Éº: ${errorCount}ÂÄã`);
    if (successCount > 0) {
        console.log('\n‚úÖ Áí∞Â¢ÉÂ§âÊï∞„ÅÆË®≠ÂÆö„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ');
        console.log('\nüìå Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó:');
        console.log('1. Vercel„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„ÅßÁí∞Â¢ÉÂ§âÊï∞„ÇíÁ¢∫Ë™ç');
        console.log('   https://vercel.com/dashboard');
        console.log('2. ÊúÄÊñ∞„ÅÆ„Éá„Éó„É≠„Ç§„É°„É≥„Éà„ÇíÂÜç„Éá„Éó„É≠„Ç§');
        console.log('   vercel --prod');
        console.log('3. „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅßÂãï‰ΩúÁ¢∫Ë™ç\n');
    }
}
// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
process.on('unhandledRejection', (err) => {
    console.error('\n‚ùå „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', err);
    process.exit(1);
});
// ÂÆüË°å
main().catch((err) => {
    console.error('\n‚ùå „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', err);
    process.exit(1);
});
