'use client';

import { useState, useEffect, useCallback } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { DocumentService, SavedDocument } from '@/services/document-service';
import { FileText, Download, Send, CheckCircle, Filter, Plus, Paperclip, Bell, Edit, FileCheck, Archive, Grid3X3, List, Trash2, Image, CheckSquare, Square, X } from 'lucide-react';
import { toast } from 'react-hot-toast';
import { documentTypeLabels, statusLabels, statusColors, getDocumentTypeLabel, getStatusLabel, getStatusColor } from '@/components/common/constants';
import StatusBadge from '@/components/common/StatusBadge';

interface OcrResult {
  id: string;
  file_name: string;
  vendor_name: string;
  receipt_date: string;
  subtotal_amount?: number;
  tax_amount: number;
  total_amount: number;
  payment_amount?: number;
  change_amount?: number;
  receipt_number?: string;
  store_name?: string;
  store_phone?: string;
  company_name?: string;
  notes?: string;
  extracted_text: string;
  created_at: string;
  status: string;
  linked_document_id?: string;
  document_type?: string;
}

export default function DocumentsContent() {
  console.log('üî¥üî¥üî¥ DocumentsContent „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Åå„Éû„Ç¶„É≥„Éà„Åï„Çå„Åæ„Åó„ÅüÔºÅ');
  
  const router = useRouter();
  const searchParams = useSearchParams();
  const tabFromUrl = searchParams.get('tab');
  const [activeTab, setActiveTab] = useState(tabFromUrl || 'ocr');
  const [debugInfo, setDebugInfo] = useState<string[]>(['DocumentsContent mounted at ' + new Date().toISOString()]);
  const [documents, setDocuments] = useState<SavedDocument[]>([]);
  const [ocrResults, setOcrResults] = useState<OcrResult[]>([]);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({
    documentType: '',
    status: '',
    dateFrom: '',
    dateTo: ''
  });
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [totalOcrPages, setTotalOcrPages] = useState(1);
  const [viewMode, setViewMode] = useState<'card' | 'table'>('card');
  const [ocrSortBy, setOcrSortBy] = useState<'date' | 'vendor' | 'amount'>('date');
  const [ocrSortOrder, setOcrSortOrder] = useState<'asc' | 'desc'>('desc');
  const [ocrFilters, setOcrFilters] = useState({
    vendor: '',
    dateFrom: '',
    dateTo: '',
    minAmount: '',
    maxAmount: '',
    documentType: ''
  });
  const [selectedItems, setSelectedItems] = useState<Set<string>>(new Set());
  const [isSelectionMode, setIsSelectionMode] = useState(false);
  const documentsPerPage = 20;

  // „Çø„ÉñÂ§âÊõ¥ÊôÇ„Å´URL„Éë„É©„É°„Éº„Çø„ÇíÊõ¥Êñ∞
  const handleTabChange = useCallback((tab: string) => {
    setActiveTab(tab);
    const params = new URLSearchParams(searchParams.toString());
    params.set('tab', tab);
    router.push(`/documents?${params.toString()}`, { scroll: false });
  }, [router, searchParams]);

  // OCRÁµêÊûú„ÇíÂèñÂæó
  const fetchOcrResults = useCallback(async () => {
    console.log('üîç OCRÁµêÊûúÂèñÂæóÈñãÂßã - „Éö„Éº„Ç∏:', currentPage, '„É™„Éü„ÉÉ„Éà:', documentsPerPage);
    
    try {
      // URL„Éë„É©„É°„Éº„Çø„ÇíÊßãÁØâ
      const params = new URLSearchParams({
        page: currentPage.toString(),
        limit: documentsPerPage.toString(),
        sortBy: ocrSortBy,
        sortOrder: ocrSortOrder
      });
      
      // „Éï„Ç£„É´„Çø„Éº„Éë„É©„É°„Éº„Çø„ÇíËøΩÂä†
      if (ocrFilters.vendor) {
        params.append('vendor', ocrFilters.vendor);
      }
      if (ocrFilters.minAmount) {
        params.append('minAmount', ocrFilters.minAmount);
      }
      if (ocrFilters.maxAmount) {
        params.append('maxAmount', ocrFilters.maxAmount);
      }
      if (ocrFilters.dateFrom) {
        params.append('startDate', ocrFilters.dateFrom);
      }
      if (ocrFilters.dateTo) {
        params.append('endDate', ocrFilters.dateTo);
      }
      if (ocrFilters.documentType) {
        params.append('documentType', ocrFilters.documentType);
      }
      
      const apiUrl = `/api/ocr-results?${params.toString()}`;
      console.log('üåê API URL:', apiUrl);
      
      const response = await fetch(apiUrl);
      console.log('üì° „É¨„Çπ„Éù„É≥„Çπ:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok,
        headers: Object.fromEntries(response.headers.entries())
      });
      
      const data = await response.json();
      console.log('üìä „É¨„Çπ„Éù„É≥„Çπ„Éá„Éº„Çø:', {
        success: data.success,
        dataLength: data.data?.length,
        total: data.total,
        page: data.page,
        limit: data.limit,
        error: data.error,
        debugInfo: data.debugInfo
      });
      
      if (data.debugInfo) {
        console.log('üîç [OCR-Results] „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±:', data.debugInfo);
      }
      
      if (data.success) {
        console.log('‚úÖ OCRÁµêÊûúÂèñÂæóÊàêÂäü:', data.data?.length, '‰ª∂');
        if (data.data && data.data.length > 0) {
          console.log('üîç ÊúÄÂàù„ÅÆOCRÁµêÊûúË©≥Á¥∞:', JSON.stringify(data.data[0], null, 2));
        } else {
          console.warn('‚ö†Ô∏è OCRÁµêÊûú„ÅØ0‰ª∂„Åß„Åô„ÄÇMongoDB„Å´„Éá„Éº„Çø„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
        }
        setOcrResults(data.data || []);
        setTotalOcrPages(Math.ceil((data.total || 0) / documentsPerPage));
        console.log('üìà Á∑è„Éö„Éº„Ç∏Êï∞Ë®≠ÂÆö:', Math.ceil((data.total || 0) / documentsPerPage));
      } else {
        console.error('‚ùå OCRÁµêÊûúÂèñÂæóÂ§±Êïó:', data.error);
        toast.error('OCRÁµêÊûú„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      }
    } catch (error) {
      console.error('üö® OCRÁµêÊûúÂèñÂæó„Ç®„É©„Éº:', error);
      console.error('üö® „Ç®„É©„Éº„Çπ„Çø„ÉÉ„ÇØ:', error.stack);
      toast.error('OCRÁµêÊûú„ÅÆÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    }
  }, [currentPage, documentsPerPage, ocrSortBy, ocrSortOrder, ocrFilters]);

  // ÊñáÊõ∏‰∏ÄË¶ß„ÇíÂèñÂæó
  const fetchDocuments = useCallback(async () => {
    try {
      const companyId = '11111111-1111-1111-1111-111111111111';
      const skip = (currentPage - 1) * documentsPerPage;
      
      // „ÇØ„Ç®„É™„Éë„É©„É°„Éº„Çø„ÇíÊßãÁØâ
      const params = new URLSearchParams({
        companyId,
        limit: documentsPerPage.toString(),
        skip: skip.toString()
      });

      // „Éï„Ç£„É´„Çø„ÉºÈÅ©Áî®
      if (filters.documentType) {
        params.append('documentType', filters.documentType);
      }
      if (filters.status) {
        params.append('status', filters.status);
      }
      if (filters.dateFrom) {
        params.append('dateFrom', filters.dateFrom);
      }
      if (filters.dateTo) {
        params.append('dateTo', filters.dateTo);
      }

      const response = await fetch(`/api/documents/list?${params.toString()}`);
      const data = await response.json();

      if (data.success) {
        setDocuments(data.documents || []);
        setTotalPages(data.totalPages || 1);
      } else {
        console.error('Error fetching documents:', data.error);
        toast.error('ÊñáÊõ∏„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      }
    } catch (error) {
      console.error('Error fetching documents:', error);
      toast.error('ÊñáÊõ∏„ÅÆÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    }
  }, [filters, currentPage]);

  // ÊñáÊõ∏Âåñ
  const handleCreateDocument = async (ocrResult: OcrResult, documentType: string = 'receipt') => {
    try {
      // APIÁµåÁî±„ÅßÊñáÊõ∏‰ΩúÊàêÔºà„Ç∑„É≥„Éó„É´ÁâàÔºâ
      const response = await fetch('/api/documents/create-from-ocr-simple', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ocrResultId: ocrResult.id,
          document_type: documentType,
          vendor_name: ocrResult.vendor_name,
          receipt_date: ocrResult.receipt_date,
          subtotal_amount: ocrResult.subtotal_amount || 0,
          tax_amount: ocrResult.tax_amount,
          total_amount: ocrResult.total_amount,
          payment_amount: ocrResult.payment_amount || 0,
          change_amount: ocrResult.change_amount || 0,
          receipt_number: ocrResult.receipt_number || '',
          store_name: ocrResult.store_name || '',
          store_phone: ocrResult.store_phone || '',
          company_name: ocrResult.company_name || '',
          notes: ocrResult.notes || '',
          file_name: ocrResult.file_name,
          extracted_text: ocrResult.extracted_text
        })
      });

      const result = await response.json();
      console.log('Document creation response:', result);
      
      if (response.ok) {
        toast.success(`${result.message || 'È†òÂèéÊõ∏„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü'}`);
        // „É≠„Éº„Ç´„É´„Çπ„ÉÜ„Éº„Éà„ÇíÂç≥Â∫ß„Å´Êõ¥Êñ∞
        setOcrResults(prev => prev.map(ocr => 
          ocr.id === ocrResult.id 
            ? { ...ocr, linked_document_id: result.id, status: 'processed' }
            : ocr
        ));
        // ÊñáÊõ∏‰∏ÄË¶ß„ÅÆ„ÅøÊõ¥Êñ∞ÔºàOCRÁµêÊûú„ÅØ„É≠„Éº„Ç´„É´„Çπ„ÉÜ„Éº„Éà„ÇíÁ∂≠ÊåÅÔºâ
        await fetchDocuments();
        
      } else {
        console.error('Document creation error:', result);
        toast.error(result.error || 'ÊñáÊõ∏„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      }
    } catch (error) {
      console.error('Document creation error:', error);
      toast.error('ÊñáÊõ∏„ÅÆ‰ΩúÊàê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    }
  };

  // „Çπ„ÉÜ„Éº„Çø„ÇπÊõ¥Êñ∞
  const handleStatusUpdate = async (documentId: string, newStatus: string) => {
    try {
      const response = await fetch(`/api/documents/${documentId}/status`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status: newStatus })
      });

      if (response.ok) {
        toast.success('„Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü');
        await fetchDocuments();
      } else {
        const error = await response.json();
        toast.error(error.error || '„Çπ„ÉÜ„Éº„Çø„Çπ„ÅÆÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      }
    } catch (error) {
      console.error('Status update error:', error);
      toast.error('„Çπ„ÉÜ„Éº„Çø„Çπ„ÅÆÊõ¥Êñ∞‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    }
  };

  // OCRÁµêÊûú„ÇíÂâäÈô§
  const handleDeleteOcrResult = async (ocrResult: OcrResult) => {
    if (!confirm('„Åì„ÅÆOCRÁµêÊûú„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')) return;
    
    try {
      const response = await fetch(`/api/ocr-results/${ocrResult.id}`, {
        method: 'DELETE'
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'ÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      }

      toast.success('OCRÁµêÊûú„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü');
      await fetchOcrResults();
    } catch (error) {
      console.error('Delete error:', error);
      toast.error(error instanceof Error ? error.message : 'ÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
  };

  // ÈÅ∏Êäû„É¢„Éº„Éâ„ÅÆÂàá„ÇäÊõø„Åà
  const toggleSelectionMode = () => {
    setIsSelectionMode(!isSelectionMode);
    setSelectedItems(new Set());
  };

  // „Ç¢„Ç§„ÉÜ„É†„ÅÆÈÅ∏Êäû„ÉªËß£Èô§
  const toggleItemSelection = (id: string) => {
    const newSelected = new Set(selectedItems);
    if (newSelected.has(id)) {
      newSelected.delete(id);
    } else {
      newSelected.add(id);
    }
    setSelectedItems(newSelected);
  };

  // ÂÖ®ÈÅ∏Êäû„ÉªÂÖ®Ëß£Èô§
  const toggleSelectAll = () => {
    if (activeTab === 'ocr') {
      if (selectedItems.size === ocrResults.length) {
        setSelectedItems(new Set());
      } else {
        setSelectedItems(new Set(ocrResults.map(doc => doc.id)));
      }
    } else {
      if (selectedItems.size === documents.length) {
        setSelectedItems(new Set());
      } else {
        setSelectedItems(new Set(documents.map(doc => doc.id)));
      }
    }
  };

  // ÈÅ∏Êäû„Åó„Åü„Ç¢„Ç§„ÉÜ„É†„ÅÆÂâäÈô§
  const handleDeleteSelected = async () => {
    if (selectedItems.size === 0) return;

    if (!confirm(`ÈÅ∏Êäû„Åó„Åü${selectedItems.size}‰ª∂„ÅÆ„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü`)) {
      return;
    }

    try {
      const deletePromises = Array.from(selectedItems).map(id => {
        if (activeTab === 'ocr') {
          return fetch(`/api/ocr-results/${id}`, { method: 'DELETE' });
        } else {
          return fetch(`/api/documents/${id}`, { method: 'DELETE' });
        }
      });

      await Promise.all(deletePromises);
      
      toast.success(`${selectedItems.size}‰ª∂„ÅÆ„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü`);
      setSelectedItems(new Set());
      setIsSelectionMode(false);
      
      // „É™„Çπ„Éà„ÇíÊõ¥Êñ∞
      if (activeTab === 'ocr') {
        fetchOcrResults();
      } else {
        fetchDocuments();
      }
    } catch (error) {
      console.error('Delete error:', error);
      toast.error('ÂâäÈô§‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    }
  };

  // URL„Éë„É©„É°„Éº„Çø„ÅÆÂ§âÊõ¥„ÇíÁõ£Ë¶ñ
  useEffect(() => {
    if (tabFromUrl && tabFromUrl !== activeTab) {
      console.log('üìå URL„Éë„É©„É°„Éº„Çø„Åã„Çâ„Çø„Éñ„ÇíÂ§âÊõ¥:', tabFromUrl);
      setActiveTab(tabFromUrl);
    }
  }, [tabFromUrl]);

  // ÂàùÂõû„É≠„Éº„Éâ„ÅÆ„Åø
  useEffect(() => {
    console.log('üöÄ [DocumentsContent] ÂàùÂõû„É≠„Éº„ÉâÈñãÂßã');
    console.log('üîç [DocumentsContent] ÁèæÂú®„ÅÆ„Çø„Éñ:', activeTab);
    setLoading(true);
    
    // ÂàùÂõû„É≠„Éº„ÉâÊôÇ„ÅÆ„ÅøÂÆüË°å
    console.log('üìã [DocumentsContent] OCRÁµêÊûú„Å®„Éâ„Ç≠„É•„É°„É≥„ÉàÂèñÂæóÈñãÂßã');
    Promise.all([
      fetchOcrResults(),
      fetchDocuments()
    ]).then(() => {
      console.log('‚úÖ ÂàùÂõû„Éá„Éº„ÇøÂèñÂæóÂÆå‰∫Ü');
    }).catch((error) => {
      console.error('‚ùå ÂàùÂõû„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', error);
    }).finally(() => {
      console.log('üèÅ „É≠„Éº„Éá„Ç£„É≥„Ç∞ÁµÇ‰∫Ü');
      setLoading(false);
    });
  }, [fetchOcrResults, fetchDocuments]); // Èñ¢Êï∞„Çí‰æùÂ≠òÈÖçÂàó„Å´ËøΩÂä†
  
  // „Éö„Éº„Ç∏„ÄÅ„Éï„Ç£„É´„Çø„Éº„ÄÅ„ÇΩ„Éº„ÉàÂ§âÊõ¥ÊôÇ„ÅÆÂá¶ÁêÜ
  useEffect(() => {
    console.log('üìÑ „Éö„Éº„Ç∏/„Éï„Ç£„É´„Çø„Éº/„ÇΩ„Éº„ÉàÂ§âÊõ¥:', {
      page: currentPage, 
      tab: activeTab,
      sortBy: ocrSortBy,
      sortOrder: ocrSortOrder,
      filters: ocrFilters
    });
    
    if (activeTab === 'ocr') {
      fetchOcrResults();
    } else if (activeTab === 'documents') {
      fetchDocuments();
    }
  }, [currentPage, activeTab, ocrSortBy, ocrSortOrder, ocrFilters, fetchOcrResults, fetchDocuments]);

  // „Éï„Ç£„É´„Çø„ÉºÂ§âÊõ¥ÊôÇ„Å´ÊñáÊõ∏„ÇíÂÜçÂèñÂæó
  useEffect(() => {
    console.log('üîç „Éï„Ç£„É´„Çø„ÉºÂ§âÊõ¥:', filters);
    if (activeTab === 'documents') {
      setCurrentPage(1);
      fetchDocuments();
    }
  }, [filters]);

  // „Çµ„Éº„Éê„Éº„Çµ„Ç§„Éâ„Åß„Éï„Ç£„É´„Çø„Éº„Éª„ÇΩ„Éº„Éà„ÅåÈÅ©Áî®„Åï„Çå„Çã„Åü„ÇÅ„ÄÅ„ÇØ„É©„Ç§„Ç¢„É≥„ÉàÂÅ¥„Åß„ÅØÁµêÊûú„Çí„Åù„ÅÆ„Åæ„ÅæËøî„Åô
  const filteredAndSortedOcrResults = useCallback(() => {
    return ocrResults;
  }, [ocrResults]);

  return (
    <div className="flex h-screen bg-gray-100">
      <div className="flex-1 flex flex-col">
        {/* „Éò„ÉÉ„ÉÄ„Éº */}
        <header className="bg-white shadow-sm">
          <div className="px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center py-4">
              <h1 className="text-2xl font-bold text-gray-900">Êõ∏È°ûÁÆ°ÁêÜ</h1>
              <div className="flex items-center space-x-4">
                <Link
                  href="/documents/new"
                  className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Êñ∞Ë¶è‰ΩúÊàê
                </Link>
                <button className="p-2 text-gray-400 hover:text-gray-500">
                  <Bell className="h-5 w-5" />
                </button>
              </div>
            </div>
          </div>
        </header>

        {/* „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
        <main className="flex-1 overflow-y-auto">
          <div className="px-4 sm:px-6 lg:px-8 py-8">
            {/* „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†± */}
            <div className="mb-4 p-4 bg-yellow-100 border border-yellow-400 rounded">
              <div className="flex justify-between items-center mb-2">
                <p className="font-bold">„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±:</p>
                <button
                  onClick={() => {
                    console.log('üîÑ ÊâãÂãï„É™„Éï„É¨„ÉÉ„Ç∑„É•ÂÆüË°å');
                    fetchOcrResults();
                  }}
                  className="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm"
                >
                  „É™„Éï„É¨„ÉÉ„Ç∑„É•
                </button>
                <button
                  onClick={async () => {
                    console.log('üîç ÊúÄÊñ∞OCR„Éá„Éº„Çø„Çí„ÉÅ„Çß„ÉÉ„ÇØ');
                    const response = await fetch('/api/debug/check-ocr');
                    const data = await response.json();
                    console.log('üìä ÊúÄÊñ∞OCR„Éá„Éº„Çø:', data);
                    alert(`Á∑èÊï∞: ${data.total}‰ª∂\nË°®Á§∫‰∏≠: ${data.showing}‰ª∂\nÊúÄÊñ∞„ÅÆID: ${data.documents?.[0]?._id || '„Å™„Åó'}`);
                  }}
                  className="px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600 text-sm ml-2"
                >
                  OCR„Éá„Éº„ÇøÁ¢∫Ë™ç
                </button>
                <button
                  onClick={async () => {
                    const id = prompt('Á¢∫Ë™ç„Åó„Åü„ÅÑ„Éâ„Ç≠„É•„É°„É≥„ÉàID„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºà‰æã: 687e3501d18421a3ce4e7f53Ôºâ');
                    if (id) {
                      console.log('üîç ÁâπÂÆö„Éâ„Ç≠„É•„É°„É≥„Éà„Çí„ÉÅ„Çß„ÉÉ„ÇØ:', id);
                      const response = await fetch(`/api/debug/check-ocr?id=${id}`);
                      const data = await response.json();
                      console.log('üìä „Éâ„Ç≠„É•„É°„É≥„ÉàË©≥Á¥∞:', data);
                      if (data.found) {
                        alert(`„Éâ„Ç≠„É•„É°„É≥„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„ÅüÔºÅ\n\nID: ${data.document._id}\n‰ΩúÊàêÊó•ÊôÇ: ${data.document.createdAt}\nÂ∫óËàóÂêç: ${data.document.vendor_name || data.document.vendorName}\nÈáëÈ°ç: ¬•${data.document.total_amount || data.document.totalAmount}`);
                      } else {
                        alert('„Éâ„Ç≠„É•„É°„É≥„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ');
                      }
                    }
                  }}
                  className="px-3 py-1 bg-purple-500 text-white rounded hover:bg-purple-600 text-sm ml-2"
                >
                  IDÁ¢∫Ë™ç
                </button>
              </div>
              <p>OCRÁµêÊûúÊï∞: {ocrResults.length}‰ª∂</p>
              <p>„Éï„Ç£„É´„Çø„ÉºÂæå„ÅÆÁµêÊûúÊï∞: {filteredAndSortedOcrResults().length}‰ª∂</p>
              <p>„É≠„Éº„Éá„Ç£„É≥„Ç∞: {loading ? '„ÅØ„ÅÑ' : '„ÅÑ„ÅÑ„Åà'}</p>
              <p>„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Çø„Éñ: {activeTab}</p>
              <p>Ë°®Á§∫„É¢„Éº„Éâ: {viewMode}</p>
              <p>Á∑è„Éö„Éº„Ç∏Êï∞: {totalPages}</p>
              <p>„ÇΩ„Éº„Éà: {ocrSortBy} ({ocrSortOrder})</p>
              {ocrResults.length > 0 && (
                <>
                  <p>ÊúÄÂàù„ÅÆOCRÁµêÊûú: {ocrResults[0].vendor_name} - ¬•{ocrResults[0].total_amount}</p>
                  <p>displayResults‰ª∂Êï∞: {filteredAndSortedOcrResults().length}‰ª∂</p>
                  <p className="mt-2 font-semibold">ÁèæÂú®„ÅÆ„Éö„Éº„Ç∏: {currentPage} / {totalPages}</p>
                  <div className="flex gap-2 mt-2">
                    {Array.from({length: Math.min(3, totalPages)}, (_, i) => i + 1).map(page => (
                      <button
                        key={page}
                        onClick={() => setCurrentPage(page)}
                        className={`px-3 py-1 text-sm rounded ${
                          currentPage === page 
                            ? 'bg-blue-500 text-white' 
                            : 'bg-gray-200 hover:bg-gray-300'
                        }`}
                        disabled={loading}
                      >
                        „Éö„Éº„Ç∏{page}
                      </button>
                    ))}
                  </div>
                  <details className="mt-2">
                    <summary className="cursor-pointer text-sm">OCR„Éá„Éº„ÇøË©≥Á¥∞Ôºà„ÇØ„É™„ÉÉ„ÇØ„ÅßÂ±ïÈñãÔºâ</summary>
                    <div className="mt-2 text-xs max-h-40 overflow-auto">
                      {filteredAndSortedOcrResults().slice(0, 3).map((result, index) => (
                        <div key={index} className="mb-2 p-2 bg-white rounded">
                          <p>#{index + 1}: {result.vendor_name || result.store_name || 'Â∫óËàóÂêç„Å™„Åó'}</p>
                          <p>ÈáëÈ°ç: ¬•{result.total_amount || 0}</p>
                          <p>Êó•‰ªò: {result.receipt_date || '„Å™„Åó'}</p>
                          <p>ID: {result.id}</p>
                          <p>‰ΩúÊàêÊó•ÊôÇ: {result.created_at ? new Date(result.created_at).toLocaleString('ja-JP') : '„Å™„Åó'}</p>
                        </div>
                      ))}
                    </div>
                  </details>
                </>
              )}
            </div>
            
            {/* „Çø„Éñ */}
            <div className="mb-6">
              <nav className="flex space-x-4">
                <button
                  onClick={() => handleTabChange('ocr')}
                  className={`px-4 py-2 text-sm font-medium rounded-md ${
                    activeTab === 'ocr'
                      ? 'bg-blue-100 text-blue-700'
                      : 'text-gray-500 hover:text-gray-700'
                  }`}
                >
                  OCRÁµêÊûú
                </button>
                <button
                  onClick={() => handleTabChange('documents')}
                  className={`px-4 py-2 text-sm font-medium rounded-md ${
                    activeTab === 'documents'
                      ? 'bg-blue-100 text-blue-700'
                      : 'text-gray-500 hover:text-gray-700'
                  }`}
                >
                  ‰ΩúÊàêÊ∏à„ÅøÊñáÊõ∏
                </button>
              </nav>
            </div>

            {/* „Éï„Ç£„É´„Çø„ÉºÔºà‰ΩúÊàêÊ∏à„ÅøÊñáÊõ∏„Çø„ÉñÔºâ */}
            {activeTab === 'documents' && (
              <div className="bg-white rounded-lg shadow mb-6 p-4">
                {/* ÈÅ∏Êäû„É¢„Éº„Éâ„Éú„Çø„É≥ */}
                <div className="flex justify-between items-center mb-4">
                  <div className="flex gap-2">
                    {!isSelectionMode ? (
                      <button
                        onClick={toggleSelectionMode}
                        className="px-3 py-1 border border-gray-300 rounded-md text-sm hover:bg-gray-50">
                        <CheckSquare className="h-4 w-4 inline mr-1" />
                        ÈÅ∏Êäû„É¢„Éº„Éâ
                      </button>
                    ) : (
                      <>
                        <button
                          onClick={toggleSelectAll}
                          className="px-3 py-1 border border-gray-300 rounded-md text-sm hover:bg-gray-50">
                          {selectedItems.size === documents.length ? 'ÂÖ®Ëß£Èô§' : 'ÂÖ®ÈÅ∏Êäû'}
                        </button>
                        <button
                          onClick={handleDeleteSelected}
                          disabled={selectedItems.size === 0}
                          className="px-3 py-1 bg-red-500 text-white rounded-md text-sm hover:bg-red-600 disabled:bg-gray-300 disabled:cursor-not-allowed">
                          <Trash2 className="h-4 w-4 inline mr-1" />
                          ÈÅ∏Êäû„Åó„Åü{selectedItems.size}‰ª∂„ÇíÂâäÈô§
                        </button>
                        <button
                          onClick={toggleSelectionMode}
                          className="px-3 py-1 border border-gray-300 rounded-md text-sm hover:bg-gray-50">
                          <X className="h-4 w-4 inline mr-1" />
                          „Ç≠„É£„É≥„Çª„É´
                        </button>
                      </>
                    )}
                  </div>
                  {totalPages > 1 && (
                    <span className="text-sm text-gray-500">
                      „Éö„Éº„Ç∏ {currentPage} / {totalPages}
                    </span>
                  )}
                </div>
                <div className="flex items-center justify-between flex-wrap gap-4">
                  <div className="flex items-center gap-4 flex-wrap">
                    <div className="flex items-center gap-2">
                      <Filter className="h-4 w-4 text-gray-500" />
                      <span className="text-sm font-medium text-gray-700">„Éï„Ç£„É´„Çø„Éº:</span>
                    </div>
                    
                    <select
                      value={filters.documentType}
                      onChange={(e) => setFilters({ ...filters, documentType: e.target.value })}
                      className="px-3 py-1 border border-gray-300 rounded-md text-sm"
                    >
                      <option value="">„Åô„Åπ„Å¶„ÅÆÁ®ÆÈ°û</option>
                      <option value="estimate">Ë¶ãÁ©çÊõ∏</option>
                      <option value="invoice">Ë´ãÊ±ÇÊõ∏</option>
                      <option value="delivery_note">Á¥çÂìÅÊõ∏</option>
                      <option value="receipt">È†òÂèéÊõ∏</option>
                    </select>

                    <select
                      value={filters.status}
                      onChange={(e) => setFilters({ ...filters, status: e.target.value })}
                      className="px-3 py-1 border border-gray-300 rounded-md text-sm"
                    >
                      <option value="">„Åô„Åπ„Å¶„ÅÆ„Çπ„ÉÜ„Éº„Çø„Çπ</option>
                      <option value="draft">‰∏ãÊõ∏„Åç</option>
                      <option value="confirmed">Á¢∫ÂÆöÊ∏à„Åø</option>
                      <option value="viewed">Èñ≤Ë¶ßÊ∏à„Åø</option>
                      <option value="accepted">ÊâøË™çÊ∏à„Åø</option>
                      <option value="paid">ÊîØÊâïÊ∏à„Åø</option>
                      <option value="cancelled">„Ç≠„É£„É≥„Çª„É´</option>
                    </select>

                    <input
                      type="date"
                      value={filters.dateFrom}
                      onChange={(e) => setFilters({ ...filters, dateFrom: e.target.value })}
                      className="px-3 py-1 border border-gray-300 rounded-md text-sm"
                      placeholder="ÈñãÂßãÊó•"
                    />

                    <input
                      type="date"
                      value={filters.dateTo}
                      onChange={(e) => setFilters({ ...filters, dateTo: e.target.value })}
                      className="px-3 py-1 border border-gray-300 rounded-md text-sm"
                      placeholder="ÁµÇ‰∫ÜÊó•"
                    />

                    <button
                      onClick={() => setFilters({ documentType: '', status: '', dateFrom: '', dateTo: '' })}
                      className="px-3 py-1 text-sm text-gray-600 hover:text-gray-900"
                    >
                      „ÇØ„É™„Ç¢
                    </button>
                  </div>
                  
                  {/* „Éì„É•„Éº„É¢„Éº„ÉâÂàá„ÇäÊõø„Åà */}
                  <div className="flex items-center gap-2">
                    <button
                      onClick={() => setViewMode('card')}
                      className={`p-2 rounded-md transition-colors ${
                        viewMode === 'card' 
                          ? 'bg-blue-100 text-blue-700' 
                          : 'text-gray-500 hover:text-gray-700'
                      }`}
                      title="„Ç´„Éº„ÉâË°®Á§∫"
                    >
                      <Grid3X3 className="h-4 w-4" />
                    </button>
                    <button
                      onClick={() => setViewMode('table')}
                      className={`p-2 rounded-md transition-colors ${
                        viewMode === 'table' 
                          ? 'bg-blue-100 text-blue-700' 
                          : 'text-gray-500 hover:text-gray-700'
                      }`}
                      title="„ÉÜ„Éº„Éñ„É´Ë°®Á§∫"
                    >
                      <List className="h-4 w-4" />
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* „Éï„Ç£„É´„Çø„ÉºÔºàOCR„Çø„ÉñÔºâ */}
            {activeTab === 'ocr' && (
              <div className="bg-white rounded-lg shadow mb-6 p-4">
                {/* ÈÅ∏Êäû„É¢„Éº„Éâ„Éú„Çø„É≥ */}
                <div className="flex justify-between items-center mb-4">
                  <div className="flex gap-2">
                    {!isSelectionMode ? (
                      <button
                        onClick={toggleSelectionMode}
                        className="px-3 py-1 border border-gray-300 rounded-md text-sm hover:bg-gray-50">
                        <CheckSquare className="h-4 w-4 inline mr-1" />
                        ÈÅ∏Êäû„É¢„Éº„Éâ
                      </button>
                    ) : (
                      <>
                        <button
                          onClick={toggleSelectAll}
                          className="px-3 py-1 border border-gray-300 rounded-md text-sm hover:bg-gray-50">
                          {selectedItems.size === ocrResults.length ? 'ÂÖ®Ëß£Èô§' : 'ÂÖ®ÈÅ∏Êäû'}
                        </button>
                        <button
                          onClick={handleDeleteSelected}
                          disabled={selectedItems.size === 0}
                          className="px-3 py-1 bg-red-500 text-white rounded-md text-sm hover:bg-red-600 disabled:bg-gray-300 disabled:cursor-not-allowed">
                          <Trash2 className="h-4 w-4 inline mr-1" />
                          ÈÅ∏Êäû„Åó„Åü{selectedItems.size}‰ª∂„ÇíÂâäÈô§
                        </button>
                        <button
                          onClick={toggleSelectionMode}
                          className="px-3 py-1 border border-gray-300 rounded-md text-sm hover:bg-gray-50">
                          <X className="h-4 w-4 inline mr-1" />
                          „Ç≠„É£„É≥„Çª„É´
                        </button>
                      </>
                    )}
                  </div>
                  {totalOcrPages > 1 && (
                    <span className="text-sm text-gray-500">
                      „Éö„Éº„Ç∏ {currentPage} / {totalOcrPages}
                    </span>
                  )}
                </div>
                <div className="flex items-center justify-between flex-wrap gap-4">
                  <div className="flex items-center gap-4 flex-wrap">
                    <div className="flex items-center gap-2">
                      <Filter className="h-4 w-4 text-gray-500" />
                      <span className="text-sm font-medium text-gray-700">„ÇΩ„Éº„Éà„Éª„Éï„Ç£„É´„Çø„Éº:</span>
                    </div>
                    
                    <select
                      value={ocrSortBy}
                      onChange={(e) => {
                        setOcrSortBy(e.target.value as 'date' | 'vendor' | 'amount');
                        setCurrentPage(1); // „ÇΩ„Éº„ÉàÂ§âÊõ¥ÊôÇ„ÅØ„Éö„Éº„Ç∏„Çí1„Å´Êàª„Åô
                      }}
                      className="px-3 py-1 border border-gray-300 rounded-md text-sm"
                    >
                      <option value="date">Êó•‰ªòÈ†Ü</option>
                      <option value="vendor">ÂèñÂºïÂÖàÈ†Ü</option>
                      <option value="amount">ÈáëÈ°çÈ†Ü</option>
                    </select>

                    <select
                      value={ocrSortOrder}
                      onChange={(e) => {
                        setOcrSortOrder(e.target.value as 'asc' | 'desc');
                        setCurrentPage(1); // „ÇΩ„Éº„ÉàÂ§âÊõ¥ÊôÇ„ÅØ„Éö„Éº„Ç∏„Çí1„Å´Êàª„Åô
                      }}
                      className="px-3 py-1 border border-gray-300 rounded-md text-sm"
                    >
                      <option value="desc">ÈôçÈ†Ü</option>
                      <option value="asc">ÊòáÈ†Ü</option>
                    </select>

                    <select
                      value={ocrFilters.documentType || ''}
                      onChange={(e) => {
                        setOcrFilters({ ...ocrFilters, documentType: e.target.value });
                        setCurrentPage(1); // „Éï„Ç£„É´„Çø„ÉºÂ§âÊõ¥ÊôÇ„ÅØ„Éö„Éº„Ç∏„Çí1„Å´Êàª„Åô
                      }}
                      className="px-3 py-1 border border-gray-300 rounded-md text-sm"
                    >
                      <option value="">„Åô„Åπ„Å¶„ÅÆÁ®ÆÈ°û</option>
                      <option value="receipt">È†òÂèéÊõ∏</option>
                      <option value="invoice">Ë´ãÊ±ÇÊõ∏</option>
                      <option value="quotation">Ë¶ãÁ©çÊõ∏</option>
                      <option value="delivery_note">Á¥çÂìÅÊõ∏</option>
                      <option value="purchase_order">Áô∫Ê≥®Êõ∏</option>
                    </select>

                    <input
                      type="text"
                      value={ocrFilters.vendor}
                      onChange={(e) => {
                        setOcrFilters({ ...ocrFilters, vendor: e.target.value });
                        setCurrentPage(1); // „Éï„Ç£„É´„Çø„ÉºÂ§âÊõ¥ÊôÇ„ÅØ„Éö„Éº„Ç∏„Çí1„Å´Êàª„Åô
                      }}
                      className="px-3 py-1 border border-gray-300 rounded-md text-sm"
                      placeholder="ÂèñÂºïÂÖà„ÅßÊ§úÁ¥¢"
                    />

                    <input
                      type="date"
                      value={ocrFilters.dateFrom}
                      onChange={(e) => {
                        setOcrFilters({ ...ocrFilters, dateFrom: e.target.value });
                        setCurrentPage(1); // „Éï„Ç£„É´„Çø„ÉºÂ§âÊõ¥ÊôÇ„ÅØ„Éö„Éº„Ç∏„Çí1„Å´Êàª„Åô
                      }}
                      className="px-3 py-1 border border-gray-300 rounded-md text-sm"
                      placeholder="ÈñãÂßãÊó•"
                    />

                    <input
                      type="date"
                      value={ocrFilters.dateTo}
                      onChange={(e) => {
                        setOcrFilters({ ...ocrFilters, dateTo: e.target.value });
                        setCurrentPage(1); // „Éï„Ç£„É´„Çø„ÉºÂ§âÊõ¥ÊôÇ„ÅØ„Éö„Éº„Ç∏„Çí1„Å´Êàª„Åô
                      }}
                      className="px-3 py-1 border border-gray-300 rounded-md text-sm"
                      placeholder="ÁµÇ‰∫ÜÊó•"
                    />

                    <button
                      onClick={() => {
                        setOcrFilters({ vendor: '', dateFrom: '', dateTo: '', minAmount: '', maxAmount: '', documentType: '' });
                        setCurrentPage(1); // „Éï„Ç£„É´„Çø„ÉºÂ§âÊõ¥ÊôÇ„ÅØ„Éö„Éº„Ç∏„Çí1„Å´Êàª„Åô
                      }}
                      className="px-3 py-1 text-sm text-gray-600 hover:text-gray-900"
                    >
                      „ÇØ„É™„Ç¢
                    </button>
                  </div>
                  
                  {/* „Éì„É•„Éº„É¢„Éº„ÉâÂàá„ÇäÊõø„Åà */}
                  <div className="flex items-center gap-2">
                    <button
                      onClick={() => setViewMode('card')}
                      className={`p-2 rounded-md transition-colors ${
                        viewMode === 'card' 
                          ? 'bg-blue-100 text-blue-700' 
                          : 'text-gray-500 hover:text-gray-700'
                      }`}
                      title="„Ç´„Éº„ÉâË°®Á§∫"
                    >
                      <Grid3X3 className="h-4 w-4" />
                    </button>
                    <button
                      onClick={() => setViewMode('table')}
                      className={`p-2 rounded-md transition-colors ${
                        viewMode === 'table' 
                          ? 'bg-blue-100 text-blue-700' 
                          : 'text-gray-500 hover:text-gray-700'
                      }`}
                      title="„ÉÜ„Éº„Éñ„É´Ë°®Á§∫"
                    >
                      <List className="h-4 w-4" />
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* „Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
            <div className="bg-white rounded-lg shadow overflow-hidden">
            {loading ? (
                <div className="p-8 text-center">
                  <div className="inline-flex items-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                    <span className="ml-2 text-gray-600">Ë™≠„ÅøËæº„Åø‰∏≠...</span>
                  </div>
                </div>
              ) : activeTab === 'ocr' ? (
                // OCRÁµêÊûúÔºà„Ç´„Éº„ÉâÂΩ¢ÂºèÔºâ
                (() => {
                  const displayResults = filteredAndSortedOcrResults();
                  console.log('üéØ „É¨„É≥„ÉÄ„É™„É≥„Ç∞ÊôÇ„ÅÆdisplayResults:', displayResults.length, '‰ª∂');
                  console.log('üéØ viewMode:', viewMode);
                  
                  // „Éá„Éê„ÉÉ„Ç∞Áî®ÔºöÊúÄÂàù„ÅÆ3‰ª∂„ÅÆ„Éá„Éº„Çø„ÇíÁ¢∫Ë™ç
                  if (displayResults.length > 0) {
                    console.log('üéØ ÊúÄÂàù„ÅÆ3‰ª∂„ÅÆOCR„Éá„Éº„Çø:');
                    displayResults.slice(0, 3).forEach((result, index) => {
                      console.log(`  ${index + 1}:`, {
                        id: result.id,
                        vendor: result.vendor_name || result.store_name || '‰∏çÊòé',
                        amount: result.total_amount,
                        date: result.receipt_date
                      });
                    });
                  }
                  
                  return displayResults.length === 0 ? (
                    <div className="p-8 text-center">
                      <FileText className="mx-auto h-12 w-12 text-gray-400" />
                      <p className="mt-2 text-gray-600">
                        {ocrResults.length === 0 ? 'OCRÂá¶ÁêÜÊ∏à„Åø„ÅÆÊõ∏È°û„Åå„ÅÇ„Çä„Åæ„Åõ„Çì' : '„Éï„Ç£„É´„Çø„ÉºÊù°‰ª∂„Å´‰∏ÄËá¥„Åô„ÇãÊõ∏È°û„Åå„ÅÇ„Çä„Åæ„Åõ„Çì'}
                      </p>
                    </div>
                  ) : viewMode === 'card' ? (
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 p-4 md:p-6">
                      {displayResults.map((result, index) => (
                      <div key={result.id} className="bg-white border border-gray-200 rounded-lg hover:shadow-lg transition-all duration-200 min-h-[200px] relative">
                        {/* ÈÅ∏Êäû„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ */}
                        {isSelectionMode && (
                          <div className="absolute top-2 left-2 z-10">
                            <button
                              onClick={(e) => {
                                e.stopPropagation();
                                toggleItemSelection(result.id);
                              }}
                              className="p-1 hover:bg-gray-100 rounded">
                              {selectedItems.has(result.id) ? (
                                <CheckSquare className="h-5 w-5 text-blue-600" />
                              ) : (
                                <Square className="h-5 w-5 text-gray-400" />
                              )}
                            </button>
                          </div>
                        )}
                        <div className="p-4">
                          {/* „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†± */}
                          <details className="mb-3 text-xs text-gray-500">
                            <summary className="cursor-pointer">„Éá„Éê„ÉÉ„Ç∞: Áîü„Éá„Éº„Çø„ÇíË°®Á§∫</summary>
                            <pre className="mt-1 p-2 bg-gray-100 rounded overflow-auto max-h-40">
                              {JSON.stringify(result, null, 2)}
                            </pre>
                          </details>
                          
                          {/* „Éò„ÉÉ„ÉÄ„Éº */}
                          <div className="mb-3">
                            <div className="flex-1">
                              <h3 className="text-sm font-semibold text-gray-900 truncate">
                                {result.receipt_number || result.file_name?.split('.')[0] || 'È†òÂèéÊõ∏'}
                              </h3>
                              <p className="text-xs text-gray-500 mt-0.5">
                                {result.receipt_date ? new Date(result.receipt_date).toLocaleDateString('ja-JP') : '-'}
                              </p>
                            </div>
                          </div>

                          {/* ÂèñÂºïÂÖàÊÉÖÂ†± */}
                          <div className="mb-3">
                            <div className="text-sm font-medium text-gray-900">
                              {result.vendor_name || result.store_name || result.company_name || 'Â∫óËàóÂêç„Å™„Åó'}
                            </div>
                            {result.store_phone && (
                              <div className="text-xs text-gray-500 mt-0.5">TEL: {result.store_phone}</div>
                            )}
                          </div>

                          {/* ÈáëÈ°çÊÉÖÂ†± */}
                          <div className="bg-gray-50 rounded-md p-3 mb-3">
                            <div className="space-y-1.5">
                              <div className="flex justify-between text-xs">
                                <span className="text-gray-600">Â∞èË®à</span>
                                <span className="text-gray-900">
                                  ¬•{((result.subtotal_amount !== undefined && result.subtotal_amount >= 0) 
                                    ? result.subtotal_amount 
                                    : Math.max(0, (result.total_amount || 0) - (result.tax_amount || 0))
                                  ).toLocaleString()}
                                </span>
                              </div>
                              <div className="flex justify-between text-xs">
                                <span className="text-gray-600">Á®éÈ°ç</span>
                                <span className="text-gray-900">¬•{(result.tax_amount || 0).toLocaleString()}</span>
                              </div>
                              <div className="flex justify-between text-sm font-bold pt-1 border-t border-gray-200">
                                <span>ÂêàË®à</span>
                                <span className="text-blue-600">¬•{(result.total_amount || 0).toLocaleString()}</span>
                              </div>
                              <div className="pt-1.5 border-t border-gray-200 space-y-1">
                                <div className="flex justify-between text-xs">
                                  <span className="text-gray-600">„ÅäÈ†ê„Åã„Çä</span>
                                  <span className="text-gray-900">
                                    {(result.payment_amount !== undefined && result.payment_amount > 0) 
                                      ? `¬•${result.payment_amount.toLocaleString()}`
                                      : '-'}
                                  </span>
                                </div>
                                <div className="flex justify-between text-xs">
                                  <span className="text-gray-600">„ÅäÈá£„Çä</span>
                                  <span className="text-gray-900">
                                    {(result.change_amount !== undefined && result.change_amount > 0)
                                      ? `¬•${result.change_amount.toLocaleString()}`
                                      : '-'}
                                  </span>
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* „Åù„ÅÆ‰ªñÊÉÖÂ†± */}
                          <div className="flex justify-between items-center mb-3">
                            <div className="flex items-center gap-2 text-xs">
                              <span className="inline-block px-2 py-0.5 bg-gray-100 text-gray-700 rounded">
                                Êú™ÂàÜÈ°û
                              </span>
                              {result.document_type && (
                                <span className="inline-block px-2 py-0.5 bg-blue-100 text-blue-700 rounded">
                                  {documentTypeLabels[result.document_type as keyof typeof documentTypeLabels] || result.document_type}
                                </span>
                              )}
                            </div>
                            <div className="text-xs text-gray-500">
                              Âá¶ÁêÜ: {result.created_at ? new Date(result.created_at).toLocaleString('ja-JP', {
                                month: '2-digit',
                                day: '2-digit',
                                hour: '2-digit',
                                minute: '2-digit'
                              }) : '-'}
                            </div>
                          </div>

                          {/* ÂãòÂÆöÁßëÁõÆÊÉÖÂ†± */}
                          {result.category && (
                            <div className="mb-3">
                              <div className="flex items-center gap-2">
                                <span className="text-xs font-medium text-gray-700">ÂãòÂÆöÁßëÁõÆ:</span>
                                <span className="inline-block px-2 py-0.5 bg-green-100 text-green-800 text-xs rounded">
                                  {result.category}
                                </span>
                                {result.aiPrediction?.confidence && (
                                  <span className="text-xs text-gray-500">
                                    (AIÊé®Ê∏¨: {Math.round(result.aiPrediction.confidence * 100)}%)
                                  </span>
                                )}
                              </div>
                            </div>
                          )}

                          {/* ÂÇôËÄÉ */}
                          {result.notes && (
                            <div className="mb-3">
                              <p className="text-xs text-gray-600 italic truncate" title={result.notes}>
                                {result.notes}
                              </p>
                            </div>
                          )}

                          {/* Ë©≥Á¥∞ÊÉÖÂ†±„ÇíË°®Á§∫„Åô„ÇãÂ±ïÈñã„Çª„ÇØ„Ç∑„Éß„É≥ */}
                          <details className="mb-3">
                            <summary className="text-xs text-blue-600 hover:text-blue-800 cursor-pointer">
                              Ë©≥Á¥∞ÊÉÖÂ†±„ÇíË°®Á§∫
                            </summary>
                            <div className="mt-2 space-y-1 text-xs text-gray-600">
                              <div>„Éï„Ç°„Ç§„É´: {result.file_name}</div>
                              {result.extracted_text && (
                                <div className="mt-2">
                                  <div className="font-medium">OCR„ÉÜ„Ç≠„Çπ„Éà:</div>
                                  <div className="mt-1 p-2 bg-gray-50 rounded text-xs whitespace-pre-wrap max-h-32 overflow-y-auto">
                                    {result.extracted_text}
                                  </div>
                                </div>
                              )}
                            </div>
                          </details>


                          {/* „Ç¢„ÇØ„Ç∑„Éß„É≥ */}
                          <div className="pt-3 border-t border-gray-200">
                            {result.linked_document_id ? (
                              <div className="space-y-2">
                                <div className="flex items-center justify-between">
                                  <span className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                    <CheckCircle className="h-3 w-3 mr-0.5" />
                                    ÊñáÊõ∏ÂåñÊ∏à
                                  </span>
                                  {result.linked_document_id && (
                                    <Link
                                      href={`/documents/${result.linked_document_id}`}
                                      className="px-3 py-1.5 border border-gray-300 rounded-md text-xs font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors"
                                    >
                                      Ë©≥Á¥∞„ÇíË¶ã„Çã
                                    </Link>
                                  )}
                                </div>
                                <button
                                  onClick={() => handleDeleteOcrResult(result)}
                                  className="block w-full px-3 py-2 border border-red-300 rounded-md text-sm font-medium text-red-700 bg-white hover:bg-red-50 transition-colors"
                                >
                                  <Trash2 className="inline-block h-4 w-4 mr-1" />
                                  ÂâäÈô§
                                </button>
                              </div>
                            ) : (
                              <div className="space-y-2">
                                <div className="flex items-center justify-between gap-2">
                                  <span className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                    Êú™Âá¶ÁêÜ
                                  </span>
                                  <select
                                    id={`doc-type-${result.id}`}
                                    className="flex-1 px-2 py-1 text-xs border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 bg-white"
                                    defaultValue="receipt"
                                  >
                                    <option value="receipt">È†òÂèéÊõ∏</option>
                                    <option value="invoice">Ë´ãÊ±ÇÊõ∏</option>
                                    <option value="estimate">Ë¶ãÁ©çÊõ∏</option>
                                    <option value="delivery_note">Á¥çÂìÅÊõ∏</option>
                                  </select>
                                </div>
                                <button
                                  onClick={() => {
                                    const select = document.getElementById(`doc-type-${result.id}`) as HTMLSelectElement;
                                    handleCreateDocument(result, select.value);
                                  }}
                                  className="block w-full px-3 py-2 border border-transparent rounded-md text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 transition-colors"
                                >
                                  ÊñáÊõ∏Âåñ„Åô„Çã
                                </button>
                                <button
                                  onClick={() => handleDeleteOcrResult(result)}
                                  className="block w-full px-3 py-2 border border-red-300 rounded-md text-sm font-medium text-red-700 bg-white hover:bg-red-50 transition-colors"
                                >
                                  <Trash2 className="inline-block h-4 w-4 mr-1" />
                                  ÂâäÈô§
                                </button>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                      ))}
                    </div>
                  ) : (
                    // OCR„ÉÜ„Éº„Éñ„É´Ë°®Á§∫
                    <div className="overflow-x-auto">
                      <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                          <tr>
                            {isSelectionMode && (
                              <th className="px-6 py-3 text-center">
                                <button
                                  onClick={toggleSelectAll}
                                  className="p-1 hover:bg-gray-200 rounded">
                                  {selectedItems.size === displayResults.length ? (
                                    <CheckSquare className="h-4 w-4 text-blue-600" />
                                  ) : (
                                    <Square className="h-4 w-4 text-gray-400" />
                                  )}
                                </button>
                              </th>
                            )}
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              „Éï„Ç°„Ç§„É´Âêç
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              ÂèñÂºïÂÖà
                            </th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Êó•‰ªò
                            </th>
                            <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                              ÈáëÈ°ç
                            </th>
                            <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                              „Çπ„ÉÜ„Éº„Çø„Çπ
                            </th>
                            <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                              Êìç‰Ωú
                            </th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {displayResults.map((result) => (
                            <tr key={result.id} className="hover:bg-gray-50">
                              {isSelectionMode && (
                                <td className="px-6 py-4 text-center">
                                  <button
                                    onClick={() => toggleItemSelection(result.id)}
                                    className="p-1 hover:bg-gray-100 rounded">
                                    {selectedItems.has(result.id) ? (
                                      <CheckSquare className="h-4 w-4 text-blue-600" />
                                    ) : (
                                      <Square className="h-4 w-4 text-gray-400" />
                                    )}
                                  </button>
                                </td>
                              )}
                              <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                {result.receipt_number || result.file_name?.split('.')[0] || 'È†òÂèéÊõ∏'}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                {result.vendor_name || result.store_name || result.company_name || 'Â∫óËàóÂêç„Å™„Åó'}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {result.receipt_date ? new Date(result.receipt_date).toLocaleDateString('ja-JP') : '-'}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
                                ¬•{(result.total_amount || 0).toLocaleString()}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-center">
                                {result.linked_document_id ? (
                                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                    ÊñáÊõ∏ÂåñÊ∏à
                                  </span>
                                ) : (
                                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                                    Êú™Âá¶ÁêÜ
                                  </span>
                                )}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                {result.linked_document_id ? (
                                  <Link
                                    href={`/documents/${result.linked_document_id}`}
                                    className="text-blue-600 hover:text-blue-900"
                                  >
                                    Ë©≥Á¥∞„ÇíË¶ã„Çã
                                  </Link>
                                ) : (
                                  <button
                                    onClick={() => {
                                      handleCreateDocument(result, 'receipt');
                                    }}
                                    className="text-blue-600 hover:text-blue-900"
                                    disabled={isSelectionMode}
                                  >
                                    ÊñáÊõ∏Âåñ
                                  </button>
                                )}
                                {!isSelectionMode && (
                                  <button
                                    onClick={() => handleDeleteOcrResult(result)}
                                    className="text-red-600 hover:text-red-900 ml-3"
                                  >
                                    ÂâäÈô§
                                  </button>
                                )}
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  );
                })()
              ) : activeTab === 'documents' ? (
                // ‰ΩúÊàêÊ∏à„ÅøÊñáÊõ∏
                documents.length === 0 ? (
                  <div className="p-8 text-center">
                    <FileText className="mx-auto h-12 w-12 text-gray-400" />
                    <p className="mt-2 text-gray-600">‰ΩúÊàêÊ∏à„Åø„ÅÆÊñáÊõ∏„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p>
                  </div>
                ) : viewMode === 'card' ? (
                  // „Ç´„Éº„ÉâÂΩ¢Âºè
                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 p-4 md:p-6">
                    {documents.map((doc: any) => (
                      <div key={doc.id} className="bg-white border border-gray-200 rounded-lg hover:shadow-lg transition-all duration-200 relative">
                        {/* ÈÅ∏Êäû„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ */}
                        {isSelectionMode && (
                          <div className="absolute top-2 left-2 z-10">
                            <button
                              onClick={(e) => {
                                e.stopPropagation();
                                toggleItemSelection(doc.id);
                              }}
                              className="p-1 hover:bg-gray-100 rounded">
                              {selectedItems.has(doc.id) ? (
                                <CheckSquare className="h-5 w-5 text-blue-600" />
                              ) : (
                                <Square className="h-5 w-5 text-gray-400" />
                              )}
                            </button>
                          </div>
                        )}
                        <div className="p-4">
                          {/* „Éò„ÉÉ„ÉÄ„Éº */}
                          <div className="flex justify-between items-start mb-3">
                            <div className="flex-1">
                              <h3 className="text-sm font-semibold text-gray-900">
                                {doc.documentNumber || doc.document_number || doc.receipt_number || doc.id.slice(0, 8)}
                              </h3>
                              <p className="text-xs text-gray-500 mt-0.5">
                                {documentTypeLabels[(doc.documentType || doc.document_type || doc.type) as keyof typeof documentTypeLabels] || 'È†òÂèéÊõ∏'}
                              </p>
                            </div>
                            <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${statusColors[doc.status as keyof typeof statusColors] || 'bg-gray-100 text-gray-800'}`}>
                              {statusLabels[doc.status as keyof typeof statusLabels] || doc.status || '‰∏ãÊõ∏„Åç'}
                            </span>
                          </div>

                          {/* ÂèñÂºïÂÖàÊÉÖÂ†± */}
                          <div className="mb-3">
                            <div className="text-sm font-medium text-gray-900">
                              {doc.partnerName || doc.partner_name || doc.vendor_name || doc.store_name || '-'}
                            </div>
                            {doc.company_name && (
                              <div className="text-xs text-gray-600">{doc.company_name}</div>
                            )}
                            {doc.store_phone && (
                              <div className="text-xs text-gray-500">TEL: {doc.store_phone}</div>
                            )}
                          </div>

                          {/* ÈáëÈ°çÊÉÖÂ†± */}
                          <div className="bg-gray-50 rounded-md p-3 mb-3">
                            <div className="space-y-1.5">
                              <div className="flex justify-between text-xs">
                                <span className="text-gray-600">Â∞èË®à</span>
                                <span className="text-gray-900">
                                  ¬•{((doc.subtotal || doc.subtotal_amount) || 
                                    Math.max(0, (doc.totalAmount || doc.total_amount || 0) - (doc.tax_amount || 0))
                                  ).toLocaleString()}
                                </span>
                              </div>
                              <div className="flex justify-between text-xs">
                                <span className="text-gray-600">Á®éÈ°ç</span>
                                <span className="text-gray-900">¬•{(doc.tax_amount || 0).toLocaleString()}</span>
                              </div>
                              <div className="flex justify-between text-sm font-bold pt-1 border-t border-gray-200">
                                <span>ÂêàË®à</span>
                                <span className="text-blue-600">¬•{(doc.totalAmount || doc.total_amount || 0).toLocaleString()}</span>
                              </div>
                              <div className="pt-1.5 border-t border-gray-200 space-y-1">
                                <div className="flex justify-between text-xs">
                                  <span className="text-gray-600">È†ê„Çä</span>
                                  <span className="text-gray-900">
                                    {(doc.payment_amount !== undefined && doc.payment_amount > 0) 
                                      ? `¬•${doc.payment_amount.toLocaleString()}`
                                      : '-'}
                                  </span>
                                </div>
                                <div className="flex justify-between text-xs">
                                  <span className="text-gray-600">„ÅäÈá£„Çä</span>
                                  <span className="text-gray-900">
                                    {(doc.change_amount !== undefined && doc.change_amount > 0)
                                      ? `¬•${doc.change_amount.toLocaleString()}`
                                      : '-'}
                                  </span>
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* ÂãòÂÆöÁßëÁõÆÊÉÖÂ†± */}
                          {doc.category && (
                            <div className="mb-3">
                              <div className="flex items-center gap-2">
                                <span className="text-xs font-medium text-gray-700">ÂãòÂÆöÁßëÁõÆ:</span>
                                <span className="inline-block px-2 py-0.5 bg-green-100 text-green-800 text-xs rounded">
                                  {doc.category}
                                </span>
                                {doc.aiPrediction?.confidence && (
                                  <span className="text-xs text-gray-500">
                                    (AIÊé®Ê∏¨: {Math.round(doc.aiPrediction.confidence * 100)}%)
                                  </span>
                                )}
                              </div>
                            </div>
                          )}

                          {/* Êó•‰ªòÊÉÖÂ†± */}
                          <div className="mb-3">
                            <div className="text-xs text-gray-600">
                              <div>Áô∫Ë°åÊó•: {(doc.issueDate || doc.issue_date || doc.receipt_date) ? 
                                new Date(doc.issueDate || doc.issue_date || doc.receipt_date).toLocaleDateString('ja-JP') : '-'}</div>
                              <div>‰ΩúÊàê: {doc.created_at ? new Date(doc.created_at).toLocaleString('ja-JP', {
                                month: '2-digit',
                                day: '2-digit',
                                hour: '2-digit',
                                minute: '2-digit'
                              }) : '-'}</div>
                            </div>
                          </div>

                          {/* „Ç¢„ÇØ„Ç∑„Éß„É≥ */}
                          <div className="pt-3 border-t border-gray-200">
                            <Link
                              href={`/documents/${doc.id}`}
                              className="block w-full text-center px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors"
                            >
                              Ë©≥Á¥∞„ÇíË¶ã„Çã
                            </Link>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  // „ÉÜ„Éº„Éñ„É´ÂΩ¢Âºè
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            ÊñáÊõ∏Áï™Âè∑
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Á®ÆÈ°û
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            ÂèñÂºïÂÖà
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            ÂãòÂÆöÁßëÁõÆ
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Áô∫Ë°åÊó•
                          </th>
                          <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                            ÈáëÈ°ç
                          </th>
                          <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                            „Çπ„ÉÜ„Éº„Çø„Çπ
                          </th>
                          <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Êìç‰Ωú
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {documents.map((doc: any) => (
                          <tr key={doc.id} className="hover:bg-gray-50">
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                              {doc.documentNumber || doc.document_number || doc.receipt_number || doc.id.slice(0, 8)}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {documentTypeLabels[(doc.documentType || doc.document_type || doc.type) as keyof typeof documentTypeLabels] || 'È†òÂèéÊõ∏'}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              {doc.partnerName || doc.partner_name || doc.vendor_name || doc.store_name || '-'}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm">
                              {doc.category ? (
                                <span className="inline-block px-2 py-0.5 bg-green-100 text-green-800 text-xs rounded">
                                  {doc.category}
                                </span>
                              ) : (
                                <span className="text-gray-400">Êú™Ë®≠ÂÆö</span>
                              )}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {(doc.issueDate || doc.issue_date || doc.receipt_date) ? 
                                new Date(doc.issueDate || doc.issue_date || doc.receipt_date).toLocaleDateString('ja-JP') : '-'}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
                              ¬•{(doc.totalAmount || doc.total_amount || 0).toLocaleString()}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-center">
                              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusColors[doc.status as keyof typeof statusColors] || 'bg-gray-100 text-gray-800'}`}>
                                {statusLabels[doc.status as keyof typeof statusLabels] || doc.status || '‰∏ãÊõ∏„Åç'}
                              </span>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                              <Link
                                href={`/documents/${doc.id}`}
                                className="text-blue-600 hover:text-blue-900"
                              >
                                Ë©≥Á¥∞„ÇíË¶ã„Çã
                              </Link>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )
              ) : null}
            </div>

            {/* „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥ */}
            {(activeTab === 'ocr' ? totalOcrPages : totalPages) > 1 && (
              <div className="mt-6 flex justify-center">
                <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                  <button
                    onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                    disabled={currentPage === 1}
                    className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"
                  >
                    Ââç„Å∏
                  </button>
                  
                  {[...Array(activeTab === 'ocr' ? totalOcrPages : totalPages)].map((_, i) => (
                    <button
                      key={i + 1}
                      onClick={() => setCurrentPage(i + 1)}
                      className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${
                        currentPage === i + 1
                          ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'
                          : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                      }`}
                    >
                      {i + 1}
                    </button>
                  ))}
                  
                  <button
                    onClick={() => setCurrentPage(Math.min(activeTab === 'ocr' ? totalOcrPages : totalPages, currentPage + 1))}
                    disabled={currentPage === (activeTab === 'ocr' ? totalOcrPages : totalPages)}
                    className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"
                  >
                    Ê¨°„Å∏
                  </button>
                </nav>
              </div>
            )}
          </div>
        </main>
      </div>
    </div>
  );
}